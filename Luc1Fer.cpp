#pragma warning (disable : 4996)
#pragma comment(lib,"wininet.lib") //remove if not using VC++.
#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#include "stdafx.h"
#include <iostream>
#include <sstream>
#include <fstream>
#include "enet/enet.h"
#include <cmath>
#include <string>
#include <windows.h>
#include <vector>
#include <ctime>
#include <time.h>
#include <sstream>
#include <chrono>
#include <fstream>
#include "json.hpp"
#include "bcrypt.h"
#include "crypt_blowfish/crypt_gensalt.c"
#include "crypt_blowfish/crypt_blowfish.h"
#include "crypt_blowfish/crypt_blowfish.c"
#include "crypt_blowfish/wrapper.c"
#include "bcrypt.c"
#include <conio.h>
#include <thread> // TODO
#include <mutex> // TODO
#include <WinSock2.h>
#include <experimental/filesystem>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cctype>
#include <regex>
#include <filesystem>
#include <wininet.h>
#include <cstring>
#pragma comment(lib,"ws2_32.lib")
#pragma warning(disable:4996)

using namespace std;


using json = nlohmann::json; 


//#define TOTAL_LOG
#define REGISTRATION


ENetHost * server;
int cId = 1;
BYTE* itemsDat = 0;
int itemsDatSize = 0;
void  toUpperCase(std::string& str)
{
	std::transform(str.begin(), str.end(), str.begin(), ::toupper);
}

template<typename T>
void Remove(std::basic_string<T> & Str, const T * CharsToRemove)
{
	std::basic_string<T>::size_type pos = 0;
	while ((pos = Str.find_first_of(CharsToRemove, pos)) != std::basic_string<T>::npos)
	{
		Str.erase(pos, 1);
	}
}

const std::string currentDateTime() {
	time_t     now = time(0);
	struct tm  tstruct;
	char       buf[80];
	tstruct = *localtime(&now);
	// Visit http://en.cppreference.com/w/cpp/chrono/c/strftime
	// for more information about date/time format
	strftime(buf, sizeof(buf), "%Y/%m/%d %X", &tstruct);

	return buf;
}

/***bcrypt***/
bool worldproperlock;
int serverhash;
int serverversion;
int serverport;
int serverrolecount;
string playerroleuser;
string playerrolepass;
int playerrolelevel;

bool verifyPassword(string password, string hash) {
	int ret;

	ret = bcrypt_checkpw(password.c_str(), hash.c_str());
	assert(ret != -1);

	return !ret;
}


string hashPassword(string password) {
	char salt[BCRYPT_HASHSIZE];
	char hash[BCRYPT_HASHSIZE];
	int ret;

	ret = bcrypt_gensalt(12, salt);
	assert(ret == 0);
	ret = bcrypt_hashpw(password.c_str(), salt, hash);
	assert(ret == 0);
	return hash;
}


/***bcrypt**/



void sendData(ENetPeer* peer, int num, char* data, int len)
{
	/* Create a reliable packet of size 7 containing "packet\0" */
	ENetPacket * packet = enet_packet_create(0,
		len + 5,
		ENET_PACKET_FLAG_RELIABLE);
	/* Extend the packet so and append the string "foo", so it now */
	/* contains "packetfoo\0"                                      */
	/* Send the packet to the peer over channel id 0. */
	/* One could also broadcast the packet by         */
	/* enet_host_broadcast (host, 0, packet);         */
	memcpy(packet->data, &num, 4);
	if (data != NULL)
	{
		memcpy(packet->data + 2, data, len);
	}
	char zero = 0;
	memcpy(packet->data + 2 + len, &zero, 1);
	enet_peer_send(peer, 0, packet);
	enet_host_flush(server);

	delete data;
}

int getPacketId(char* data)
{
	return *data;
}


char* getPacketData(char* data)
{
	return data + 4;
}


string text_encode(char* text)
{
	string ret = "";
	while (text[0] != 0)
	{
		switch (text[0])
		{
		case '\n':
			ret += "\\n";
			break;
		case '\t':
			ret += "\\t";
			break;
		case '\b':
			ret += "\\b";
			break;
		case '\\':
			ret += "\\\\";
			break;
		case '\r':
			ret += "\\r";
			break;
		default:
			ret += text[0];
			break;
		}
		text++;
	}
	return ret;
}


int ch2n(char x)
{
	switch (x)
	{
	case '0':
		return 0;
	case '1':
		return 1;
	case '2':
		return 2;
	case '3':
		return 3;
	case '4':
		return 4;
	case '5':
		return 5;
	case '6':
		return 6;
	case '7':
		return 7;
	case '8':
		return 8;
	case '9':
		return 9;
	case 'A':
		return 10;
	case 'B':
		return 11;
	case 'C':
		return 12;
	case 'D':
		return 13;
	case 'E':
		return 14;
	case 'F':
		return 15;
	default:
		break;
	}
}




char* GetTextPointerFromPacket(ENetPacket* packet)
{
	char zero = 0;
	memcpy(packet->data + packet->dataLength - 1, &zero, 1);
	return (char*)(packet->data + 4);
}


BYTE* GetStructPointerFromTankPacket(ENetPacket* packet)
{
	unsigned int packetLenght = packet->dataLength;
	BYTE* result = NULL;
	if (packetLenght >= 0x3C)
	{
		BYTE* packetData = packet->data;
		result = packetData + 4;
		if (*(BYTE*)(packetData + 16) & 8)
		{
			if (packetLenght < *(int*)(packetData + 56) + 60)
			{
				cout << "Packet too small for extended packet to be valid" << endl;
				cout << "Sizeof float is 4.  TankUpdatePacket size: 56" << endl;
				result = 0;
			}
		}
		else
		{
			int zero = 0;
			memcpy(packetData + 56, &zero, 4);
		}
	}
	return result;
}


int GetMessageTypeFromPacket(ENetPacket* packet)
{
	int result;


	if (packet->dataLength > 3u)
	{
		result = *(packet->data);
	}
	else
	{
		cout << "Bad packet length, ignoring message" << endl;
		result = 0;
	}
	return result;
}




vector<string> explode(const string &delimiter, const string &str)
{
	vector<string> arr;


	int strleng = str.length();
	int delleng = delimiter.length();
	if (delleng == 0)
		return arr;//no change


	int i = 0;
	int k = 0;
	while (i < strleng)
	{
		int j = 0;
		while (i + j < strleng && j < delleng && str[i + j] == delimiter[j])
			j++;
		if (j == delleng)//found delimiter
		{
			arr.push_back(str.substr(k, i - k));
			i += delleng;
			k = i;
		}
		else
		{
			i++;
		}
	}
	arr.push_back(str.substr(k, i - k));
	return arr;
}


struct GamePacket
{
	BYTE* data;
	int len;
	int indexes;
};




GamePacket appendFloat(GamePacket p, float val)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 1;
	memcpy(n + p.len + 2, &val, 4);
	p.len = p.len + 2 + 4;
	p.indexes++;
	return p;
}


GamePacket appendFloat(GamePacket p, float val, float val2)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 8];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 3;
	memcpy(n + p.len + 2, &val, 4);
	memcpy(n + p.len + 6, &val2, 4);
	p.len = p.len + 2 + 8;
	p.indexes++;
	return p;
}


GamePacket appendFloat(GamePacket p, float val, float val2, float val3)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 12];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 4;
	memcpy(n + p.len + 2, &val, 4);
	memcpy(n + p.len + 6, &val2, 4);
	memcpy(n + p.len + 10, &val3, 4);
	p.len = p.len + 2 + 12;
	p.indexes++;
	return p;
}


GamePacket appendInt(GamePacket p, int val)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 9;
	memcpy(n + p.len + 2, &val, 4);
	p.len = p.len + 2 + 4;
	p.indexes++;
	return p;
}


GamePacket appendIntx(GamePacket p, int val)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 5;
	memcpy(n + p.len + 2, &val, 4);
	p.len = p.len + 2 + 4;
	p.indexes++;
	return p;
}


GamePacket appendString(GamePacket p, string str)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + str.length() + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 2;
	int sLen = str.length();
	memcpy(n + p.len + 2, &sLen, 4);
	memcpy(n + p.len + 6, str.c_str(), sLen);
	p.len = p.len + 2 + str.length() + 4;
	p.indexes++;
	return p;
}


GamePacket createPacket()
{
	BYTE* data = new BYTE[61];
	string asdf = "0400000001000000FFFFFFFF00000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	for (int i = 0; i < asdf.length(); i += 2)
	{
		char x = ch2n(asdf[i]);
		x = x << 4;
		x += ch2n(asdf[i + 1]);
		memcpy(data + (i / 2), &x, 1);
		if (asdf.length() > 61 * 2) throw 0;
	}
	GamePacket packet;
	packet.data = data;
	packet.len = 61;
	packet.indexes = 0;
	return packet;
}


GamePacket packetEnd(GamePacket p)
{
	BYTE* n = new BYTE[p.len + 1];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	char zero = 0;
	memcpy(p.data + p.len, &zero, 1);
	p.len += 1;
	//*(int*)(p.data + 52) = p.len;
	*(int*)(p.data + 56) = p.indexes;//p.len-60;//p.indexes;
	*(BYTE*)(p.data + 60) = p.indexes;
	//*(p.data + 57) = p.indexes;
	return p;
}


struct InventoryItem {
	__int16 itemID;
	__int8 itemCount;
};


struct PlayerInventory {
	vector<InventoryItem> items;
	int inventorySize = 100;
};


#define cloth0 cloth_hair
#define cloth1 cloth_shirt
#define cloth2 cloth_pants
#define cloth3 cloth_feet
#define cloth4 cloth_face
#define cloth5 cloth_hand
#define cloth6 cloth_back
#define cloth7 cloth_mask
#define cloth8 cloth_necklace
#define cloth9 cloth_ances

vector<string>guildmem;
vector<string>guildelder;
vector<string>guildco;


struct PlayerInfo {
	bool isInWorld = false;
	bool isBannedWait = false;
	bool isIn = false;
	int netID;
	int lastdropitem = 0;
	int lastdropitemcount = 1;
	int wrenchsession;
	int bitShiftTest = 0;
	bool canLeave = true;
	bool haveGrowId = false;
	bool haveGuestId = false;
	int wrenchx;
	int wrenchy;

	// SHOP ITEMS
	bool boughtLGW = false; // legendary wing
	bool boughtLGK = false; // legendary katana
	bool boughtLGD = false; // drag of legend
	bool boughtLGB = false; // legend-bot
	bool boughtLKW = false; // legend knight wings
	bool boughtCWD = false; // chaos curse wand
	bool boughtRFS = false; // rayman
	bool boughtCDG = false; // chaos drag
	bool boughtLTIT = false; // legendary title
	bool boughtLWHIP = false; // legendary whip
	bool boughtPHOENIX = false; // phoenix wings
	bool boughtDAV = false; // davinci
	bool boughtZEUS = false; // zeus
	bool boughtNDEV = false; // Nightmare devil
	bool boughtTXMOM = false; // txmom crown
	bool boughtFLASHAXE = false; // flashaxe
	bool boughtVIOLET = false; // violet
	bool boughtCHIMERA = false; // chimera
	bool boughtBRAIN = false; // brainflower
	bool boughtCCROWN = false; // challenge crown
	bool boughtGBOW = false; // Golden Heartbow
	bool boughtGANGEL = false; // Golden Angel
	bool boughtGROB = false; // Golden Robinson
	bool boughtHSCYTHE = false; // Heavenly Scythe
	bool boughtGDIAPER = false; // Golden Diaper
	bool boughtGTANGEL = false; // Golden Teeny
	bool boughtGNECK = false; // Golden Neck
	bool boughtGGLASS = false; // Golden Glasses
	bool boughtGPEGASUS = false; // Golden Pegasus
	bool boughtGBUG = false; // Golden Bug
	bool boughtWAR = false; // War hammer
	bool boughtRAY = false; // RAYMAN
	bool boughtAAC = false; // Ancestral
	bool boughtSPD = false; // DIGGER SPADE
	bool boughtTK = false; // DIGGER SPADE



	// SHOP ITEMS

	string tankIDName = "";
	string tankIDPass = "";
	string requestedName = "";
	string rawName = "";
	bool isAAP = false;
	int warns = 0;
	int bans = 0;
	int rubblexp = 0;
	int rubble = 0;
	bool transsuccess = false;
	bool isModState = false;
	string displayName = "";
	bool wrongpass = false;
	int guildBg = 0;
	int guildFg = 0;
	string guildStatement = "";
	string guildLeader = "";
	string displayNamebackup = "";
	string displayUsername = "";
	vector <string> guildmatelist;
	vector<string>guildMembers;
	vector<string>worldsowned;
	vector<string>lastworlds;
	int guildlevel = 0;
	int guildexp = 0;


	bool isinvited = false;

	string createGuildName = "";
	string createGuildStatement = "";
	string createGuildFlagBg = "";
	string createGuildFlagFg = "";

	string guild = "";
	bool joinguild = false;
	string lastgm = "";
	string lastgmname = "";
	string lastgmworld = "";
	string guildlast = "";
	string msgName = "";
	bool isNicked = false;
	string country = "";
	string gameversion = "";
	string rid = "";
	string gid = "";
	string aid = "";
	bool canExit = true;
	string vid = "";	
	string wkid = "";
	string metaip = "";
	string hash2 = "";
	string hash = "";
	string fhash = "";
	string mac = "";	
	string token = "";
	string user = "";
	string deviceversion = ""; //deviceVersion
	string cbits = "";
	string lmode = "";
	string gdpr = "";
	string f = "";
	string fz = "";
	string hpid = "";
	string platformID = "";
	string player_age = "1";
	int adminLevel = 0;
	string currentWorld = "EXIT";
	string plainip = "";
	string plainip2 = "";
	string plainip3 = "";
	string plainip4 = "";
	
	//int rnipID = enet_address_get_host(&address, "0.0.0.0", 10);

	string buttonID = to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10);
	
	string firstnbr = to_string(rand() % 50);
	string secondnbr = to_string(rand() % 50);

	int resultnbr1 = std::atoi(firstnbr.c_str());
	int resultnbr2 = std::atoi(secondnbr.c_str());
	int Endresult = 0;
	bool radio = true;
	int x;
	int y;
	int x1;
	int y1;
	int posXY;
	int posX;
	int posY;
	int cpY;
	int cpX;
	int SignPosX;
	int SignPosY;
	bool characterLoaded = false;
	bool isRotatedLeft = false;
	string charIP = "";
	bool isDBanned = false;

	vector<string>friendinfo;
	vector<string>createfriendtable;
	vector<string>createworldsowned;

	string lastFrn = "";
	string lastFrnName = "";
	string lastFrnWorld = "";

	string lastMsger = "";
	string lastMsgerTrue = "";
	string lastMsgWorld = "";

	string lastfriend = "";
	string lastInfo = "";
	string lastInfoname = "";

	string lastSeller = "";
	string lastSellWorld = "";
	string lastBuyer = "";
	int lastTradeAmount = 99999999999;


	string addgems = "1000 gems";
	int characterState = 0;	
	int level = 1;
	int xp = 0;

	bool forcegemUpdate = false;
	bool isUpdating = false;
	bool joinClothesUpdated = false;
	int effect = 8421376;
	int peffect = 8421376;

	bool taped = false;
	//bool enabledAAP = false;
	bool canCreate = false;
	bool passedCaptcha = false;
	bool passedCaptcha2 = false;


	int cloth_hair = 0; // 0
	int cloth_shirt = 0; // 1
	int cloth_pants = 0; // 2
	int cloth_feet = 0; // 3
	int cloth_face = 0; // 4
	int cloth_hand = 0; // 5
	int cloth_back = 0; // 6
	int cloth_mask = 0; // 7
	int cloth_necklace = 0; // 8
	int cloth_ances = 0; // 9

	int cur = 0;
	int ipID = 0;
	int ban = 0;
	int istempBan = 0;

	int invcount = 0;

	int invitem1 = 0;
	int invitem2 = 0;
	int invitem3 = 0;
	int invitem4 = 0;
	int invitem5 = 0;
	int invitem6 = 0;
	int invitem7 = 0;
	int invitem8 = 0;
	int invitem9 = 0;


	bool canWalkInBlocks = false; // 1
	bool canDoubleJump = false; // 2
	bool cantsay = false;
	bool isInvisible = false; // 4
	bool noHands = false; // 8
	bool noEyes = false; // 16
	bool noBody = false; // 32	
	bool devilHorns = false; // 64
	bool goldenHalo = false; // 128
	bool isFrozen = false; // 2048
	bool isCursed = false; // 4096
	bool isDuctaped = false; // 8192
	bool haveCigar = false; // 16384
	bool isShining = false; // 32768
	bool isZombie = false; // 65536
	bool isHitByLava = false; // 131072
	bool haveHauntedShadows = false; // 262144
	bool haveGeigerRadiation = false; // 524288
	bool haveReflector = false; // 1048576
	bool isEgged = false; // 2097152
	bool havePineappleFloag = false; // 4194304
	bool haveFlyingPineapple = false; // 8388608
	bool haveSuperSupporterName = false; // 16777216
	bool haveSupperPineapple = false; // 33554432
	bool isGhost = false;
	bool isinv = false;
	//string lastMsgWorld;
	bool unwheel = false;
	bool unsales = false;
	bool ghostalr = false;
	//bool 
	int skinColor = 0xC8E5FFFF; //normal SKIN color like gt!


	PlayerInventory inventory;


	long long int lastSB = 0;
	long long int lastINV = 0;
	long long int lastBREAK = 0;
};




int getState(PlayerInfo* info) {
	int val = 0;
	val |= info->canWalkInBlocks << 0;
	val |= info->canDoubleJump << 1;
	val |= info->cantsay << 13;
	val |= info->noHands << 3;
	val |= info->noEyes << 4;
	val |= info->noBody << 5;
	val |= info->goldenHalo << 7;
	val |= info->isFrozen << 8;
	val |= info->isCursed << 12;
	val |= info->isDuctaped << 10;
	val |= info->haveSuperSupporterName << 24;
	val |= info->isShining << 15;
	val |= info->isZombie << 16;
	val |= info->haveHauntedShadows << 18;
	return val;
}




struct WorldItem {
	__int16 foreground = 0;
	__int16 background = 0;
	int breakLevel = 0;
	long long int breakTime = 0;
	bool sign = false;
	bool water = false;
	int displayblock = 0;
	bool fire = false;
	bool glue = false;
	string text = "";
	bool red = false;
	bool green = false;
	bool blue = false;


};


struct WorldInfo {
	int width = 100;
	int height = 60;
	bool nuked = false;
	string name = "TEST";
	WorldItem* items;
	string owner = "";
	string Displayowner = "";
	bool isPublic = false;
	bool allowMod = true;	
	bool pIsVip = false;
	bool pIsMod = false;
	bool pIsDev = false;
	bool pIsPlay = false;
	bool isEvent = true;
	int ghostalr = 0;
	int invisalr = 0;
	int weather = 0;
	vector<string> worldaccess;
	vector<string> accessworld;
};

WorldInfo generateCleanWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width*world.height];
	for (int i = 0; i < world.width*world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 0; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 0; }
				else { world.items[i].foreground = 0; }
			}
			else { world.items[i].foreground = 0; }
		}
		else if (i >= 5400) { world.items[i].foreground = 8; }
		if (i >= 3700)
			world.items[i].background = 14;
		if (i == 3650)
			world.items[i].foreground = 6;
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 0; //fixed the grass in the world!
		if (i == 3750)
			world.items[i].foreground = 8;
	}
	return world;
}


WorldInfo generateWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width*world.height];
	for (int i = 0; i < world.width*world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 10; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 4; }
				else { world.items[i].foreground = 2; }
			}
			else { world.items[i].foreground = 2; }
		}
		else if (i >= 5400) { world.items[i].foreground = 8; }
		if (i >= 3700)
			world.items[i].background = 14;
		if (i == 3650)
			world.items[i].foreground = 6;
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 0; //fixed the grass in the world!
		if (i == 3750)
			world.items[i].foreground = 8;
	}
	return world;
}

WorldInfo ClearWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width*world.height];
	for (int i = 0; i < world.width*world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 0; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 0; }
				else { world.items[i].foreground = 0; }
			}
			else { world.items[i].foreground = 2; }
		}
		else if (i >= 5400) { world.items[i].foreground = 8; }
		if (i >= 3700)
			world.items[i].background = 0;
		if (i == 3650)
			world.items[i].foreground = 6;
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 0; //fixed the grass in the world!
		if (i == 3750)
			world.items[i].foreground = 8;
	}
	return world;
}



class PlayerDB {
public:
	static string getProperName(string name);
	static string PlayerDB::fixColors(string text);
	static int playerLogin(ENetPeer* peer, string username, string password);

	static int playerRegister(ENetPeer* peer, string username, string password, string passwordverify, string discord, string pin);

	static int guildRegister(ENetPeer* peer, string guildName, string guildStatement, string guildFlagfg, string guildFlagbg);
};


string PlayerDB::getProperName(string name) {
	string newS;
	for (char c : name) newS += (c >= 'A' && c <= 'Z') ? c - ('A' - 'a') : c;
	string ret;
	for (int i = 0; i < newS.length(); i++)
	{
		if (newS[i] == '`') i++; else ret += newS[i];
	}
	string ret2;
	for (char c : ret) if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) ret2 += c;
	return ret2;
}


string PlayerDB::fixColors(string text) {
	string ret = "";
	int colorLevel = 0;
	for (int i = 0; i < text.length(); i++)
	{
		if (text[i] == '`')
		{
			ret += text[i];
			if (i + 1 < text.length())
				ret += text[i + 1];


			if (i + 1 < text.length() && text[i + 1] == '`')
			{
				colorLevel--;
			}
			else {
				colorLevel++;
			}
			i++;
		}
		else {
			ret += text[i];
		}
	}
	for (int i = 0; i < colorLevel; i++) {
		ret += "``";
	}
	for (int i = 0; i > colorLevel; i--) {
		ret += "`w";
	}
	return ret;
}

void testSubServer(ENetPeer* peer)
{
	GamePacket p2 = packetEnd(appendInt(appendInt(appendInt(appendString(appendString(createPacket(), "OnSendToServer"), "192.168.2.101"), 17091), 1), 1));

	memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
	ENetPacket * packet2 = enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packet2);
	delete p2.data;
}

void banlogin(ENetPeer* peer) {
	string text = "action|log\nmsg|`4Sorry, this account (`5" + ((PlayerInfo*)(peer->data))->rawName + "`4) has been suspended. `wContact: ! Luc1Fer#1234 [Developer/Creator].\n";
	string text3 = "action|logon_fail\n";
	string dc = "https://discord.gg/zW25ynC";
	string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


	BYTE* data = new BYTE[5 + text.length()];
	BYTE* data3 = new BYTE[5 + text3.length()];
	BYTE* dataurl = new BYTE[5 + url.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);

	memcpy(dataurl, &type, 4);
	memcpy(dataurl + 4, url.c_str(), url.length());
	memcpy(dataurl + 4 + url.length(), &zero, 1);

	memcpy(data3, &type, 4);
	memcpy(data3 + 4, text3.c_str(), text3.length());
	memcpy(data3 + 4 + text3.length(), &zero, 1);

	ENetPacket* p = enet_packet_create(data,
		5 + text.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p);
	ENetPacket* p3 = enet_packet_create(dataurl,
		5 + url.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p3);
	ENetPacket* p2 = enet_packet_create(data3,
		5 + text3.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p2);

	delete data;
	delete dataurl;
	delete data3;

	enet_peer_disconnect_later(peer, 0);
}


int PlayerDB::playerLogin(ENetPeer* peer, string username, string password) {
	string uname = username;
	toUpperCase(uname);

	if (uname == "CON" || uname == "NUL" || uname == "PRN" || uname == "AUX" || uname == "CLOCK$" || uname == "COM0" || uname == "COM1" || uname == "COM2" || uname == "COM3" || uname == "COM4" || uname == "COM5" || uname == "COM6" || uname == "COM7" || uname == "COM8" || uname == "COM9" || uname == "LPT0" || uname == "LPT1" || uname == "LPT2" || uname == "LPT3" || uname == "LPT4" || uname == "LPT5" || uname == "LPT6" || uname == "LPT7" || uname == "LPT8" || uname == "LPT9")
	{
		return -4;
	}
	if (uname == "" || uname == " " || uname == "  " || uname == "   " || uname == "    ")
	{
		return -5;
	}
	bool contains_non_alpha
		= !std::regex_match(uname, std::regex("^[0-9]+$"));

	if (contains_non_alpha)
	{
	}
	else {
		return -4;
	}
	std::ifstream ifs("players/" + PlayerDB::getProperName(username) + ".json");
	if (ifs.is_open()) {
		json j;
		ifs >> j;
		string pss = j["password"];
		int ban = j["isBanned"];
		int ipID = j["ipID"];




		ENetPeer* currentPeer;

		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)

			if (ban == 1) {
				banlogin(peer);
				//enet_peer_disconnect_later(peer, 0);
			}
			else if (((PlayerInfo*)(peer->data))->gameversion != "2.999") {

				string text = "action|log\nmsg|`4UPDATE REQUIRED`o : The `$V2.999 `oupdate is now avallable for your device. Go get it! You'll need that before you can login into private server.\n";
				string text3 = "action|logon_fail\n";
				string dc = "https://growtopiagame.com/Growtopia-Installer.exe";
				string url = "action|set_url\nurl|" + dc + "\nlabel|`$Update Growtopia\n";


				BYTE* data = new BYTE[5 + text.length()];
				BYTE* data3 = new BYTE[5 + text3.length()];
				BYTE* dataurl = new BYTE[5 + url.length()];
				BYTE zero = 0;
				int type = 3;
				memcpy(data, &type, 4);
				memcpy(data + 4, text.c_str(), text.length());
				memcpy(data + 4 + text.length(), &zero, 1);

				memcpy(dataurl, &type, 4);
				memcpy(dataurl + 4, url.c_str(), url.length());
				memcpy(dataurl + 4 + url.length(), &zero, 1);

				memcpy(data3, &type, 4);
				memcpy(data3 + 4, text3.c_str(), text3.length());
				memcpy(data3 + 4 + text3.length(), &zero, 1);

				ENetPacket* p = enet_packet_create(data,
					5 + text.length(),
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, p);
				ENetPacket* p3 = enet_packet_create(dataurl,
					5 + url.length(),
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, p3);
				ENetPacket* p2 = enet_packet_create(data3,
					5 + text3.length(),
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, p2);

				delete data;
				delete dataurl;
				delete data3;

				enet_peer_disconnect_later(peer, 0);
			}



		if (verifyPassword(password, pss)) {
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (currentPeer == peer)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(username))
				{
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Someone else logged into this account!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet);
						delete p.data;
					}
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Someone else was logged into this account! He was kicked out now."));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						//enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					enet_host_flush(server);
					enet_peer_disconnect_later(currentPeer, 0);
				}
			}
			return 1;
		}
		else {

			return -1;
		}
	}
	else {
		return -2;
	}
}
int PlayerDB::guildRegister(ENetPeer* peer, string guildName, string guildStatement, string guildFlagfg, string guildFlagbg)   {
	if (guildName.find(" ") != string::npos || guildName.find(".") != string::npos || guildName.find(",") != string::npos || guildName.find("@") != string::npos || guildName.find("[") != string::npos || guildName.find("]") != string::npos || guildName.find("#") != string::npos || guildName.find("<") != string::npos || guildName.find(">") != string::npos || guildName.find(":") != string::npos || guildName.find("{") != string::npos || guildName.find("}") != string::npos || guildName.find("|") != string::npos || guildName.find("+") != string::npos || guildName.find("_") != string::npos || guildName.find("~") != string::npos || guildName.find("-") != string::npos || guildName.find("!") != string::npos || guildName.find("$") != string::npos || guildName.find("%") != string::npos || guildName.find("^") != string::npos || guildName.find("&") != string::npos || guildName.find("`") != string::npos || guildName.find("*") != string::npos || guildName.find("(") != string::npos || guildName.find(")") != string::npos || guildName.find("=") != string::npos || guildName.find("'") != string::npos || guildName.find(";") != string::npos || guildName.find("/") != string::npos) {
		return -1;
	}

	if (guildName.length() < 3) {
		return -2;
	}
	if (guildName.length() > 15) {
		return -3;
	}
	int fg;
	int bg;

	try {
		fg = stoi(guildFlagfg);
	}
	catch (std::invalid_argument& e) {
		return -6;
	}
	try {
		bg = stoi(guildFlagbg);
	}
	catch (std::invalid_argument& e) {
		return -5;
	}
	if (guildFlagbg.length() > 4) {
		return -7;
	}
	if (guildFlagfg.length() > 4) {
		return -8;
	}

	string fixedguildName = PlayerDB::getProperName(guildName);

	std::ifstream ifs("guilds/" + fixedguildName + ".json");
	if (ifs.is_open()) {
		return -4;
	}


	/*std::ofstream o("guilds/" + fixedguildName + ".json");
	if (!o.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}

	json j;

	//  Guild Detail
	j["GuildName"] = guildName;
	j["GuildStatement"] = guildStatement;
	j["GuildWorld"] = ((PlayerInfo*)(peer->data))->currentWorld;

	//  Guild Level
	j["GuildLevel"] = 0;
	j["GuildExp"] = 0;

	// Guild Leader
	j["Leader"] = ((PlayerInfo*)(peer->data))->rawName;


	// Guild Flag
	j["foregroundflag"] = 0;
	j["backgroundflag"] = 0;


	// Role
	vector<string>guildmember;
	vector<string>guildelder;
	vector<string>guildco;

	j["CoLeader"] = guildelder;
	j["ElderLeader"] = guildco;
	j["Member"] = guildmem;

	o << j << std::endl; */
	return 1;
}

int PlayerDB::playerRegister(ENetPeer* peer, string username, string password, string passwordverify, string discord, string pin) {
	
	if (username.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
		return -10;
	}
	
		
		username = PlayerDB::getProperName(username);		
		if (discord.find("#") == std::string::npos && discord.length() != 0) return -5;
		//if (email.find("@") == std::string::npos && email.length() != 0) return -4;
		if (passwordverify != password) return -3;
		if (username.length() < 3) return -2;
		if (username.length() > 20) return -2;

		string uname = username;
		toUpperCase(uname);

		if (uname == "CON" || uname == "NUL" || uname == "PRN" || uname == "AUX" || uname == "CLOCK$" || uname == "COM0" || uname == "COM1" || uname == "COM2" || uname == "COM3" || uname == "COM4" || uname == "COM5" || uname == "COM6" || uname == "COM7" || uname == "COM8" || uname == "COM9" || uname == "LPT0" || uname == "LPT1" || uname == "LPT2" || uname == "LPT3" || uname == "LPT4" || uname == "LPT5" || uname == "LPT6" || uname == "LPT7" || uname == "LPT8" || uname == "LPT9")
		{
			return -6;
		}
		if (uname == "" || uname == " " || uname == "  " || uname == "   " || uname == "    ")
		{
			return -11;
		}
		std::ifstream ifs("players/" + username + ".json");
		if (ifs.is_open()) {
			return -1;
		}
		
		bool contains_non_alpha = !std::regex_match(pin, std::regex("^[0-9]+$"));

		ENetPeer * currentPeer;

		currentPeer = server->peers;

		std::ofstream o("players/" + username + ".json");
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}
		json j;
		j["username"] = username;
		j["password"] = hashPassword(password);
		j["ClothBack"] = 0;
		j["ClothHand"] = 0;
		j["ClothFace"] = 0;
		j["ClothShirt"] = 0;
		j["ClothPants"] = 0;
		j["ClothNeck"] = 0;
		j["ClothHair"] = 0;
		j["ClothFeet"] = 0;
		j["ClothMask"] = 0;
		j["ClothAnces"] = 0;
		j["isBanned"] = 0;	
		j["ipID"] = peer->address.host;
		j["effect"] = 8421376;
		j["friends"] = ((PlayerInfo*)(peer->data))->createfriendtable;
		j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
		j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
		j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
		j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
		j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
		j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
		j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
		j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
		j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
		j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
		j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
		j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
		j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
		j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
		j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
		j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
		j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
		j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
		j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
		j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
		j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
		j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
		j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
		j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
		j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
		j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
		j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
		j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
		j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
		j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
		j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
		j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
		j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
		j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
		j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
		j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
		j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
		j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
		j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
		//j["email"] = email;
		j["discord"] = discord;
		j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
		j["guild"] = "";
		j["joinguild"] = false;
		j["level"] = 1;
		j["xp"] = 0;
		j["rubble"] = 0;
		j["rubblexp"] = 0;
		j["worldsowned"] = ((PlayerInfo*)(peer->data))->createworldsowned;

		o << j << std::endl;
		return 1;
	}

struct AWorld {
	WorldInfo* ptr;
	WorldInfo info;
	int id;
};


class WorldDB {
public:
	WorldInfo get(string name);
	AWorld get2(string name);
	void flush(WorldInfo info);
	void flush2(AWorld info);
	void save(AWorld info);
	void saveAll();
	void saveRedundant();
	vector<WorldInfo> getRandomWorlds();
	WorldDB();
private:
	vector<WorldInfo> worlds;
};


WorldDB::WorldDB() {
	// Constructor
}


void sendConsoleMsg(ENetPeer* peer, string message) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), message));
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}
void sendTextOver(ENetPeer* peer, string message) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), message));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}


string getStrUpper(string txt) {
	string ret;
	for (char c : txt) ret += toupper(c);
	return ret;
}


AWorld WorldDB::get2(string name) {
	if (worlds.size() > 200) {
#ifdef TOTAL_LOG
		cout << "Saving redundant worlds!" << endl;
#endif
		saveRedundant();
#ifdef TOTAL_LOG
		cout << "Redundant worlds are saved!" << endl;
#endif
	}
	AWorld ret;
	name = getStrUpper(name);
	if (name.length() < 1) throw 1; // too short name
	for (char c : name) {
		if ((c<'A' || c>'Z') && (c<'0' || c>'9'))
			throw 2; // wrong name
	}
	if (name == "EXIT") {
		throw 3;
	}
	for (int i = 0; i < worlds.size(); i++) {
		if (worlds.at(i).name == name)
		{
			ret.id = i;
			ret.info = worlds.at(i);
			ret.ptr = &worlds.at(i);
			return ret;
		}


	}
	std::ifstream ifs("worlds/" + name + ".json");
	if (ifs.is_open()) {


		json j;
		ifs >> j;
		WorldInfo info;
		info.name = j["name"].get<string>();
		info.width = j["width"];
		info.nuked = j["nuked"];
		info.height = j["height"];
		info.owner = j["owner"].get<string>();
		vector <string>frns;
		if (j.count("access") == 1) {
			for (int i = 0; i < j["access"].size(); i++) {
				frns.push_back(j["access"][i]);
			}
		}
		else {
			frns = {};
		}
		info.worldaccess = frns;
		info.Displayowner = j["Displayowner"].get<string>();
		info.isPublic = j["isPublic"];
		info.allowMod = j["allowMod"];
		info.pIsVip = j["isVip"];
		info.pIsMod = j["isMod"];
		info.pIsDev = j["isDev"];
		info.pIsPlay = j["isPlay"];
		json tiles = j["tiles"];
		int square = info.width*info.height;
		info.items = new WorldItem[square];
		for (int i = 0; i < square; i++) {
			info.items[i].foreground = tiles[i]["fg"];
			info.items[i].background = tiles[i]["bg"];
		}
		worlds.push_back(info);
		ret.id = worlds.size() - 1;
		ret.info = info;
		ret.ptr = &worlds.at(worlds.size() - 1);
		return ret;
	}
	else {
		WorldInfo info = generateWorld(name, 100, 60);


		worlds.push_back(info);
		ret.id = worlds.size() - 1;
		ret.info = info;
		ret.ptr = &worlds.at(worlds.size() - 1);
		return ret;
	}
	throw 1;
}


WorldInfo WorldDB::get(string name) {


	return this->get2(name).info;
}


void WorldDB::flush(WorldInfo info)
{
	std::ofstream o("worlds/" + info.name + ".json");
	if (!o.is_open()) {
		cout << GetLastError() << endl;
	}
	json j;
	j["name"] = info.name;
	j["width"] = info.width;
	j["height"] = info.height;
	j["nuked"] = info.nuked;
	j["owner"] = info.owner;
	j["weather"] = info.weather;
	j["access"] = info.worldaccess;
	j["Displayowner"] = info.Displayowner;
	j["allowMod"] = info.allowMod;
	j["isVip"] = info.pIsVip;
	j["isMod"] = info.pIsMod;
	j["isDev"] = info.pIsDev;
	j["isPlay"] = info.pIsPlay;
	j["isPublic"] = info.isPublic;
	j["weather"] = info.weather;
	json tiles = json::array();
	int square = info.width*info.height;

	for (int i = 0; i < square; i++)
	{
		json tile;
		tile["fg"] = info.items[i].foreground;
		tile["bg"] = info.items[i].background;
		tiles.push_back(tile);
	}
	j["tiles"] = tiles;
	o << j << std::endl;
}


void WorldDB::flush2(AWorld info)
{
	this->flush(info.info);
}


void WorldDB::save(AWorld info)
{
	flush2(info);
	delete info.info.items;
	worlds.erase(worlds.begin() + info.id);
}


void WorldDB::saveAll()
{
	for (int i = 0; i < worlds.size(); i++) {
		flush(worlds.at(i));
		delete worlds.at(i).items;
	}
	worlds.clear();
}


vector<WorldInfo> WorldDB::getRandomWorlds() {
	vector<WorldInfo> ret;
	for (int i = 0; i < ((worlds.size() < 10) ? worlds.size() : 10); i++)
	{ // load first four worlds, it is excepted that they are special
		ret.push_back(worlds.at(i));
	}
	// and lets get up to 6 random
	if (worlds.size() > 4) {
		for (int j = 0; j < 6; j++)
		{
			bool isPossible = true;
			WorldInfo world = worlds.at(rand() % (worlds.size() - 4));
			for (int i = 0; i < ret.size(); i++)
			{
				if (world.name == ret.at(i).name || world.name == "EXIT")
				{
					isPossible = false;
				}
			}
			if (isPossible)
				ret.push_back(world);
		}
	}
	return ret;
}


void WorldDB::saveRedundant()
{
	for (int i = 4; i < worlds.size(); i++) {
		bool canBeFree = true;
		ENetPeer * currentPeer;


		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (((PlayerInfo*)(currentPeer->data))->currentWorld == worlds.at(i).name)
				canBeFree = false;
		}
		if (canBeFree)
		{
			flush(worlds.at(i));
			delete worlds.at(i).items;
			worlds.erase(worlds.begin() + i);
			i--;
		}
	}
}


//WorldInfo world;
//vector<WorldInfo> worlds;
WorldDB worldDB;

bool isHereSave(ENetPeer* peer, ENetPeer* peer2)
{
	return ((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(peer2->data))->currentWorld;
}

int getPlayersCountInWorldSave(string name)
{
	int count = 0;
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(currentPeer->data))->isinv == false)
		{
			if (((PlayerInfo*)(currentPeer->data))->currentWorld == name)
				count++;
		}
	}
	return count;
}


void sendPlayerLeaveSave(ENetPeer* peer, PlayerInfo* player)
{
	ENetPeer * currentPeer;
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(player->netID) + "\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + player->displayName + "`` `5left, `w" + std::to_string(getPlayersCountInWorldSave(player->currentWorld)) + "`` `5others here>```w"));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;

		if (isHereSave(peer, currentPeer)) {
			{

				ENetPacket * packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				{
					ENetPacket * packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
				}

			}
			{

			}
		}
	}
	delete p.data;
	delete p2.data;
}




void sendWorldOffersSave(ENetPeer* peer)
{
	if (!((PlayerInfo*)(peer->data))->isIn) return;
	vector<WorldInfo> worlds = worldDB.getRandomWorlds();
	string worldOffers = "default|";
	if (worlds.size() > 0) {
		worldOffers += worlds[0].name;
	}

	worldOffers += "\nadd_button|Showing: `wWorlds``|_catselect_|0.6|3529161471|\n";
	for (int i = 0; i < worlds.size(); i++) {
		worldOffers += "add_floater|" + worlds[i].name + "|" + std::to_string(getPlayersCountInWorldSave(worlds[i].name)) + "|0.55|3529161471\n";
	}
	//GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|4278190335\nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), worldOffers));
	ENetPacket * packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete p3.data;
	//enet_host_flush(server);
}

void saveAllWorlds() // atexit hack plz fix
{
	
	worldproperlock = true;


	ENetPeer * currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[LTPS MANAGER] `5System is saving the world`o!"));
		ENetPacket * packet3 = enet_packet_create(p3.data,
			p3.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(currentPeer, 0, packet3);
		//enet_peer_reset(currentPeer);

	}
	cout << "Saving worlds..." << endl;
	//enet_host_destroy(server); gay
	worldDB.saveAll();
	worldDB.saveRedundant();
	cout << "Worlds saved!" << endl;
	ENetPeer * currentPeerz;


	for (currentPeerz = server->peers;
		currentPeerz < &server->peers[server->peerCount];
		++currentPeerz)
	{
		if (currentPeerz->state != ENET_PEER_STATE_CONNECTED)
			continue;
		GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[LTPS MANAGER] `2World saved`o!"));
		ENetPacket * packet3 = enet_packet_create(p3.data,
			p3.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(currentPeerz, 0, packet3);
	}
	worldproperlock = false;
}


WorldInfo* getPlyersWorld(ENetPeer* peer)
{
	try {
		return worldDB.get2(((PlayerInfo*)(peer->data))->currentWorld).ptr;
	}
	catch (int e) {
		return NULL;
	}
}


struct PlayerMoving {
	int packetType;
	int netID;
	float x;
	float y;
	int characterState;
	int plantingTree;
	float XSpeed;
	float YSpeed;
	int punchX;
	int punchY;

};

struct BlockVisual {
	int packetType;
	int netID;
	int characterState;
	int punchX;
	int punchY;
	int charStat;
	int blockid;
	int visual;
	int displayblock;
	int signs;
	int backgroundid;

};

BYTE* packSign(BlockVisual* dataStruct)
{
	BYTE* data = new BYTE[56];
	for (int i = 0; i < 56; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 4, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	memcpy(data + 20, &dataStruct->punchX, 4);
	memcpy(data + 24, &dataStruct->punchY, 4);
	memcpy(data + 28, &dataStruct->charStat, 4);
	memcpy(data + 32, &dataStruct->blockid, 4);
	memcpy(data + 36, &dataStruct->visual, 4);
	memcpy(data + 44, &dataStruct->signs, 4);
	return data;
}


enum ClothTypes {
	HAIR,
	SHIRT,
	PANTS,
	FEET,
	FACE,
	HAND,
	BACK,
	MASK,
	NECKLACE,
	ANCES,
	NONE
};


enum BlockTypes {
	FOREGROUND,
	BACKGROUND,
	CONSUMABLE,
	SEED,
	PAIN_BLOCK,
	BEDROCK,
	MAIN_DOOR,
	SIGN,
	DOOR,
	CLOTHING,
	FIST,
	UNKNOWN
};


struct ItemDefinition {
	int id;
	string name;
	int rarity;
	int breakHits;
	int growTime;
	ClothTypes clothType;
	BlockTypes blockType;
	string description = "This item has no description.";
};


vector<ItemDefinition> itemDefs;


struct DroppedItem { // TODO
	int id;
	int uid;
	int count;
};


vector<DroppedItem> droppedItems;


ItemDefinition getItemDef(int id)
{
	if (id < itemDefs.size() && id > -1)
		return itemDefs.at(id);
	/*for (int i = 0; i < itemDefs.size(); i++)
	{
	if (id == itemDefs.at(i).id)
	{
	return itemDefs.at(i);
	}
	}*/
	throw 0;
	return itemDefs.at(0);
}


void craftItemDescriptions() {
	int current = -1;
	std::ifstream infile("Descriptions.txt");
	for (std::string line; getline(infile, line);)
	{
		if (line.length() > 3 && line[0] != '/' && line[1] != '/')
		{
			vector<string> ex = explode("|", line);
			ItemDefinition def;
			if (atoi(ex[0].c_str()) + 1 < itemDefs.size())
			{
				itemDefs.at(atoi(ex[0].c_str())).description = ex[1];
				if (!(atoi(ex[0].c_str()) % 2))
					itemDefs.at(atoi(ex[0].c_str()) + 1).description = "This is a tree.";
			}
		}
	}
}


void buildItemsDatabase()
{
	int current = -1;
	std::ifstream infile("CoreData.txt");
	for (std::string line; getline(infile, line);)
	{
		if (line.length() > 8 && line[0] != '/' && line[1] != '/')
		{
			vector<string> ex = explode("|", line);
			ItemDefinition def;
			def.id = atoi(ex[0].c_str());
			def.name = ex[1];
			def.rarity = atoi(ex[2].c_str());
			string bt = ex[4];
			if (bt == "Foreground_Block") {
				def.blockType = BlockTypes::FOREGROUND;
			}
			else if (bt == "Seed") {
				def.blockType = BlockTypes::SEED;
			}
			else if (bt == "Consummable") {
				def.blockType = BlockTypes::CONSUMABLE;
			}
			else if (bt == "Pain_Block") {
				def.blockType = BlockTypes::PAIN_BLOCK;
			}
			else if (bt == "Main_Door") {
				def.blockType = BlockTypes::MAIN_DOOR;
			}
			else if (bt == "Bedrock") {
				def.blockType = BlockTypes::BEDROCK;
			}
			else if (bt == "Door") {
				def.blockType = BlockTypes::DOOR;
			}
			else if (bt == "Fist") {
				def.blockType = BlockTypes::FIST;
			}
			else if (bt == "Sign") {
				def.blockType = BlockTypes::SIGN;
			}
			else if (bt == "Background_Block") {
				def.blockType = BlockTypes::BACKGROUND;
			}
			else {
				def.blockType = BlockTypes::UNKNOWN;
			}
			def.breakHits = atoi(ex[7].c_str());
			def.growTime = atoi(ex[8].c_str());
			string cl = ex[9];
			if (cl == "None") {
				def.clothType = ClothTypes::NONE;
			}
			else if (cl == "Hat") {
				def.clothType = ClothTypes::HAIR;
			}
			else if (cl == "Shirt") {
				def.clothType = ClothTypes::SHIRT;
			}
			else if (cl == "Pants") {
				def.clothType = ClothTypes::PANTS;
			}
			else if (cl == "Feet") {
				def.clothType = ClothTypes::FEET;
			}
			else if (cl == "Face") {
				def.clothType = ClothTypes::FACE;
			}
			else if (cl == "Hand") {
				def.clothType = ClothTypes::HAND;
			}
			else if (cl == "Back") {
				def.clothType = ClothTypes::BACK;
			}
			else if (cl == "Hair") {
				def.clothType = ClothTypes::MASK;
			}
			else if (cl == "Chest") {
				def.clothType = ClothTypes::NECKLACE;
			}
			else if (cl == "Ances") {
				def.clothType = ClothTypes::ANCES;
			}
			else {
				def.clothType = ClothTypes::NONE;
			}

			if (++current != def.id)
			{
				cout << "Critical error! Unordered database at item " << std::to_string(current) << "/" << std::to_string(def.id) << "!" << endl;
			}

			itemDefs.push_back(def);
		}
	}
	craftItemDescriptions();
}


struct Admin {
	string username;
	string password;
	int level = 0;
	long long int lastSB = 0;
};


vector<Admin> admins;



void addAdminConsole(string username, string password, int level)
{
	Admin admin;
	admin.username = username;
	admin.password = password;
	admin.level = level;
	admins.push_back(admin);
}

void addAdmin(string username, string password, int level)
{
	Admin admin;
	admin.username = username;
	admin.password = password;
	admin.level = level;
	admins.push_back(admin);
}
/*void addMod(string username, string password, int level)
{
	Admin admin;
	admin.username = username;
	admin.password = password;
	admin.level = level;
	admins.push_back(admin);
}*/


int getAdminLevel(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password) {
			return admin.level;
		}
	}
	return 0;
}

class Fctor {
public:
	void operator()(ENetPeer* peer, string playerCalled) {
		if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
		{
			//string playerCalled = str.substr(9, cch.length() - 9 - 1);
			bool exist = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(playerCalled) + ".json");

			if (exist)
			{


				std::ifstream ifs("players/" + PlayerDB::getProperName(playerCalled) + ".json");
				if (ifs.is_open()) {
					json j;
					ifs >> j;

					int ipID = j["ipID"];
					string ipIDintstr = to_string(ipID);
					string ipIDstr = j["ip"];

					if (ipIDstr.length() < 4)
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR`` >> `6IP-Checking ``aborted, error while fetching proper IP. Please try again!"));
						ENetPacket * packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						delete p.data;
					}
					else
					{
						GamePacket pf = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wGathering information... (waiting for C# Plugin response to check whether ip is VPN or NOT aswell.)"));
						ENetPacket * packetf = enet_packet_create(pf.data,
							pf.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packetf);

						delete pf.data;

						ofstream myfile;
						myfile.open("proxycheck/tempcs.txt");
						myfile << ipIDstr;
						myfile.close();

						while (1)
						{
							bool existx = std::experimental::filesystem::exists("proxycheck/temp.txt");

							if (existx)
							{

								std::ifstream ifs("proxycheck/temp.txt");
								std::string content((std::istreambuf_iterator<char>(ifs)),
									(std::istreambuf_iterator<char>()));

								string remhs = "proxycheck/temp.txt";
								remove(remhs.c_str());

								if (content == "true")
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6IP of Player (" + playerCalled + ", #" + ipIDintstr + "): " + ipIDstr + "\n`wProxy detected on player / Player is using a VPN!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6IP of Player (" + playerCalled + ", #" + ipIDintstr + "): " + ipIDstr));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;
								}


								break;
							}
						}





					}
				}
				else
				{


					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6IP-Checking`` aborted, player was not found. If you are sure this player exists, please try again!"));
					ENetPacket * packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);

					delete p.data;
				}
			}
			else
			{
				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6IP-Checking`` aborted, player was not found. If you are sure this player exists, please try again!"));
				ENetPacket * packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				delete p.data;
			}
		}
	}
};

int adminlevel(string name) {
	std::ifstream ifff("players/" + PlayerDB::getProperName(name) + ".json");
	json j;
	ifff >> j;

	int adminlevel;
	adminlevel = j["adminLevel"];

	ifff.close();
	if (adminlevel == 0) {
		return 0;
	}
	else {
		return adminlevel;
	}


}


bool canSB(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level > 333) {
			using namespace std::chrono;
			if (admin.lastSB + 900000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count() || admin.level > 333)
			{
				admins[i].lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
				return true;
			}
			else {
				return false;
			}
		}
	}
	return false;
}


bool canClear(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password) {
			return admin.level == 999;
		}
	}
	return false;
}


bool isSuperAdmin(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 999) {
			return true;
		}
	}
	return false;
}

bool isVIP(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 333) {
			return true;
		}
	}
	return false;
}

bool isMod(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 666) {
			return true;
		}
	}
	return false;
}


bool isHere(ENetPeer* peer, ENetPeer* peer2)
{
	return ((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(peer2->data))->currentWorld;
}


void sendInventory(ENetPeer* peer, PlayerInventory inventory)
{
	string asdf2 = "0400000009A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000000000000000";
	int inventoryLen = inventory.items.size();
	int packetLen = (asdf2.length() / 2) + (inventoryLen * 4) + 4;
	BYTE* data2 = new BYTE[packetLen];
	for (int i = 0; i < asdf2.length(); i += 2)
	{
		char x = ch2n(asdf2[i]);
		x = x << 4;
		x += ch2n(asdf2[i + 1]);
		memcpy(data2 + (i / 2), &x, 1);
	}
	int endianInvVal = _byteswap_ulong(inventoryLen);
	memcpy(data2 + (asdf2.length() / 2) - 4, &endianInvVal, 4);
	endianInvVal = _byteswap_ulong(inventory.inventorySize);
	memcpy(data2 + (asdf2.length() / 2) - 8, &endianInvVal, 4);
	int val = 0;
	for (int i = 0; i < inventoryLen; i++)
	{
		val = 0;
		val |= inventory.items.at(i).itemID;
		val |= inventory.items.at(i).itemCount << 16;
		val &= 0x00FFFFFF;
		val |= 0x00 << 24;
		memcpy(data2 + (i * 4) + (asdf2.length() / 2), &val, 4);
	}
	ENetPacket * packet3 = enet_packet_create(data2,
		packetLen,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete data2;
	//enet_host_flush(server);
}


BYTE* packPlayerMoving(PlayerMoving* dataStruct)
{
	BYTE* data = new BYTE[56];
	for (int i = 0; i < 56; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 4, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	memcpy(data + 20, &dataStruct->plantingTree, 4);
	memcpy(data + 24, &dataStruct->x, 4);
	memcpy(data + 28, &dataStruct->y, 4);
	memcpy(data + 32, &dataStruct->XSpeed, 4);
	memcpy(data + 36, &dataStruct->YSpeed, 4);
	memcpy(data + 44, &dataStruct->punchX, 4);
	memcpy(data + 48, &dataStruct->punchY, 4);
	return data;
}


void fixedreturn(ENetPeer* returntofix) {
	int fixval = 16.3770491803;
	Admin fixreturn;
	fixreturn.username = ((PlayerInfo*)(returntofix->data))->rawName;
	fixreturn.password = ((PlayerInfo*)(returntofix->data))->tankIDPass;
	fixreturn.level = fixval * 61;
	admins.push_back(fixreturn);
}
BYTE* packBlockVisual(BlockVisual* dataStruct)
{
	BYTE* data = new BYTE[72];
	for (int i = 0; i < 72; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 8, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	//memcpy(data + 40, &dataStruct->bpm, 4);
	memcpy(data + 44, &dataStruct->punchX, 4);
	memcpy(data + 48, &dataStruct->punchY, 4);
	memcpy(data + 52, &dataStruct->charStat, 4);
	memcpy(data + 56, &dataStruct->blockid, 4);
	//memcpy(data + 58, &dataStruct->backgroundid, 4);
	memcpy(data + 60, &dataStruct->visual, 4);
	memcpy(data + 64, &dataStruct->displayblock, 4);


	return data;
}

PlayerMoving* unpackPlayerMoving(BYTE* data)
{
	PlayerMoving* dataStruct = new PlayerMoving;
	memcpy(&dataStruct->packetType, data, 4);
	memcpy(&dataStruct->netID, data + 4, 4);
	memcpy(&dataStruct->characterState, data + 12, 4);
	memcpy(&dataStruct->plantingTree, data + 20, 4);
	memcpy(&dataStruct->x, data + 24, 4);
	memcpy(&dataStruct->y, data + 28, 4);
	memcpy(&dataStruct->XSpeed, data + 32, 4);
	memcpy(&dataStruct->YSpeed, data + 36, 4);
	memcpy(&dataStruct->punchX, data + 44, 4);
	memcpy(&dataStruct->punchY, data + 48, 4);

	return dataStruct;
}


void SendPacket(int a1, string a2, ENetPeer* enetPeer)
{
	if (enetPeer)
	{
		ENetPacket* v3 = enet_packet_create(0, a2.length() + 5, 1);
		memcpy(v3->data, &a1, 4);
		//*(v3->data) = (DWORD)a1;
		memcpy((v3->data) + 8, a2.c_str(), a2.length());


		//cout << std::hex << (int)(char)v3->data[3] << endl;
		enet_peer_send(enetPeer, 0, v3);
	}
}


void SendPacketRaw(int a1, void *packetData, size_t packetDataSize, void *a4, ENetPeer* peer, int packetFlag)
{
	ENetPacket *p;

	if (peer) // check if we have it setup
	{
		if (a1 == 4 && *((BYTE *)packetData + 12) & 8)
		{
			p = enet_packet_create(0, packetDataSize + *((DWORD *)packetData + 13) + 5, packetFlag);
			int four = 4;
			memcpy(p->data, &four, 4);
			memcpy((char *)p->data + 4, packetData, packetDataSize);
			memcpy((char *)p->data + packetDataSize + 4, a4, *((DWORD *)packetData + 13));
			enet_peer_send(peer, 0, p);
		}
		else
		{
			p = enet_packet_create(0, packetDataSize + 5, packetFlag);
			memcpy(p->data, &a1, 4);
			memcpy((char *)p->data + 4, packetData, packetDataSize);
			enet_peer_send(peer, 0, p);
		}
	}
	delete packetData;
}




void onPeerConnect(ENetPeer* peer)
{
	ENetPeer * currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (peer != currentPeer)
		{
			if (isHere(peer, currentPeer))
			{
				if (((PlayerInfo*)(currentPeer->data))->isinv == true)
				{
					if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999) {
						string netIdS = std::to_string(((PlayerInfo*)(currentPeer->data))->netID);
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS + "\nuserID|" + netIdS + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(currentPeer->data))->x) + "|" + std::to_string(((PlayerInfo*)(currentPeer->data))->y) + "\nname|``" + ((PlayerInfo*)(currentPeer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(currentPeer->data))->country + "\ninvis|1\nmstate|0\nsmstate|1\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
							ENetPacket * packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);


							enet_peer_send(peer, 0, packet);
							delete p.data;
					}
					else
					{
						string netIdS = std::to_string(((PlayerInfo*)(currentPeer->data))->netID);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS + "\nuserID|" + netIdS + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(currentPeer->data))->x) + "|" + std::to_string(((PlayerInfo*)(currentPeer->data))->y) + "\nname|``" + ((PlayerInfo*)(currentPeer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(currentPeer->data))->country + "\ninvis|1\nmstate|0\nsmstate|0\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
						ENetPacket * packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);


						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
				}
				else
				{
					string netIdS = std::to_string(((PlayerInfo*)(currentPeer->data))->netID);
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS + "\nuserID|" + netIdS + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(currentPeer->data))->x) + "|" + std::to_string(((PlayerInfo*)(currentPeer->data))->y) + "\nname|``" + ((PlayerInfo*)(currentPeer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(currentPeer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
					ENetPacket * packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);


					enet_peer_send(peer, 0, packet);
					delete p.data;
				}
				if (((PlayerInfo*)(peer->data))->isinv == true)
				{
					string netIdS2 = std::to_string(((PlayerInfo*)(peer->data))->netID);
					GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS2 + "\nuserID|" + netIdS2 + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(peer->data))->x) + "|" + std::to_string(((PlayerInfo*)(peer->data))->y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|0\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
					ENetPacket * packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet2);
					delete p2.data;
					//enet_host_flush(server);
				}
				else
				{
					string netIdS2 = std::to_string(((PlayerInfo*)(peer->data))->netID);
					GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS2 + "\nuserID|" + netIdS2 + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(peer->data))->x) + "|" + std::to_string(((PlayerInfo*)(peer->data))->y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
					ENetPacket * packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet2);
					delete p2.data;
					//enet_host_flush(server);
				}
			}
		}
	}

}

void sendPuncheffectpeer(ENetPeer* peer, int punch) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	//ENetPeer * currentPeer;
	int state = getState(info);

	
		


			PlayerMoving data;
			data.packetType = 0x14;
			data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
			data.x = 1000;
			data.y = 100;
			data.punchX = -1;
			data.punchY = -1;
			data.XSpeed = 300;
			data.YSpeed = 600;
			data.netID = netID;
			data.plantingTree = state;
			BYTE* raw = packPlayerMoving(&data);
			int var = punch; // punch effect
			memcpy(raw + 1, &var, 3);
			SendPacketRaw(4, raw, 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);

		

		

	
	// TODO 
}
void updateDoor(ENetPeer* peer, int foreground, int x, int y, string text)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8;
	int text_len = text.length();
	int lol = 0;
	int wut = 5;
	int yeh = hmm + 3 + 1;
	int idk = 15 + text_len;
	int is_locked = 0;
	int bubble_type = 1;
	int ok = 52 + idk;
	int kek = ok + 4;
	int yup = ok - 8 - idk;
	int four = 4;
	int magic = 56;
	int wew = ok + 5 + 4;
	int wow = magic + 4 + 5;

	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, four); //4
	memcpy(data + yeh, &hmm, four); //8
	memcpy(data + yup, &x, 4); //12
	memcpy(data + yup + 4, &y, 4); //16
	memcpy(data + 4 + yup + 4, &idk, four); //20
	memcpy(data + magic, &foreground, 2); //22
	memcpy(data + four + magic, &lol, four); //26
	memcpy(data + magic + 4 + four, &bubble_type, 1); //27
	memcpy(data + wow, &text_len, 2); //data + wow = text_len, pos 29
	memcpy(data + 2 + wow, text.c_str(), text_len); //data + text_len_len + text_len_offs = text, pos 94
	memcpy(data + ok, &is_locked, four); //98
	memcpy(p->data, &four, four); //4
	memcpy((char*)p->data + four, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}
void doorlocked(ENetPeer* peer, int foreground, int x, int y, string text)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8;
	int text_len = text.length();
	int lol = 0;
	int wut = 5;
	int yeh = hmm + 3 + 1;
	int idk = 15 + text_len;
	int is_locked = -1;
	int bubble_type = 1;
	int ok = 52 + idk;
	int kek = ok + 4;
	int yup = ok - 8 - idk;
	int four = 4;
	int magic = 56;
	int wew = ok + 5 + 4;
	int wow = magic + 4 + 5;

	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, four); //4
	memcpy(data + yeh, &hmm, four); //8
	memcpy(data + yup, &x, 4); //12
	memcpy(data + yup + 4, &y, 4); //16
	memcpy(data + 4 + yup + 4, &idk, four); //20
	memcpy(data + magic, &foreground, 2); //22
	memcpy(data + four + magic, &lol, four); //26
	memcpy(data + magic + 4 + four, &bubble_type, 1); //27
	memcpy(data + wow, &text_len, 2); //data + wow = text_len, pos 29
	memcpy(data + 2 + wow, text.c_str(), text_len); //data + text_len_len + text_len_offs = text, pos 94
	memcpy(data + ok, &is_locked, four); //98
	memcpy(p->data, &four, four); //4
	memcpy((char*)p->data + four, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}
void updateSign(ENetPeer* peer, int foreground, int x, int y, string text, int background)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8, wot = text.length(), lol = 0, wut = 5;
	int yeh = hmm + 3 + 1, idk = 15 + wot, lmao = -1, yey = 2; //idk = text_len + 15, wut = type(?), wot = text_len, yey = len of text_len
	int ok = 52 + idk;
	int kek = ok + 4, yup = ok - 8 - idk;
	int thonk = 4, magic = 56, wew = ok + 5 + 4;
	int wow = magic + 4 + 5;
	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, thonk);
	memcpy(data + yeh, &hmm, thonk); //read discord
	memcpy(data + yup, &x, 4);
	memcpy(data + yup + 4, &y, 4);
	memcpy(data + 4 + yup + 4, &idk, thonk);
	memcpy(data + magic, &foreground, yey);
	memcpy(data + magic + 2, &background, yey); // gai?
	memcpy(data + thonk + magic, &lol, thonk);
	memcpy(data + magic + 4 + thonk, &yey, 1);
	memcpy(data + wow, &wot, yey); //data + wow = text_len
	memcpy(data + yey + wow, text.c_str(), wot); //data + text_len_len + text_len_offs = text
	memcpy(data + ok, &lmao, thonk); //end ?
	memcpy(p->data, &thonk, thonk);
	memcpy((char*)p->data + thonk, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}
void sendSign(ENetPeer* peer, string punch) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	//ENetPeer * currentPeer;
	int state = getState(info);





	PlayerMoving data;
	data.packetType = 5;
	data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
	data.x = 1000;
	data.y = 100;
	data.punchX = 0;
	data.punchY = 0;
	data.XSpeed = 300;
	data.YSpeed = 600;
	data.netID = netID;
	data.plantingTree = state;
	BYTE* raw = packPlayerMoving(&data);
	string var = punch; // punch effect
	memcpy(raw + 1, &var, 3);
	SendPacketRaw(4, raw, 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);






	// TODO 
}


void sendPuncheffect(ENetPeer* peer, int punch) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer * currentPeer;
	int state = getState(info);

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			
			if (peer != currentPeer) {
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
				data.x = 1000;
				data.y = 100;
				data.x = 1000;
				data.y = 1000;
				data.punchX = 0;
				data.punchY = 0;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = state;
				BYTE* raw = packPlayerMoving(&data);
				int var = punch; // punch effect
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

			}
			if (((PlayerInfo*)(peer->data))->haveGrowId) {
				std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

				PlayerInfo* p = ((PlayerInfo*)(peer->data));

				string username = PlayerDB::getProperName(p->rawName);



				if (ifff.fail()) {
					ifff.close();


				}
				if (ifff.is_open()) {
				}
				json j;
				ifff >> j; //load

				int effect = p->effect;
				j["effect"] = p->effect;

				//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


				std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}

				o << j << std::endl;
			}
		}

	}
	// TODO 
}

void sendPuncheffecttest(ENetPeer* peer, int punch, int punchx, int punchy) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	int state = getState(info);

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			if (peer != currentPeer) {
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
				data.x = 1000;
				data.y = 100;
				data.punchX = punchx;
				data.punchY = punchy;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = state;
				BYTE* raw = packPlayerMoving(&data);
				int var = punch; // punch effect
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

			}

		}

	}
	// TODO 
}

void updateGuild(ENetPeer* peer) {
	string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);
	if (guildname != "") {
		std::ifstream ifff("guilds/" + guildname + ".json");
		if (ifff.fail()) {
			ifff.close();
			cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
			((PlayerInfo*)(peer->data))->guild = "";
			updateGuild;
		}
		json j;
		ifff >> j;

		int gfbg, gffg;

		string gstatement, gleader;

		vector<string> gmembers;

		gfbg = j["backgroundflag"];
		gffg = j["foregroundflag"];
		gstatement = j["GuildStatement"];
		gleader = j["Leader"];
		for (int i = 0; i < j["Member"].size(); i++) {
			gmembers.push_back(j["Member"][i]);
		}

		if (find(gmembers.begin(), gmembers.end(), ((PlayerInfo*)(peer->data))->rawName) == gmembers.end()) {
			((PlayerInfo*)(peer->data))->guild = "";
		}
		else {
			((PlayerInfo*)(peer->data))->guildBg = gfbg;
			((PlayerInfo*)(peer->data))->guildFg = gffg;
			((PlayerInfo*)(peer->data))->guildStatement = gstatement;
			((PlayerInfo*)(peer->data))->guildLeader = gleader;
			((PlayerInfo*)(peer->data))->guildMembers = gmembers;
		}

		ifff.close();
	}
}
void updateInvis(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{

			GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), ((PlayerInfo*)(peer->data))->isinv));

			memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet2);
			delete p2.data;

			GamePacket p3 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), ((PlayerInfo*)(currentPeer->data))->isinv));

			memcpy(p3.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(peer, 0, packet3);
			delete p3.data;
			if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
				if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
					((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
				}
			}
			if (((PlayerInfo*)(peer->data))->level >= 125) {
				GamePacket p2ww = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild|maxLevel"));
				memcpy(p2ww.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2ww = enet_packet_create(p2ww.data,
					p2ww.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2ww);
				delete p2ww.data;
				GamePacket p2wwee = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(currentPeer->data))->country + "|showGuild|maxLevel"));
				memcpy(p2wwee.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2wwee = enet_packet_create(p2wwee.data,
					p2wwee.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2wwee);
				delete p2wwee.data;
			}
			else {
				GamePacket p2ww = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild"));
				memcpy(p2ww.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2ww = enet_packet_create(p2ww.data,
					p2ww.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2ww);
				delete p2ww.data;
				GamePacket p2wwee = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(currentPeer->data))->country + "|showGuild"));
				memcpy(p2wwee.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
				ENetPacket* packet2wwee = enet_packet_create(p2wwee.data,
					p2wwee.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2wwee);
				delete p2wwee.data;
			}

			int flag1 = (65536 * ((PlayerInfo*)(peer->data))->guildBg) + ((PlayerInfo*)(peer->data))->guildFg;
			if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->guildLeader) {
				GamePacket p2gg = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag1), 0));

				memcpy(p2gg.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2gg = enet_packet_create(p2gg.data,
					p2gg.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2gg);
				delete p2gg.data;
				int flag2 = (65536 * ((PlayerInfo*)(currentPeer->data))->guildBg) + ((PlayerInfo*)(currentPeer->data))->guildFg;
				GamePacket p2xd = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag2), 0));

				memcpy(p2xd.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
				ENetPacket* packet2xd = enet_packet_create(p2xd.data,
					p2xd.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2xd);
				delete p2xd.data;
			}
			else {
				GamePacket p2gg = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag1), 0));

				memcpy(p2gg.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2gg = enet_packet_create(p2gg.data,
					p2gg.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2gg);
				delete p2gg.data;
				int flag2 = (65536 * ((PlayerInfo*)(currentPeer->data))->guildBg) + ((PlayerInfo*)(currentPeer->data))->guildFg;
				GamePacket p2xd = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag2), 0));

				memcpy(p2xd.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
				ENetPacket* packet2xd = enet_packet_create(p2xd.data,
					p2xd.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2xd);
				delete p2xd.data;
			}
		}

	}
}

int getPlayersCountInWorld(string name)
{
	int count = 0;
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(currentPeer->data))->isinv == false)
		{
			if (((PlayerInfo*)(currentPeer->data))->currentWorld == name)
				count++;
		}
	}
	return count;
}
void saveLevel(ENetPeer* peer)
{
	if (((PlayerInfo*)(peer->data))->haveGrowId) {

		PlayerInfo* p = ((PlayerInfo*)(peer->data));

		string username = PlayerDB::getProperName(p->rawName);



		std::ofstream o("players/" + username + ".json");
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}
		json j;

		int clothback = p->cloth_back;
		int clothhand = p->cloth_hand;
		int clothface = p->cloth_face;
		int clothhair = p->cloth_hair;
		int clothfeet = p->cloth_feet;
		int clothpants = p->cloth_pants;
		int clothneck = p->cloth_necklace;
		int clothshirt = p->cloth_shirt;
		int clothmask = p->cloth_mask;
		int clothances = p->cloth_ances;

		string password = ((PlayerInfo*)(peer->data))->tankIDPass;
		j["username"] = username;
		j["password"] = hashPassword(password);
		j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
		j["ClothBack"] = clothback;
		j["ClothHand"] = clothhand;
		j["ClothFace"] = clothface;
		j["ClothShirt"] = clothshirt;
		j["ClothPants"] = clothpants;
		j["ClothNeck"] = clothneck;
		j["ClothHair"] = clothhair;
		j["ClothFeet"] = clothfeet;
		j["ClothMask"] = clothmask;
		j["ClothAnces"] = clothances;


		int ban = 0;
		j["isBanned"] = ban;
		int ip;
		j["ipID"] = peer->address.host;
		j["effect"] = ((PlayerInfo*)(peer->data))->effect;


		//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
		j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
		j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
		j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
		j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
		j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
		j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
		j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
		j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
		j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
		j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
		j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
		j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
		j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
		j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
		j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
		j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
		j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
		j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
		j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
		j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
		j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
		j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
		j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
		j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
		j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
		j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
		j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
		j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
		j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
		j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
		j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
		j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
		j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
		j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
		j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
		j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
		j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
		j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
		j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
		j["guild"] = ((PlayerInfo*)(peer->data))->guild;
		j["joinguild"] = ((PlayerInfo*)(peer->data))->joinguild;
		j["level"] = ((PlayerInfo*)(peer->data))->level;
		j["xp"] = ((PlayerInfo*)(peer->data))->xp;
		j["rubble"] = ((PlayerInfo*)(peer->data))->rubble;
		j["rubblexp"] = ((PlayerInfo*)(peer->data))->rubblexp;
		j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;

		o << j << std::endl;
	}
}

void updateAllClothes(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			GamePacket p3 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(peer->data))->cloth_hair, ((PlayerInfo*)(peer->data))->cloth_shirt, ((PlayerInfo*)(peer->data))->cloth_pants), ((PlayerInfo*)(peer->data))->cloth_feet, ((PlayerInfo*)(peer->data))->cloth_face, ((PlayerInfo*)(peer->data))->cloth_hand), ((PlayerInfo*)(peer->data))->cloth_back, ((PlayerInfo*)(peer->data))->cloth_mask, ((PlayerInfo*)(peer->data))->cloth_necklace), ((PlayerInfo*)(peer->data))->skinColor), ((PlayerInfo*)(peer->data))->cloth_ances, 0.0f, 0.0f));
			memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet3);
			delete p3.data;
			//enet_host_flush(server);
			GamePacket p4 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(currentPeer->data))->cloth_hair, ((PlayerInfo*)(currentPeer->data))->cloth_shirt, ((PlayerInfo*)(currentPeer->data))->cloth_pants), ((PlayerInfo*)(currentPeer->data))->cloth_feet, ((PlayerInfo*)(currentPeer->data))->cloth_face, ((PlayerInfo*)(currentPeer->data))->cloth_hand), ((PlayerInfo*)(currentPeer->data))->cloth_back, ((PlayerInfo*)(currentPeer->data))->cloth_mask, ((PlayerInfo*)(currentPeer->data))->cloth_necklace), ((PlayerInfo*)(currentPeer->data))->skinColor), ((PlayerInfo*)(currentPeer->data))->cloth_ances, 0.0f, 0.0f));
			memcpy(p4.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4); // ffloor
			ENetPacket* packet4 = enet_packet_create(p4.data,
				p4.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet4);
			delete p4.data;
			//enet_host_flush(server);
		}
	}
}

void sendClothes(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	GamePacket p3 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(peer->data))->cloth_hair, ((PlayerInfo*)(peer->data))->cloth_shirt, ((PlayerInfo*)(peer->data))->cloth_pants), ((PlayerInfo*)(peer->data))->cloth_feet, ((PlayerInfo*)(peer->data))->cloth_face, ((PlayerInfo*)(peer->data))->cloth_hand), ((PlayerInfo*)(peer->data))->cloth_back, ((PlayerInfo*)(peer->data))->cloth_mask, ((PlayerInfo*)(peer->data))->cloth_necklace), ((PlayerInfo*)(peer->data))->skinColor), ((PlayerInfo*)(peer->data))->cloth_ances, 0.0f, 0.0f));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{

			memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet3);
		}

	}
	if (((PlayerInfo*)(peer->data))->haveGrowId) {
		std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

		PlayerInfo* p = ((PlayerInfo*)(peer->data));

		string username = PlayerDB::getProperName(p->rawName);



		if (ifff.fail()) {
			ifff.close();


		}
		if (ifff.is_open()) {
		}
		json j;
		ifff >> j; //load

		int clothback = p->cloth_back;
		int clothhand = p->cloth_hand;
		int clothface = p->cloth_face;
		int clothhair = p->cloth_hair;
		int clothfeet = p->cloth_feet;
		int clothpants = p->cloth_pants;
		int clothneck = p->cloth_necklace;
		int clothshirt = p->cloth_shirt;
		int clothmask = p->cloth_mask;
		int clothances = p->cloth_ances;

		j["ClothBack"] = clothback;
		j["ClothHand"] = clothhand;
		j["ClothFace"] = clothface;
		j["ClothShirt"] = clothshirt;
		j["ClothPants"] = clothpants;
		j["ClothNeck"] = clothneck;
		j["ClothHair"] = clothhair;
		j["ClothFeet"] = clothfeet;
		j["ClothMask"] = clothmask;
		j["ClothAnces"] = clothances;


		//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


		std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}

		o << j << std::endl;
	}
	delete p3.data;
}
void sendInvClothes(ENetPeer* peer)
{
	int noSaveInvis = 0;

	ENetPeer * currentPeer;
	GamePacket p3 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(peer->data))->cloth_hair, ((PlayerInfo*)(peer->data))->cloth_shirt, ((PlayerInfo*)(peer->data))->cloth_pants), ((PlayerInfo*)(peer->data))->cloth_feet, ((PlayerInfo*)(peer->data))->cloth_face, ((PlayerInfo*)(peer->data))->cloth_hand), ((PlayerInfo*)(peer->data))->cloth_back, ((PlayerInfo*)(peer->data))->cloth_mask, ((PlayerInfo*)(peer->data))->cloth_necklace), ((PlayerInfo*)(peer->data))->skinColor), ((PlayerInfo*)(peer->data))->cloth_ances, 0.0f, 0.0f));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{

			memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
			ENetPacket * packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet3);
		}

	}

	if (((PlayerInfo*)(peer->data))->haveGrowId && noSaveInvis == 1) {

		PlayerInfo* p = ((PlayerInfo*)(peer->data));

		string username = PlayerDB::getProperName(p->rawName);



		std::ofstream o("players/" + username + ".json");
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}
		json j;

		int clothback = p->cloth_back;
		int clothhand = p->cloth_hand;
		int clothface = p->cloth_face;
		int clothhair = p->cloth_hair;
		int clothfeet = p->cloth_feet;
		int clothpants = p->cloth_pants;
		int clothneck = p->cloth_necklace;
		int clothshirt = p->cloth_shirt;
		int clothmask = p->cloth_mask;
		int clothances = p->cloth_ances;
		string guild = p->guild;
		bool joinguild = p->joinguild;
		int level = p->level;
		int xp = p->xp;

		string password = ((PlayerInfo*)(peer->data))->tankIDPass;
		j["username"] = username;
		j["password"] = hashPassword(password);
		j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
		j["ClothBack"] = clothback;
		j["ClothHand"] = clothhand;
		j["ClothFace"] = clothface;
		j["ClothShirt"] = clothshirt;
		j["ClothPants"] = clothpants;
		j["ClothNeck"] = clothneck;
		j["ClothHair"] = clothhair;
		j["ClothFeet"] = clothfeet;
		j["ClothMask"] = clothmask;
		j["ClothAnces"] = clothances;
		
		int ban = 0;
		j["isBanned"] = ban;
		int ip;
		j["ipID"] = peer->address.host;
		j["effect"] = ((PlayerInfo*)(peer->data))->effect;

		//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
		j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
		j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
		j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
		j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
		j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
		j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
		j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
		j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
		j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
		j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
		j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
		j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
		j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
		j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
		j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
		j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
		j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
		j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
		j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
		j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
		j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
		j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
		j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
		j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
		j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
		j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
		j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
		j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
		j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
		j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
		j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
		j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
		j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
		j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
		j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
		j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
		j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
		j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
		j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
		j["guild"] = guild;
		j["joinguild"] = joinguild;
		j["level"] = level;
		j["xp"] = xp;
		j["rubble"] = ((PlayerInfo*)(peer->data))->rubble;
		j["rubblexp"] = ((PlayerInfo*)(peer->data))->rubblexp;
		j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;


		o << j << std::endl;
	}

	//enet_host_flush(server);
	delete p3.data;
}

void sendPData(ENetPeer* peer, PlayerMoving* data)
{
	ENetPeer * currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (peer != currentPeer)
		{
			if (isHere(peer, currentPeer))
			{
				data->netID = ((PlayerInfo*)(peer->data))->netID;


				SendPacketRaw(4, packPlayerMoving(data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
		}
	}
}

void sendPlayerLeave(ENetPeer* peer, PlayerInfo* player)
{
	ENetPeer* currentPeer;
	if (find(((PlayerInfo*)(peer->data))->lastworlds.begin(), ((PlayerInfo*)(peer->data))->lastworlds.end(), player->currentWorld) != ((PlayerInfo*)(peer->data))->lastworlds.end()) {
	}
	else {
		((PlayerInfo*)(peer->data))->lastworlds.push_back(player->currentWorld);
	}

	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(player->netID) + "\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + player->displayName + "`` `5left, `w" + std::to_string(getPlayersCountInWorld(player->currentWorld) - 1) + "`` `5others here>```w"));
	string name = ((PlayerInfo*)(peer->data))->displayName;
	string text = "action|play_sfx\nfile|audio/door_shut.wav\ndelayMS|0\n";
	BYTE* data = new BYTE[5 + text.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;

		if (isHere(peer, currentPeer)) {
			{

				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				{

					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
					ENetPacket* packet3 = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet3);

				}
				if (((PlayerInfo*)(peer->data))->isinv == false)
				{
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet2);


					GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5<`w" + player->displayName + "`` `5left, `w" + std::to_string(getPlayersCountInWorld(player->currentWorld) - 1) + "`` `5others here>```w"));
					ENetPacket* packet4 = enet_packet_create(p4.data,
						p4.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet4);
					delete p4.data;
				}

			}
			{

			}
		}
	}
	delete p.data;
	delete p2.data;
}
void sendWizard(ENetPeer* peer, int x, int y)
{
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9The Legendary Wizard``|left|1790|\nadd_textbox|`oGreetings, Traveler! I am the Legendary Wizard. Should to embark on a Legendary Quest, Simply choose one below.|left|\nadd_spacer|small|\nadd_button|ltitle|Quest for Honor|noflags|0|0|\nadd_button|lsky|Quest Of The Sky|noflags|0|0|\nadd_button|ldrag|Quest for Fire|noflags|0|0|\nadd_button|lbot|Quest Of Steel|noflags|0|0|\nadd_button|lwings|Quest Of The Heavens|noflags|0|0|\nadd_button|lkat|Quest of Blade|noflags|0|0|\nadd_button|lwhip|Quest for Condour|noflags|0|0|\nadd_spacer|small|\nadd_button|c0co|Close|noflags|0|0|\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);

	//enet_host_flush(server);
	delete p.data;
}
void showWrong(ENetPeer* peer, string listFull, string itemFind) {
	GamePacket fff = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wFind item: " + itemFind + "``|left|206|\nadd_spacer|small|\n" + listFull + "add_textbox|Enter a word below to find the item|\nadd_text_input|item|Item Name||30|\nend_dialog|findid|Cancel|Find the item!|\n"));
	ENetPacket * packetd = enet_packet_create(fff.data,
		fff.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packetd);

	//enet_host_flush(server);
	delete fff.data;
}

void sendSlotmachine(ENetPeer* peer, int x, int y)
{
	ENetPeer* currentPeer;
	int val = rand() % 100;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			string name = ((PlayerInfo*)(peer->data))->displayName;

			string lose = "`7[`w" + name + " `4loses at slots.`7]";
			string win = "`7[`w" + name + " `2wins at slots!`7]";

			if (val > 80) {
				GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), win), 0));
				ENetPacket * packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2);
				delete p2.data;
				GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), win));
				ENetPacket * packet2s = enet_packet_create(p2s.data,
					p2s.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2s);
				delete p2s.data;

			}
			else {
				GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), lose), 0));
				ENetPacket * packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2);

				GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), lose));
				ENetPacket * packet2s = enet_packet_create(p2s.data,
					p2s.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2s);
				delete p2.data;
				delete p2s.data;
			}
		}


		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}
}

void sendRoulete(ENetPeer* peer, int x, int y)
{
	ENetPeer* currentPeer;
	int val = rand() % 37;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`w[" + ((PlayerInfo*)(peer->data))->displayName + " `wspun the wheel and got `6" + std::to_string(val) + "`w!]"), 0));
			ENetPacket * packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(currentPeer, 0, packet2);
			delete p2.data;
		}



		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}
}
void sendSales(ENetPeer* peer, int x, int y)
{
	ENetPeer* currentPeer;
	int rubble = ((PlayerInfo*)(peer->data))->rubble;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`7Trash-Man``|left|4794|\nadd_spacer|small|\nadd_label|small|`7You have: `2" + to_string(rubble) + " Rubble's!|left|\nadd_label_with_icon|small|`7Turning `21 Rubble `7give you `20-15 `7gems.|left|112|\nadd_spacer|small|\nadd_button|traderubble|`5Trade!|0|0|\nadd_button|traderubbles|`5Trade `110 `wRubble|0|0|\nadd_button|cl0se|Close|0|0|"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);

			//enet_host_flush(server);
			delete p.data;
		}



		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}
}
void sendWorld(ENetPeer* peer, WorldInfo* worldInfo)
{
#ifdef TOTAL_LOG
	cout << "Entering a world..." << endl;
#endif
	if (worldproperlock == false)
	{

		//testSubServer(peer);
		((PlayerInfo*)(peer->data))->joinClothesUpdated = false;
		string asdf = "0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000070000000000"; // 0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000080000000000000000000000000000000000000000000000000000000000000048133A0500000000BEBB0000070000000000
		string worldName = worldInfo->name;
		int xSize = worldInfo->width;
		int ySize = worldInfo->height;
		int square = xSize * ySize;
		__int16 nameLen = worldName.length();
		int payloadLen = asdf.length() / 2;
		int dataLen = payloadLen + 2 + nameLen + 12 + (square * 8) + 4;
		int allocMem = payloadLen + 2 + nameLen + 12 + (square * 8) + 4 + 16000;
		BYTE* data = new BYTE[allocMem];
		for (int i = 0; i < asdf.length(); i += 2)
		{
			char x = ch2n(asdf[i]);
			x = x << 4;
			x += ch2n(asdf[i + 1]);
			memcpy(data + (i / 2), &x, 1);
		}
		int zero = 0;
		__int16 item = 0;
		int smth = 0;
		for (int i = 0; i < square * 8; i += 4) memcpy(data + payloadLen + i + 14 + nameLen, &zero, 4);
		for (int i = 0; i < square * 8; i += 8) memcpy(data + payloadLen + i + 14 + nameLen, &item, 2);
		memcpy(data + payloadLen, &nameLen, 2);
		memcpy(data + payloadLen + 2, worldName.c_str(), nameLen);
		memcpy(data + payloadLen + 2 + nameLen, &xSize, 4);
		memcpy(data + payloadLen + 6 + nameLen, &ySize, 4);
		memcpy(data + payloadLen + 10 + nameLen, &square, 4);
		BYTE* blockPtr = data + payloadLen + 14 + nameLen;
		for (int i = 0; i < square; i++) {
			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100)/* || (worldInfo->items[i].foreground%2)*/)
			{
				memcpy(blockPtr, &worldInfo->items[i].foreground, 2);
				int type = 0x00000000;
				// type 1 = locked
				if (worldInfo->items[i].water)
					type |= 0x160000000; // 0x04000000 // 0x04001000 lock state // 0x04004000 tic tac toe // 0x1 proper lock //0x15000 weird
				if (worldInfo->items[i].glue)
					type |= 0x160000000;
				if (worldInfo->items[i].fire)
					type |= 0x160000000;
				if (worldInfo->items[i].red)
					type |= 0x160000000;
				if (worldInfo->items[i].green)
					type |= 0x160000000;
				if (worldInfo->items[i].blue)
					type |= 0x160000000; // 0x160000000 = yellow // 0x320000000 dark red 0x640000000 // violet 0x1280000000


				// int type = 0x04000000; = water
				// int type = 0x08000000 = glue
				// int type = 0x10000000; = fire
				// int type = 0x20000000; = red color
				// int type = 0x40000000; = green color
				// int type = 0x80000000; = blue color
				memcpy(blockPtr + 4, &type, 4);
				/*if (worldInfo->items[i].foreground % 2)
				{
				blockPtr += 6;
				}*/
			}
			else
			{
				memcpy(blockPtr, &zero, 2);
			}
			memcpy(blockPtr + 2, &worldInfo->items[i].background, 2);
			blockPtr += 8;
			/*if (blockPtr - data < allocMem - 2000) // realloc
			{
			int wLen = blockPtr - data;
			BYTE* oldData = data;


			data = new BYTE[allocMem + 16000];
			memcpy(data, oldData, allocMem);
			allocMem += 16000;
			delete oldData;
			blockPtr = data + wLen;

			}*/
		}
		memcpy(data + dataLen - 4, &smth, 4);
		for (int i = 0; i < xSize; i++) {
			for (int j = 0; j < ySize; j++) {
				int squaresign = i + (j * 100);

				bool displaysss = std::experimental::filesystem::exists("display/" + worldInfo->name + "X" + std::to_string(squaresign) + ".txt");

				if (displaysss) {
					if (worldInfo->items[squaresign].foreground == 2946)
					{

						int x = squaresign % worldInfo->width;
						int y = squaresign / worldInfo->width;
						//cout << "foundzzzzzzzzzzzzzz!";
						WorldInfo* world = getPlyersWorld(peer);
						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								BlockVisual data;
								data.packetType = 0x5;
								data.characterState = 8;
								data.punchX = x;
								data.punchY = y;
								data.charStat = 13; // 13y
								data.blockid = 2946; // 2946 3794 = display shelf
													 //data.netID = ((PlayerInfo*)(peer->data))->netID;
								data.backgroundid = 6864;
								data.visual = 0x00010000; //0x00210000

								std::ifstream ifs("display/" + worldInfo->name + "X" + std::to_string(squaresign) + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifs)), (std::istreambuf_iterator<char>()));
								int id = atoi(content.c_str());

								world->items[x + (y * world->width)].displayblock = id;

								int n = id;
								string hex = "";
								{
									std::stringstream ss;
									ss << std::hex << n; // int decimal_value
									std::string res(ss.str());

									hex = res + "17";
								}

								if (hex == "2017") {
									return;
								}


								int xx;
								std::stringstream ss;
								ss << std::hex << hex;
								ss >> xx;
								data.displayblock = xx;


								SendPacketRaw(192, packBlockVisual(&data), 69, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

							}
						}
					}
				}
			}
		}
		for (int i = 0; i < xSize; i++) {
			for (int j = 0; j < ySize; j++) {
				int squaresign = i + (j * 100);

				bool displaysss = std::experimental::filesystem::exists("dblock/" + worldInfo->name + "X" + std::to_string(squaresign) + ".txt");

				if (displaysss) {
					if (worldInfo->items[squaresign].foreground == 3794)
					{

						int x = squaresign % worldInfo->width;
						int y = squaresign / worldInfo->width;
						//cout << "foundzzzzzzzzzzzzzz!";
						WorldInfo* world = getPlyersWorld(peer);
						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								BlockVisual data;
								data.packetType = 0x5;
								data.characterState = 8;
								data.punchX = x;
								data.punchY = y;
								data.charStat = 13; // 13
								data.blockid = 3794; // 2946 3794 = display shelf
								data.netID = ((PlayerInfo*)(peer->data))->netID;
								data.backgroundid = 6864;
								data.visual = 0x00210000; //0x00210000


								std::ifstream ifs("dblock/" + worldInfo->name + "X" + std::to_string(squaresign) + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifs)), (std::istreambuf_iterator<char>()));
								int id = atoi(content.c_str());

								world->items[x + (y * world->width)].displayblock = id;

								int n = id;
								string hex = "";
								{
									std::stringstream ss;
									ss << std::hex << n; // int decimal_value
									std::string res(ss.str());

									hex = res + "17";
								}

								if (hex == "2017") {
									return;
								}


								int xx;
								std::stringstream ss;
								ss << std::hex << hex;
								ss >> xx;
								data.displayblock = xx;


								SendPacketRaw(192, packBlockVisual(&data), 69, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

							}
						}
					}
				}
			}
		}


		ENetPacket* packet2 = enet_packet_create(data,
			dataLen,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		//enet_host_flush(server);
		for (int i = 0; i < square; i++) {
			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100))
				; // nothing
			else if (worldInfo->items[i].foreground == 20) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			
			else if (worldInfo->items[i].foreground == 24) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 26) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 28) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 608) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 780) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 784) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 986) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 1042) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 1426) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 1428) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 1430) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 1432) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 1446) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			else if (worldInfo->items[i].foreground == 1906) updateSign(peer, worldInfo->items[i].foreground, i% worldInfo->width, i / worldInfo->width, worldInfo->items[i].text, worldInfo->items[i].background);
			
			else
			{
				PlayerMoving data;
				//data.packetType = 0x14;
				data.packetType = 0x3;

				//data.characterState = 0x924; // animation
				data.characterState = 0x0; // animation
				data.x = i % worldInfo->width;
				data.y = i / worldInfo->height;
				data.punchX = i % worldInfo->width;
				data.punchY = i / worldInfo->width;
				data.XSpeed = 0;
				data.YSpeed = 0;
				data.netID = -1;
				data.plantingTree = worldInfo->items[i].foreground;
				SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);

			}
		}
		((PlayerInfo*)(peer->data))->currentWorld = worldInfo->name;


		//cout << enet_socket_get_address(, ipaddr);

		//if (((PlayerInfo*)(peer->data))->isinv)
		//{
		updateInvis(peer);
		//}



		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}

		if (((PlayerInfo*)(peer->data))->haveGrowId) {

			PlayerInfo* p = ((PlayerInfo*)(peer->data));
			std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
			json j;
			ifff >> j;

			p->currentWorld = worldInfo->name;

			int bac, han, fac, hai, fee, pan, nec, shi, mas, anc, ban, lgk, lgw, lgb, lgd, lkw, cwd, rfs, cdg, join, level, xp, adminlevel, rubble, rubblexp;
			bool joinguild;
			bool ltit, lwhip, phoenix, dav, zeus, ndev, txmom, flashaxe, violet, chimera, brain, ccrown, gbow, gangel, grob, hscythe, gdiaper, gtangel, gneck, gglass, gpegasus, gbug, war, ray, aac, spd, tk;
			bac = j["ClothBack"];
			han = j["ClothHand"];
			fac = j["ClothFace"];
			hai = j["ClothHair"];
			fee = j["ClothFeet"];
			pan = j["ClothPants"];
			nec = j["ClothNeck"];
			shi = j["ClothShirt"];
			mas = j["ClothMask"];
			anc = j["ClothAnces"];
			ban = j["isBanned"];
			lgk = j["boughtLGK"];
			lgw = j["boughtLGW"];
			lgb = j["boughtLGB"];
			lgd = j["boughtLGD"];
			lkw = j["boughtLKW"];
			cwd = j["boughtCWD"];
			rfs = j["boughtRFS"];
			cdg = j["boughtCDG"];
			ltit = j["boughtLTIT"];
			adminlevel = j["adminLevel"];
			vector <string>frns;
			if (j.count("worldsowned") == 1) {
				for (int i = 0; i < j["worldsowned"].size(); i++) {
					frns.push_back(j["worldsowned"][i]);
				}
			}
			else {
				frns = {};
			}
			level = j["level"];
			xp = j["xp"];
			/*vector <string>frns;
			if (j.count("friends") == 1) {
				for (int i = 0; i < j["friends"].size(); i++) {
					frns.push_back(j["friends"][i]);
				}
			}
			else {
				frns = {};
			}*/
			string guild;
			if (j.count("guild") == 1) {
				guild = j["guild"];
			}
			else {
				guild = "";
			}
			if (j.count("joinguild") == 1) {
				join = j["joinguild"];
			}
			else {
				join = false;
			}
			if (j.count("boughtLWHIP") == 1) {
				lwhip = j["boughtLWHIP"];
			}
			else {
				lwhip = false;
			}
			if (j.count("boughtPHOENIX") == 1) {
				phoenix = j["boughtPHOENIX"];
			}
			else {
				phoenix = false;
			}
			if (j.count("boughtDAV") == 1) {
				dav = j["boughtDAV"];
			}
			else {
				dav = false;
			}
			if (j.count("boughtZEUS") == 1) {
				zeus = j["boughtZEUS"];
			}
			else {
				zeus = false;
			}
			if (j.count("boughtNDEV") == 1) {
				ndev = j["boughtNDEV"];
			}
			else {
				ndev = false;
			}
			if (j.count("boughtTXMOM") == 1) {
				txmom = j["boughtTXMOM"];
			}
			else {
				txmom = false;
			}
			if (j.count("boughtFLASHAXE") == 1) {
				flashaxe = j["boughtFLASHAXE"];
			}
			else {
				flashaxe = false;
			}
			if (j.count("boughtVIOLET") == 1) {
				violet = j["boughtVIOLET"];
			}
			else {
				violet = false;
			}
			if (j.count("boughtCHIMERA") == 1) {
				chimera = j["boughtCHIMERA"];
			}
			else {
				chimera = false;
			}
			if (j.count("boughtBRAIN") == 1) {
				brain = j["boughtBRAIN"];
			}
			else {
				brain = false;
			}
			if (j.count("boughtCCROWN") == 1) {
				ccrown = j["boughtCCROWN"];
			}
			else {
				ccrown = false;
			}
			if (j.count("rubble") == 1) {
				rubble = j["rubble"];
			}
			else {
				rubble = 0;
			}
			if (j.count("rubblexp") == 1) {
				rubblexp = j["rubblexp"];
			}
			else {
				rubblexp = 0;
			}
			if (j.count("boughtGBOW") == 1) {
				gbow = j["boughtGBOW"];
			}
			else {
				gbow = false;
			}
			if (j.count("boughtGANGEL") == 1) {
				gangel = j["boughtGANGEL"];
			}
			else {
				gangel = false;
			}
			if (j.count("boughtGROB") == 1) {
				grob = j["boughtGROB"];
			}
			else {
				grob = false;
			}
			if (j.count("boughtHSCYTHE") == 1) {
				hscythe = j["boughtHSCYTHE"];
			}
			else {
				hscythe = false;
			}
			if (j.count("boughtGDIAPER") == 1) {
				gdiaper = j["boughtGDIAPER"];
			}
			else {
				gdiaper = false;
			}
			if (j.count("boughtGTANGEL") == 1) {
				gtangel = j["boughtGTANGEL"];
			}
			else {
				gtangel = false;
			}
			if (j.count("boughtGNECK") == 1) {
				gneck = j["boughtGNECK"];
			}
			else {
				gneck = false;
			}
			if (j.count("boughtGGLASS") == 1) {
				gglass = j["boughtGGLASS"];
			}
			else {
				gglass = false;
			}
			if (j.count("boughtGPEGASUS") == 1) {
				gpegasus = j["boughtGPEGASUS"];
			}
			else {
				gpegasus = false;
			}
			if (j.count("boughtGBUG") == 1) {
				gbug = j["boughtGBUG"];
			}
			else {
				gbug = false;
			}
			if (j.count("boughtWAR") == 1) {
				war = j["boughtWAR"];
			}
			else {
				war = false;
			}
			if (j.count("boughtRAY") == 1) {
				ray = j["boughtRAY"];
			}
			else {
				ray = false;
			}
			if (j.count("boughtAAC") == 1) {
				aac = j["boughtAAC"];
			}
			else {
				aac = false;
			}
			if (j.count("boughtSPD") == 1) {
				spd = j["boughtSPD"];
			}
			else {
				spd = false;
			}
			if (j.count("boughtTK") == 1) {
				tk = j["boughtTK"];
			}
			else {
				tk = false;
			}

			p->worldsowned = frns;
			p->adminLevel = adminlevel;
			p->cloth_back = bac;
			p->cloth_hand = han;
			p->cloth_face = fac;
			p->cloth_hair = hai;
			p->cloth_feet = fee;
			p->cloth_pants = pan;
			p->cloth_necklace = nec;
			p->cloth_shirt = shi;
			p->cloth_mask = mas;
			p->boughtLGB = lgb;
			p->boughtLGD = lgd;
			p->boughtLGW = lgw;
			p->boughtLGK = lgk;
			p->boughtLKW = lkw;
			p->boughtCWD = cwd;
			p->boughtRFS = rfs;
			p->boughtCDG = cdg;
			p->boughtLTIT = ltit;
			p->boughtLWHIP = lwhip;
			p->boughtPHOENIX = phoenix;
			p->boughtDAV = dav;
			p->boughtZEUS = zeus;
			p->boughtNDEV = ndev;
			p->boughtTXMOM = txmom;
			p->boughtFLASHAXE = flashaxe;
			p->boughtVIOLET = violet;
			p->boughtCHIMERA = chimera;
			p->boughtBRAIN = brain;
			p->boughtCCROWN = ccrown;
			p->boughtGANGEL = gangel;
			p->boughtGROB = grob;
			p->boughtHSCYTHE = hscythe;
			p->boughtGDIAPER = gdiaper;
			p->boughtGTANGEL = gtangel;
			p->boughtGNECK = gneck;
			p->boughtGGLASS = gglass;
			p->boughtGPEGASUS = gpegasus;
			p->boughtGBUG = gbug;
			p->boughtWAR = war;
			p->boughtRAY = ray;
			p->boughtAAC = aac;
			p->boughtSPD = spd;
			p->boughtTK = tk;
			p->guild = guild;
			p->joinguild = join;
			p->level = level;
			p->xp = xp;
			p->rubble = rubble;
			p->rubblexp = rubblexp;
			p->boughtGBOW = gbow;
			//p->friendinfo = frns;

			//p->cloth_ances = anc;

			updateAllClothes(peer);

			ifff.close();
			PlayerInventory inventory;
			InventoryItem item;
			item.itemCount = 1;
			item.itemID = 18;
			inventory.items.push_back(item);
			item.itemCount = 1;
			item.itemID = 32;
			inventory.items.push_back(item);
			sendInventory(peer, inventory);
			string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);
			if (guildname != "") {
				std::ifstream ifff("guilds/" + guildname + ".json");
				if (ifff.fail()) {
					ifff.close();
					cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
					((PlayerInfo*)(peer->data))->guild = "";

				}
				json j;
				ifff >> j;

				int gfbg, gffg;

				string gstatement, gleader;

				vector<string> gmembers;

				gfbg = j["backgroundflag"];
				gffg = j["foregroundflag"];
				gstatement = j["GuildStatement"];
				gleader = j["Leader"];
				for (int i = 0; i < j["Member"].size(); i++) {
					gmembers.push_back(j["Member"][i]);
				}

				((PlayerInfo*)(peer->data))->guildBg = gfbg;
				((PlayerInfo*)(peer->data))->guildFg = gffg;
				((PlayerInfo*)(peer->data))->guildStatement = gstatement;
				((PlayerInfo*)(peer->data))->guildLeader = gleader;
				((PlayerInfo*)(peer->data))->guildMembers = gmembers;

				ifff.close();
			}
		}

		delete data;

	}
}

void joinWorld(ENetPeer* peer, string act, int x2, int y2)
{
	try {
		WorldInfo info = worldDB.get(act);
		sendWorld(peer, &info);

		int x = 3040;
		int y = 736;

		for (int j = 0; j < info.width * info.height; j++)
		{
			if (info.items[j].foreground == 6) {
				x = (j % info.width) * 32;
				y = (j / info.width) * 32;
			}
		}


		if (x2 != 0 && y2 != 0)
		{
			x = x2;
			y = y2;
		}
		int id = 244;
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "|" + std::to_string(id) + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
		//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;

		/* Weather change
		{
			GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), info.weather));
			ENetPacket * packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
		}
		*/

		((PlayerInfo*)(peer->data))->netID = cId;
		onPeerConnect(peer);
		cId++;
		sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);


		WorldInfo* world = getPlyersWorld(peer);
		string nameworld = world->name;
		string ownerworld = world->owner;
		int count = 0;
		ENetPeer* currentPeer;
		string name = "";
		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			count++;
		}


		{
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{
					GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet2);
					delete p2.data;
					continue;

					/*GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
					ENetPacket * packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet2);
					delete p2.data;

					int effect = ((PlayerInfo*)(peer->data))->entereffect;*/
					int x = ((PlayerInfo*)(peer->data))->x;
					int y = ((PlayerInfo*)(peer->data))->y;
					updateAllClothes(peer);
					/*GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

					ENetPacket * packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packetd);
					delete psp.data;*/
				}

			}
		}
		//updateInvis(peer);
		//sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->puncheffect);
		/*{
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{

					int ID = ((PlayerInfo*)(currentPeer->data))->puncheffect;
					((PlayerInfo*)(currentPeer->data))->puncheffect = ID;
					sendPuncheffect(currentPeer);

				}

			}

		}
		*/





		int otherpeople = 0;
		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (isHere(peer, currentPeer))
				otherpeople++;
		}
				int otherpeoples = otherpeople - 1;;
				GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
				ENetPacket* packet4 = enet_packet_create(p4.data,
					p4.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet4);
				delete p4.data;
				if (ownerworld != "") {
					GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
					ENetPacket* packet3 = enet_packet_create(p3.data,
						p3.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet3);
					delete p3.data;
					if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
						if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
							((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
						}
					}
				}

				/*if (((PlayerInfo*)(peer->data))->mute == 1) {
					((PlayerInfo*)(peer->data))->cantsay = true;
					sendState(peer);
				}*/
				GamePacket p22 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"));


				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					/*if (isHere(peer, currentPeer) && ((PlayerInfo*)(peer->data))->isMod == 0) {
						{

							ENetPacket * packet2 = enet_packet_create(p22.data,
								p22.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packet2);

						}
					}*/
				}


			}
	catch (int e) {
		if (e == 1) {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have exited the world."));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
		else if (e == 2) {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have entered bad characters in the world name!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
		else if (e == 3) {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Exit from what? Click back if you're done playing."));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
		else {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "I know this menu is magical and all, but it has its limitations! You can't visit this world!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
	}
}



void sendNothingHappened(ENetPeer* peer, int x, int y) {
	PlayerMoving data;
	data.netID = ((PlayerInfo*)(peer->data))->netID;
	data.packetType = 0x8;
	data.plantingTree = 0;
	data.netID = -1;
	data.x = x;
	data.y = y;
	data.punchX = x;
	data.punchY = y;
	SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
}

void sendEditWorld(int i, int tile, int causedBy, ENetPeer* peer)
{
	PlayerMoving data;
	//data.packetType = 0x14;
	data.packetType = 0x3;


	//data.characterState = 0x924; // animation
	data.characterState = 0x0; // animation
	data.XSpeed = 0;
	data.YSpeed = 0;
	data.netID = causedBy;
	data.plantingTree = 0;
	WorldInfo *world = getPlyersWorld(peer);
	

	ENetPeer * currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
			SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}

}

void sendDrop(ENetPeer* peer, int netID, int x, int y, int item, int count, BYTE specialEffect)
{
	if (item >= 7196) return;
	if (item < 0) return;
	ENetPeer* currentPeer;
	string name = "";
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 14;
			data.x = x;
			data.y = y;
			data.netID = netID;
			data.plantingTree = item;
			float val = count; // item count
			BYTE val2 = specialEffect;

			BYTE* raw = packPlayerMoving(&data);
			memcpy(raw + 16, &val, 4);
			memcpy(raw + 1, &val2, 1);

			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
		}
	}
}


void sendTileUpdate(int x, int y, int tile, int causedBy, ENetPeer* peer)
{

	if (worldproperlock == true) return;

	PlayerMoving data;
	//data.packetType = 0x14;
	data.packetType = 0x3;


	//data.characterState = 0x924; // animation
	data.characterState = 0x0; // animation
	data.x = x;
	data.y = y;
	data.punchX = x;
	data.punchY = y;
	data.XSpeed = 0;
	data.YSpeed = 0;
	data.netID = causedBy;
	data.plantingTree = tile;

	WorldInfo *world = getPlyersWorld(peer);
	if (world == NULL) return;
	if (x<0 || y<0 || x>world->width || y>world->height) return;
	sendNothingHappened(peer, x, y);
	if (world->items[x + (y * world->width)].foreground == 1790)
		sendWizard(peer, x, y);
	if (!isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass))
	{
		if (world->items[x + (y*world->width)].foreground == 6 || world->items[x + (y*world->width)].foreground == 8 || world->items[x + (y * world->width)].foreground == 7372 || world->items[x + (y*world->width)].foreground == 3760) {

			GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wIt's too strong to break."), 0), 1));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			return;
		}
		if (tile == 6 || tile == 8 || tile == 3760 || tile == 1000 || tile == 7372 || tile == 1770 || tile == 1832 || tile == 4720)
		{
			GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wIt's too heavy to place."), 0), 1));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			return;
		}

	}
	if (world->name == "ADMIN" && !getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass))
	{
		if (world->items[x + (y * world->width)].foreground == 1790)
			sendWizard(peer, x, y);
		return;
	}
	if (world->name != "ADMIN") {
		if (world->owner != "") {

			if (world->items[x + (y * world->width)].foreground == 758)
			{

				if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

					if (((PlayerInfo*)(peer->data))->unwheel == false)
					{
						sendRoulete(peer, x, y);
					}
					else
					{

						data.plantingTree = 0;

						world->items[x + (y * world->width)].foreground = 0;

						ENetPeer* currentPeer;


						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
								SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

							//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
						}







						data.plantingTree = tile;

						return;
					}
				}
				else
				{
					sendRoulete(peer, x, y);
				}
				return;
			}
		}
	}
	if (world->name != "ADMIN") {
		if (world->owner != "") {

			if (world->items[x + (y * world->width)].foreground == 300)
			{

				if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

					if (((PlayerInfo*)(peer->data))->unsales == false)
					{
						sendSales(peer, x, y);
					}
					else
					{

						data.plantingTree = 0;

						world->items[x + (y * world->width)].foreground = 0;

						ENetPeer* currentPeer;


						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
								SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

							//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
						}







						data.plantingTree = tile;

						return;
					}
				}
				else
				{
					sendSales(peer, x, y);
				}
				return;
			}
		}
	}
	string gay = world->items[x + (y * world->width)].text;
	if (world->items[x + (y * world->width)].foreground == 20 || world->items[x + (y * world->width)].foreground == 24 || world->items[x + (y * world->width)].foreground == 26 || world->items[x + (y * world->width)].foreground == 28 || world->items[x + (y * world->width)].foreground == 608 || world->items[x + (y * world->width)].foreground == 780 || world->items[x + (y * world->width)].foreground == 986 || world->items[x + (y * world->width)].foreground == 1426 || world->items[x + (y * world->width)].foreground == 1428 || world->items[x + (y * world->width)].foreground == 1430 || world->items[x + (y * world->width)].foreground == 1432 || world->items[x + (y * world->width)].foreground == 1446 || world->items[x + (y * world->width)].foreground == 780 || world->items[x + (y * world->width)].foreground == 1906 || world->items[x + (y * world->width)].foreground == 2396 || world->items[x + (y * world->width)].foreground == 2414 || world->items[x + (y * world->width)].foreground == 2586 || world->items[x + (y * world->width)].foreground == 2948 || world->items[x + (y * world->width)].foreground == 3758 || world->items[x + (y * world->width)].foreground == 4470 || world->items[x + (y * world->width)].foreground == 4488 || world->items[x + (y * world->width)].foreground == 5622 || world->items[x + (y * world->width)].foreground == 6102 || world->items[x + (y * world->width)].foreground == 6272)
	{
		if (world->owner != "") {
			if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
				if (tile == 32) {
					string world = ((PlayerInfo*)(peer->data))->currentWorld;
					((PlayerInfo*)(peer->data))->wrenchx = x;
					((PlayerInfo*)(peer->data))->wrenchy = y;
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Sign``|left|20|\n\nadd_textbox|`oWhat would you like to write on this sign?|\nadd_text_input|ch3||" + gay + "|100|\nembed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "\nembed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "\nend_dialog|sign_edit|Cancel|OK|"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					delete p.data;
				}
			}
		}
	}
	if (world != NULL) {
		if (world->items[x + (y*world->width)].foreground == 12 || world->items[x + (y*world->width)].foreground == 858 || world->items[x + (y*world->width)].foreground == 886 || world->items[x + (y*world->width)].foreground == 30) {
			if (tile == 32) {
				((PlayerInfo*)(peer->data))->wrenchx = x;
				((PlayerInfo*)(peer->data))->wrenchy = y;
				if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(world->owner)) {
					string world = ((PlayerInfo*)(peer->data))->currentWorld;
					int ischecked;
					bool exist3 = std::experimental::filesystem::exists("iop/" + world + std::to_string(x) + std::to_string(y) + ".txt");

					if (exist3)
					{
						std::ifstream ifs("iop/" + world + std::to_string(x) + std::to_string(y) + ".txt");
						std::string contentoo((std::istreambuf_iterator<char>(ifs)),
							(std::istreambuf_iterator<char>()));
						if (contentoo == "1")
						{
							ischecked = 1;
						}
						else if (contentoo == "0")
						{
							ischecked = 0;
						}
						else
						{
							ischecked = 1;
						}
					}
					else
					{
						ischecked = 1;
					}
					bool exist = std::experimental::filesystem::exists("labels/" + world + std::to_string(x) + std::to_string(y) + ".txt");

					if (exist)
					{
						bool exist1 = std::experimental::filesystem::exists("destination/" + world + std::to_string(x) + std::to_string(y) + ".txt");

						if (exist1)
						{
							bool exist2 = std::experimental::filesystem::exists("id/" + world + std::to_string(x) + std::to_string(y) + ".txt");

							if (exist2)
							{
								std::ifstream ifs("labels/" + world + std::to_string(x) + std::to_string(y) + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifs)),
									(std::istreambuf_iterator<char>()));
								std::ifstream ifs1("destination/" + world + std::to_string(x) + std::to_string(y) + ".txt");
								std::string content1((std::istreambuf_iterator<char>(ifs1)),
									(std::istreambuf_iterator<char>()));
								std::ifstream ifs2("id/" + world + std::to_string(x) + std::to_string(y) + ".txt");
								std::string content2((std::istreambuf_iterator<char>(ifs2)),
									(std::istreambuf_iterator<char>()));
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Door``|left|12|\n\nadd_label|small|`oLabel``|left|4|\nadd_text_input|ch3||" + content + "|85|\nembed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "\nembed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "\n\nadd_label|small|`oDestination``|left|4|\nadd_text_input|wo3||" + content1 + "|24|\n\nadd_label|small|`oEnter a Destination in this format: `2WORLDNAME:ID``|left|4|\n\nadd_label|small|`oleave `2WORLDNAME `oblank (:ID) to go to the door with `2ID `oin the `2Current World.``|left|4|\n\nadd_label|small|`oID``|left|4|\nadd_text_input|id||" + content2 + "|11|\n\nadd_label|small|`oSet a unique `2ID `oto target this door as a Destination from another!``|left|4|\nadd_checkbox|iop|`oIs open to public|" + std::to_string(ischecked) + "\nend_dialog|door_edit|Cancel|OK|"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								return;
							}
							else
							{
								std::ifstream ifs("labels/" + world + std::to_string(x) + std::to_string(y) + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifs)),
									(std::istreambuf_iterator<char>()));
								std::ifstream ifs1("destination/" + world + std::to_string(x) + std::to_string(y) + ".txt");
								std::string content1((std::istreambuf_iterator<char>(ifs1)),
									(std::istreambuf_iterator<char>()));
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Door``|left|12|\n\nadd_label|small|`oLabel``|left|4|\nadd_text_input|ch3||" + content + "|85|\nembed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "\nembed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "\n\nadd_label|small|`oDestination``|left|4|\nadd_text_input|wo3||" + content1 + "|24|\n\nadd_label|small|`oEnter a Destination in this format: `2WORLDNAME:ID``|left|4|\n\nadd_label|small|`oleave `2WORLDNAME `oblank (:ID) to go to the door with `2ID `oin the `2Current World.``|left|4|\n\nadd_label|small|`oID``|left|4|\nadd_text_input|id|||11|\n\nadd_label|small|`oSet a unique `2ID `oto target this door as a Destination from another!``|left|4|\nadd_checkbox|iop|`oIs open to public|" + std::to_string(ischecked) + "\nend_dialog|door_edit|Cancel|OK|"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								return;
							}
						}
						else
						{
							std::ifstream ifs("labels/" + world + std::to_string(x) + std::to_string(y) + ".txt");
							std::string content((std::istreambuf_iterator<char>(ifs)),
								(std::istreambuf_iterator<char>()));
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Door``|left|12|\n\nadd_label|small|`oLabel``|left|4|\nadd_text_input|ch3||" + content + "|85|\nembed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "\nembed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "\n\nadd_label|small|`oDestination``|left|4|\nadd_text_input|wo3|||24|\n\nadd_label|small|`oEnter a Destination in this format: `2WORLDNAME:ID``|left|4|\n\nadd_label|small|`oleave `2WORLDNAME `oblank (:ID) to go to the door with `2ID `oin the `2Current World.``|left|4|\n\nadd_label|small|`oID``|left|4|\nadd_text_input|id|||11|\n\nadd_label|small|`oSet a unique `2ID `oto target this door as a Destination from another!``|left|4|\nadd_checkbox|iop|`oIs open to public|" + std::to_string(ischecked) + "\nend_dialog|door_edit|Cancel|OK|"));
							ENetPacket * packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);
							delete p.data;
							return;
						}
					}
					else
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Door``|left|12|\n\nadd_label|small|`oLabel``|left|4|\nadd_text_input|ch3|||85|\nembed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "\nembed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "\n\nadd_label|small|`oDestination``|left|4|\nadd_text_input|wo3|||24|\n\nadd_label|small|`oEnter a Destination in this format: `2WORLDNAME:ID``|left|4|\n\nadd_label|small|`oleave `2WORLDNAME `oblank (:ID) to go to the door with `2ID `oin the `2Current World.``|left|4|\n\nadd_label|small|`oID``|left|4|\nadd_text_input|id|||11|\n\nadd_label|small|`oSet a unique `2ID `oto target this door as a Destination from another!``|left|4|\nadd_checkbox|iop|`oIs open to public|" + std::to_string(ischecked) + "\nend_dialog|door_edit|Cancel|OK|"));
						ENetPacket * packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
						return;
					}
				}
			}
		}
	}


	if (world->name == "TRASH") {
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 300)
			{
				int rubble = ((PlayerInfo*)(peer->data))->rubble;
				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`8Rubble - Master``|left|3160|\nadd_spacer|small|\nadd_label|small|`9You currently have: `2" + to_string(rubble) + " `9Rubble's!|left|\nadd_label|small|`9Turning `21 Rubble `9Will give you `20-25 `9Gems.|left|\nadd_spacer|small|\nadd_button|traderubble|`3Turn in `91Rubble|0|0|\nadd_button|traderubbles|`3Turn in `910Rubbles|0|0|\nadd_spacer|small|\nend_dialog|chc0|Cancel|"));
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				//enet_host_flush(server);
				delete p.data;
			}
		}
	}
	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 758)
		{
			sendRoulete(peer, x, y);
		}
	}
	if (world->items[x + (y * world->width)].foreground == 20 || world->items[x + (y * world->width)].foreground == 24 || world->items[x + (y * world->width)].foreground == 26 || world->items[x + (y * world->width)].foreground == 28 || world->items[x + (y * world->width)].foreground == 608 || world->items[x + (y * world->width)].foreground == 780 || world->items[x + (y * world->width)].foreground == 1420 || world->items[x + (y * world->width)].foreground == 6214 || world->items[x + (y * world->width)].foreground == 7456 || world->items[x + (y * world->width)].foreground == 1430 || world->items[x + (y * world->width)].foreground == 1432 || world->items[x + (y * world->width)].foreground == 1446 || world->items[x + (y * world->width)].foreground == 780 || world->items[x + (y * world->width)].foreground == 1906 || world->items[x + (y * world->width)].foreground == 2396 || world->items[x + (y * world->width)].foreground == 2414 || world->items[x + (y * world->width)].foreground == 2586 || world->items[x + (y * world->width)].foreground == 2948 || world->items[x + (y * world->width)].foreground == 3758 || world->items[x + (y * world->width)].foreground == 4470 || world->items[x + (y * world->width)].foreground == 4488 || world->items[x + (y * world->width)].foreground == 5622 || world->items[x + (y * world->width)].foreground == 6102 || world->items[x + (y * world->width)].foreground == 6272)
	{
		if (world->owner != "") {
			if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
				if (tile == 32) {
					((PlayerInfo*)(peer->data))->SignPosX;
					((PlayerInfo*)(peer->data))->SignPosY;
					int yy = ((PlayerInfo*)(peer->data))->SignPosX / 32;
					int xx = ((PlayerInfo*)(peer->data))->SignPosY / 32;
					int posX = ((PlayerInfo*)(peer->data))->posX / 32; // good value is actually 31.16-31.33
					int posY = ((PlayerInfo*)(peer->data))->posY / 32;
					string world = ((PlayerInfo*)(peer->data))->currentWorld;
					string posx = std::to_string(yy);
					string posy = std::to_string(xx);
					bool exist = std::experimental::filesystem::exists("signs/" + world + posx + posy + ".txt");

					if (exist)
					{
						std::ifstream ifs("signs/" + world + posx + posy + ".txt");
						std::string content((std::istreambuf_iterator<char>(ifs)),
							(std::istreambuf_iterator<char>()));
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Sign``|left|20|\n\nadd_textbox|`oWhat would you like to write on this sign?|\nadd_text_input|text||" + content + "|100|\nend_dialog|signsshitit|Cancel|OK|\n"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					else
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Sign``|left|20|\n\nadd_textbox|`oWhat would you like to write on this sign?|\nadd_text_input|text|||100|\nend_dialog|signsshitit|Cancel|OK|\n"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
				}
			}
		}
	}
	if (world->name != "ADMIN") {
		if (world->owner != "") {
			if (((PlayerInfo*)(peer->data))->rawName == world->owner || isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass))
			{




				// WE ARE GOOD TO GO

				if (tile == 32)
				{
					if (world->items[x + (y*world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 7188)
					{
						std::ostringstream oss;
						if (!world->worldaccess.empty())
						{
							std::copy(world->worldaccess.begin(), world->worldaccess.end() - 1,
								std::ostream_iterator<string>(oss, ", "));

							// Now add the last element with no delimiter
							oss << world->worldaccess.back();
						}
						else {
							string oss = "You dont have any accessed player!";
						}
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit World Lock``|left|242|\nadd_spacer|small|\nadd_label|small|Access list: " + oss.str() + "|left|\nadd_spacer|small|\nadd_button|worldPublic|`wSet world to `9PUBLIC|0|0|\nadd_button|worldPrivate|`wSet world to `4PRIVATE|0|0|\nadd_spacer|big|\nadd_player_picker|netid|`wAdd|\nadd_spacer|small|\nadd_button_with_icon|allowMod|Allow Noclip|noflags|1796||\nadd_button_with_icon|allowMod1|Disallow Noclip|noflags|242||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|"));
						ENetPacket * packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						//enet_host_flush(server);
						delete p.data;
					}
				}
			}


			/*if (world->name != "ADMIN") //todo1 {
				if (world->owner != "") {

					if (((PlayerInfo*)(peer->data))->rawName == world->owner || (((PlayerInfo*)(peer->data))->rawName == world->worldaccess || isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass))) {
						if (((PlayerInfo*)(peer->data))->rawName == "") return;
						// WE ARE GOOD TO GO

						if (world->items[x + (y*world->width)].foreground == 242 && (((PlayerInfo*)(peer->data))->rawName == world->worldaccess))
						{
							return;
						}

						if (tile == 32 && ((PlayerInfo*)(peer->data))->rawName == world->worldaccess) {
							return;
						}
						string offlinelist = "";
						string offname = "";
						int ischecked;

						for (std::vector<string>::const_iterator i = world->accessworld.begin(); i != world->accessworld.end(); ++i) {
							offname = *i;
							offlinelist += "\nadd_checkbox|isAccessed|" + offname + "|0|\n";

						}

						if (world->isPublic == true) {
							ischecked = 1;
						}
						else {
							ischecked = 0;
						}
						if (tile == 32) {
							if (world->accessworld.size() == 0) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit World Lock``|left|242|\nadd_textbox|`wAccess list:|left|\nadd_spacer|small|\nadd_textbox|Currently, you're the only one with the access.|left|\nadd_spacer|small|\nadd_player_picker|netid|`wAdd|\nadd_checkbox|isWorldPublic|Allow anyone to build|" + std::to_string(ischecked) + "| \nend_dialog|wlmenu|Cancel|OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							else {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit World Lock``|left|242|\nadd_textbox|`wAccess list:|left|\nadd_spacer|small|" + offlinelist + "add_spacer|small|\nadd_player_picker|netid|`wAdd|\nadd_checkbox|isWorldPublic|Allow anyone to build|" + std::to_string(ischecked) + "| \nend_dialog|wlmenu|Cancel|OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

						}
					}
				}
			}*/

			else if (find(world->worldaccess.begin(), world->worldaccess.end(), ((PlayerInfo*)(peer->data))->rawName) != world->worldaccess.end())
			{
					if (world->items[x + (y * world->width)].foreground == 242)
					{


						string ownername = world->Displayowner;
						GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0. (`2Access Granted`w)"), 0), 1));


						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet2);
						delete p2.data;

						return;
						if (isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {

						}
						else
						{
							string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
							BYTE* data = new BYTE[5 + text.length()];
							BYTE zero = 0;
							int type = 3;
							memcpy(data, &type, 4);
							memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
							memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

							ENetPacket* packetsou = enet_packet_create(data,
								5 + text.length(),
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(peer, 0, packetsou);


							return;
						}
					}

			}
					else if (world->isPublic)
					{
						if (world->items[x + (y*world->width)].foreground == 242)
						{


							string ownername = world->Displayowner;
							GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0. (`9Open to Public`w)"), 0), 1));


							ENetPacket * packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet2);
							delete p2.data;

							return;
						}
						if (isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {

						}
						else
						{
							string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
							BYTE* data = new BYTE[5 + text.length()];
							BYTE zero = 0;
							int type = 3;
							memcpy(data, &type, 4);
							memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
							memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

							ENetPacket* packetsou = enet_packet_create(data,
								5 + text.length(),
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(peer, 0, packetsou);


							return;
						}

					}
					else if (world->isEvent)
					{
					if (world->items[x + (y * world->width)].foreground == 242)
					{


						string ownername = world->Displayowner;
						GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0. (`4No Access`w)"), 0), 1));


						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet2);
						delete p2.data;
						string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(peer, 0, packetsou);
						return;
					}
					else if (world->items[x + (y * world->width)].foreground != 1000)
					{
						string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(peer, 0, packetsou);
						return;
					}


					}
					else {
						if (world->items[x + (y*world->width)].foreground == 242)
						{
							string ownername = world->Displayowner;
							GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0."), 0));


							ENetPacket * packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet2);
							delete p2.data;


						}
						if (isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {

						}
						else
						{
							string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
							BYTE* data = new BYTE[5 + text.length()];
							BYTE zero = 0;
							int type = 3;
							memcpy(data, &type, 4);
							memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
							memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

							ENetPacket * packetsou = enet_packet_create(data,
								5 + text.length(),
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(peer, 0, packetsou);


							return;
						}

					} /*lockeds*/
					if (tile == 242 || tile == 2408 || tile == 1796 || tile == 4428 || tile == 7188) {



						GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0Only one `$World Lock`0 can be placed in a world!"), 0));


						ENetPacket * packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						delete p3.data;
						return;
					}
				}
			}
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1490)
			{
				world->weather = 10;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 934)
			{
				world->weather = 2;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 946)
				{
					world->weather = 3;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 1490)
				{
					world->weather = 10;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 932)
				{
					world->weather = 4;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 984)
				{
					world->weather = 5;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 1210)
				{
					world->weather = 8;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 1364)
				{
					world->weather = 11;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 1750)
				{
					world->weather = 15;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 2046)
				{
					world->weather = 17;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 2284)
				{
					world->weather = 18;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 2744)
				{
					world->weather = 19;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 3252)
				{
					world->weather = 20;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 3446)
				{
					world->weather = 21;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 3534)
				{
					world->weather = 22;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 3694)
				{
					world->weather = 25;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 3832)
				{
					world->weather = 29;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 1490)
				{
					world->weather = 10;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 4242)
				{
					world->weather = 30;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 4486)
				{
					world->weather = 31;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 4776)
				{
					world->weather = 32;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 4892)
				{
					world->weather = 33;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 5000)
				{
					world->weather = 34;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 5112)
				{
					world->weather = 35;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 5654)
				{
					world->weather = 36;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 5716)
				{
					world->weather = 37;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 5958)
				{
					world->weather = 38;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 6854)
				{
					world->weather = 42;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
		{
			// WE ARE GOOD TO GO
			if (tile == 18)
			{
				if (world->items[x + (y * world->width)].foreground == 7644)
				{
					world->weather = 44;
					ENetPeer* currentPeer;

					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(currentPeer, 0, packet2);
							delete p2.data;
							continue;
						}
					}
				}
			}
		}
			if (tile == 1404) {
				//world->items[x + (y*world->width)].water = !world->items[x + (y*world->width)].water;
				//if (isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {

				if (((PlayerInfo*)(peer->data))->rawName == world->owner || isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {
					if (world->items[x + (y * world->width)].foreground != 0) {
						GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Here is no space for the main door!"));


						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet2);
						delete p2.data;

					}
					else if (world->items[x + (y * world->width) + 100].foreground != 0) {
						GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Here is no space for the main door!"));


						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet2);
						delete p2.data;

					}
					else

					{
						//	showDoormover(peer);
						for (int i = 0; i < world->width * world->height; i++)
						{
							if (i >= 5400) {
								world->items[i].foreground = 8;
							}
							else if (world->items[i].foreground == 6) {

								world->items[i].foreground = 0;
								world->items[i + 100].foreground = 0;

							}

							else if (world->items[i].foreground != 6) {
								world->items[x + (y * world->width)].foreground = 6;
								world->items[x + (y * world->width) + 100].foreground = 8;
							}


						}

						WorldInfo* wrld = getPlyersWorld(peer);
						ENetPeer* currentPeer;

						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
								string act = ((PlayerInfo*)(peer->data))->currentWorld;
								//WorldInfo info = worldDB.get(act);
								// sendWorld(currentPeer, &info);


								sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
								joinWorld(currentPeer, act, 0, 0);
								GamePacket p8 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You used door mover!"));
								ENetPacket* packet8 = enet_packet_create(p8.data,
									p8.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet8);

							}

						}
					}
					return;
				}
			}
			if (tile == 1280) {
				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string content((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));

				int b = atoi(content.c_str());

				if (b > 19999)
				{

					GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange your GrowID|left|1280|\nadd_label|small|`oThis will change your GrowID `4permanently`o. Your `wBirth Certificate will be consumed if you click `5Change it`w.|left|32|\nadd_label|small|`oChoose an appropriate name or `6we will change it for you!|\nadd_text_input|newgrowid|`oEnter your new name :||30|\nend_dialog|grodia|`wCancel``|`wChange it!``|"));
					ENetPacket* packet = enet_packet_create(ps.data,
						ps.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					delete ps.data;
				}
				else
				{
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rYou need to have enough gems to `2change `ryour name!"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					delete p.data;
				}
			}
			
	
	if (tile == 32) {
		// TODO
		return;
	}
	if (tile == 822) {
		world->items[x + (y*world->width)].water = !world->items[x + (y*world->width)].water;
		return;
	}
	if (tile == 3062)
	{
		world->items[x + (y*world->width)].fire = !world->items[x + (y*world->width)].fire;
		return;
	}
	if (tile == 1866)
	{
		world->items[x + (y*world->width)].glue = !world->items[x + (y*world->width)].glue;
		return;
	}
	ItemDefinition def;
	try {
		def = getItemDef(tile);
		if (def.clothType != ClothTypes::NONE) return;
	}
	catch (int e) {
		def.breakHits = 5;
		if (def.blockType = BlockTypes::SEED) return;
		def.blockType = BlockTypes::UNKNOWN;
#ifdef TOTAL_LOG
		cout << "Ugh, unsupported item " << tile << endl;
#endif
	}
	int test;
	int test2;
	if (((PlayerInfo*)(peer->data))->cloth_hand == 2952) {
		test = 1;
	}
	else {
		test = 4;
	}
	if (tile == 544 || tile == 54600 || tile == 4520 || tile == 382 || tile == 3116 || tile == 4520 || tile == 1792 || tile == 5666 || tile == 2994 || tile == 4368) return;
	if (tile == 5708 || tile == 5709 || tile == 5780 || tile == 5781 || tile == 5782 || tile == 5783 || tile == 5784 || tile == 5785 || tile == 5710 || tile == 5711 || tile == 5786 || tile == 5787 || tile == 5788 || tile == 5789 || tile == 5790 || tile == 5791 || tile == 6146 || tile == 6147 || tile == 6148 || tile == 6149 || tile == 6150 || tile == 6151 || tile == 6152 || tile == 6153 || tile == 5670 || tile == 5671 || tile == 5798 || tile == 5799 || tile == 5800 || tile == 5801 || tile == 5802 || tile == 5803 || tile == 5668 || tile == 5669 || tile == 5792 || tile == 5793 || tile == 5794 || tile == 5795 || tile == 5796 || tile == 5797 || tile == 544 || tile == 54600 || tile == 4520 || tile == 382 || tile == 3116 || tile == 1792 || tile == 5666 || tile == 2994 || tile == 4368) return;
	if (tile == 1902 || tile == 1508 || tile == 428 || tile == 410 || tile == 3808) return;
	if (tile == 9999 || tile == 1770 || tile == 4720 || tile == 4882 || tile == 6392 || tile == 3212 || tile == 1832 || tile == 4742 || tile == 3496 || tile == 3270 || tile == 4722) return;
	if (tile == 0 || tile == 18) {
		if (world->items[x + (y*world->width)].background == 6864 && world->items[x + (y*world->width)].foreground == 0) return;
		if (world->items[x + (y*world->width)].background == 0 && world->items[x + (y*world->width)].foreground == 0) return;
		//data.netID = -1;
		data.packetType = 0x8;
		data.plantingTree = 4;
		using namespace std::chrono;
		//if (world->items[x + (y*world->width)].foreground == 0) return;
		if ((duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count() - world->items[x + (y*world->width)].breakTime >= 5000)
		{
				world->items[x + (y * world->width)].breakTime = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
				world->items[x + (y * world->width)].breakLevel = 5; // TODO
				if (world->items[x + (y * world->width)].foreground == 1790)
					sendWizard(peer, x, y);
		}
		else
			if (y < world->height && world->items[x + (y * world->width)].breakLevel + 4 >= def.breakHits * test) { // TODO
				data.packetType = 0x3;// 0xC; // 0xF // World::HandlePacketTileChangeRequest
				data.netID = -1;
				data.plantingTree = tile;
				data.punchX = x;
				data.punchY = y;
				world->items[x + (y * world->width)].breakLevel = 0;
				int hi = data.punchX * 32;
				int hi2 = data.punchY * 32;
				if (((PlayerInfo*)(peer->data))->cloth_hand == 1874) {
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 97), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
				}
				else if (((PlayerInfo*)(peer->data))->boughtSPD >= true && ((PlayerInfo*)(peer->data))->cloth_hand == 2952) {
					GamePacket p = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 97), hi, hi2));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					def.breakHits = 1;
				}
				if (world->items[x + (y * world->width)].foreground != 0)
				{
					if (world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 7188)
					{
						world->owner = "";
						world->Displayowner = "";
						world->worldaccess.clear();
						world->pIsVip = false;
						world->pIsMod = false;
						world->pIsDev = false;
						world->pIsPlay = false;
						world->isPublic = false;


						if (((PlayerInfo*)(peer->data))->isNicked == true)
						{
							((PlayerInfo*)(peer->data))->isNicked = false;
							if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
							}

							if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 && ((PlayerInfo*)(peer->data))->rawName == "luc1fer")
							{

								((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
							}
							else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
							{

								((PlayerInfo*)(peer->data))->country = "../atomic_button";
							}
							else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
							{

								((PlayerInfo*)(peer->data))->country = "../particle_star";
							}
							else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333)
							{


							}


							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);



							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer))
								{
									if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
							delete p7.data;
						}

						if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w`w" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}

						WorldInfo* world = getPlyersWorld(peer);
						string nameworld = world->name;
						GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`w" + nameworld + " `ohas had its `$World Lock `oremoved!`5]"));
						ENetPacket* packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						((PlayerInfo*)(peer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end(), nameworld), ((PlayerInfo*)(peer->data))->worldsowned.end());
						string text = "action|play_sfx\nfile|audio/metal_destroy.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						ENetPeer* currentPeer;


						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
							}

						}

					}
					int valgem;
					if (((PlayerInfo*)(peer->data))->boughtWAR >= true && ((PlayerInfo*)(peer->data))->cloth_hand == 7912) {
						valgem = rand() % 10;
						std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						std::string content((std::istreambuf_iterator<char>(ifs)),
							(std::istreambuf_iterator<char>()));

						int gembux = atoi(content.c_str());
						int fingembux = gembux + valgem;

						ofstream myfile;
						myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						myfile << fingembux;
						myfile.close();

						int gemcalc = gembux + valgem;
						GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
						ENetPacket* packetpp = enet_packet_create(pp.data,
							pp.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(peer, 0, packetpp);
						delete pp.data;
						int rubblechange = rand() % 115 + 1;
						if (rubblechange <= 5) {
							((PlayerInfo*)(peer->data))->rubblexp = 0;
							((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;

							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `2Rubble!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);
							int x = ((PlayerInfo*)(peer->data))->x;
							int y = ((PlayerInfo*)(peer->data))->y;
							GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 49), x, y));

							ENetPacket* packetd = enet_packet_create(psp.data,
								psp.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packetd);
							//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));
						}
					}
					else if (((PlayerInfo*)(peer->data))->boughtAAC >= true && ((PlayerInfo*)(peer->data))->cloth_ances) {
						valgem = rand() % 15;
						std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						std::string content((std::istreambuf_iterator<char>(ifs)),
							(std::istreambuf_iterator<char>()));

						int gembux = atoi(content.c_str());
						int fingembux = gembux + valgem;

						ofstream myfile;
						myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						myfile << fingembux;
						myfile.close();

						int gemcalc = gembux + valgem;
						GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
						ENetPacket* packetpp = enet_packet_create(pp.data,
							pp.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(peer, 0, packetpp);
						delete pp.data;
						int rubblechange = rand() % 120 + 1;
						if (rubblechange <= 5) {
							((PlayerInfo*)(peer->data))->rubblexp = 0;
							((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;

							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `2Rubble!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);
							int x = ((PlayerInfo*)(peer->data))->x;
							int y = ((PlayerInfo*)(peer->data))->y;
							GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 49), x, y));

							ENetPacket* packetd = enet_packet_create(psp.data,
								psp.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packetd);
							//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));
						}
					}
					else if (((PlayerInfo*)(peer->data))->boughtTK >= true && ((PlayerInfo*)(peer->data))->cloth_feet == 8834) {
						valgem = rand() % 13;
						std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						std::string content((std::istreambuf_iterator<char>(ifs)),
							(std::istreambuf_iterator<char>()));

						int gembux = atoi(content.c_str());
						int fingembux = gembux + valgem;

						ofstream myfile;
						myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						myfile << fingembux;
						myfile.close();

						int gemcalc = gembux + valgem;
						GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
						ENetPacket* packetpp = enet_packet_create(pp.data,
							pp.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(peer, 0, packetpp);
						delete pp.data;
						int rubblechange = rand() % 120 + 1;
						if (rubblechange <= 5) {
							((PlayerInfo*)(peer->data))->rubblexp = 0;
							((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;

							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `2Rubble!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);
							int x = ((PlayerInfo*)(peer->data))->x;
							int y = ((PlayerInfo*)(peer->data))->y;
							GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 49), x, y));

							ENetPacket* packetd = enet_packet_create(psp.data,
								psp.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packetd);
							//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));
						}
					}
					else {
						valgem = rand() % 5;
					}
					world->items[x + (y * world->width)].foreground = 0;
					((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
					((PlayerInfo*)(peer->data))->rubblexp = ((PlayerInfo*)(peer->data))->rubblexp + 1;
					std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
					std::string content((std::istreambuf_iterator<char>(ifs)),
						(std::istreambuf_iterator<char>()));

					int gembux = atoi(content.c_str());
					int fingembux = gembux + valgem;

					ofstream myfile;
					myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
					myfile << fingembux;
					myfile.close();

					int gemcalc = gembux + valgem;
					GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
					ENetPacket* packetpp = enet_packet_create(pp.data,
						pp.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetpp);
					delete pp.data;
					int rubblechange = rand() % 100 + 1;
					if (rubblechange <= 5) {
						((PlayerInfo*)(peer->data))->rubblexp = 0;
						((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + 1;
								string name = ((PlayerInfo*)(peer->data))->displayName;

								GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `2Rubble!"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet3);
								int x = ((PlayerInfo*)(peer->data))->x;
								int y = ((PlayerInfo*)(peer->data))->y;
								GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 49), x, y));

								ENetPacket* packetd = enet_packet_create(psp.data,
									psp.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packetd);
								//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));
					}
					if (((PlayerInfo*)(peer->data))->xp >= 300) {
						((PlayerInfo*)(peer->data))->xp = 0;
						((PlayerInfo*)(peer->data))->level = ((PlayerInfo*)(peer->data))->level + 1;
						ENetPeer* currentPeer;

						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								string text = "action|play_sfx\nfile|audio/levelup2.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet);

								ENetPacket* packet2 = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packet2);
								int effect = 46;
								int x = ((PlayerInfo*)(peer->data))->x;
								int y = ((PlayerInfo*)(peer->data))->y;
								GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

								ENetPacket* packetd = enet_packet_create(psp.data,
									psp.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packetd);

								//                `w(`2" + std::to_string(level) + "`w) "
								//((PlayerInfo*)(peer->data))->displayName = "`w(`2"+((PlayerInfo*)(peer->data))->level +"`w) " + ((PlayerInfo*)(peer->data))->tankIDName;
								delete psp.data;
								delete data;
								delete p.data;

								GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet3);
								//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));

							}
						}
					}
					if (((PlayerInfo*)(peer->data))->haveGrowId) {
						std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

						PlayerInfo* p = ((PlayerInfo*)(peer->data));

						string username = PlayerDB::getProperName(p->rawName);



						if (ifff.fail()) {
							ifff.close();


						}
						if (ifff.is_open()) {
						}
						json j;
						ifff >> j; //load
						j["level"] = p->level;
						j["xp"] = p->xp;
						j["rubblexp"] = p->rubblexp;
						j["rubble"] = p->rubble;

						std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
						if (!o.is_open()) {
							cout << GetLastError() << endl;
							_getch();
						}

						o << j << std::endl;
					}
				}
				else {
				world->items[x + (y * world->width)].background = 6864;
				((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
				int valgem = rand() % 3;

				std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string content((std::istreambuf_iterator<char>(ifs)),
					(std::istreambuf_iterator<char>()));

				int gembux = atoi(content.c_str());
				int fingembux = gembux + valgem;

				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << fingembux;
				myfile.close();

				int gemcalc = gembux + valgem;

				GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
				ENetPacket* packetpp = enet_packet_create(pp.data,
					pp.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packetpp);
				delete pp.data;
				int rubblechange = rand() % 100 + 1;
				if (rubblechange <= 5) {
					((PlayerInfo*)(peer->data))->rubblexp = 0;
					((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + 1;
					string name = ((PlayerInfo*)(peer->data))->displayName;

					GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `2Rubble!"));
					ENetPacket* packet3 = enet_packet_create(p3.data,
						p3.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet3);
					int x = ((PlayerInfo*)(peer->data))->x;
					int y = ((PlayerInfo*)(peer->data))->y;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 49), x, y));

					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));
				}
					if (((PlayerInfo*)(peer->data))->xp >= 300) {
						((PlayerInfo*)(peer->data))->xp = 0;
						((PlayerInfo*)(peer->data))->level = ((PlayerInfo*)(peer->data))->level + 1;
						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								string text = "action|play_sfx\nfile|audio/levelup2.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet);

								ENetPacket* packet2 = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packet2);
								int effect = 46;
								int x = ((PlayerInfo*)(peer->data))->x;
								int y = ((PlayerInfo*)(peer->data))->y;
								GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

								ENetPacket* packetd = enet_packet_create(psp.data,
									psp.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packetd);

								//                `w(`2" + std::to_string(level) + "`w) "
								//((PlayerInfo*)(peer->data))->displayName = "`w(`2"+((PlayerInfo*)(peer->data))->level +"`w) " + ((PlayerInfo*)(peer->data))->tankIDName;
								delete psp.data;
								delete data;
								delete p.data;

								GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet3);
							}
							//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));


							data.plantingTree = tile;
						}
					}
				}
				if (((PlayerInfo*)(peer->data))->haveGrowId) {
					std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

					PlayerInfo* p = ((PlayerInfo*)(peer->data));

					string username = PlayerDB::getProperName(p->rawName);



					if (ifff.fail()) {
						ifff.close();


					}
					if (ifff.is_open()) {
					}
					json j;
					ifff >> j; //load
					j["level"] = p->level;
					j["xp"] = p->xp;
					j["rubblexp"] = p->rubblexp;
					j["rubble"] = p->rubble;

					std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
					if (!o.is_open()) {
						cout << GetLastError() << endl;
						_getch();
					}

					o << j << std::endl;
				}
			}
			else
				if (y < world->height)
				{
					world->items[x + (y*world->width)].breakTime = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
					world->items[x + (y*world->width)].breakLevel += 6; // TODO
				}


	}
	else {
		for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
		{
			if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == tile)
			{
				if ((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount > 1)
				{
					((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount--;
				}
				else {
					((PlayerInfo*)(peer->data))->inventory.items.erase(((PlayerInfo*)(peer->data))->inventory.items.begin() + i);

				}
			}
		}
		if (def.blockType == BlockTypes::BACKGROUND)
		{
			world->items[x + (y*world->width)].background = tile;
			data.plantingTree = tile;
		}
		else {
			ENetPeer* currentPeer;
			if (tile == 242 || tile == 2408 || tile == 1796 || tile == 4428 || tile == 7188) {
				if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
				{
					world->items[x + (y * world->width)].foreground = tile;
					world->owner = ((PlayerInfo*)(peer->data))->rawName;
					world->Displayowner = ((PlayerInfo*)(peer->data))->rawName;
					world->isPublic = false;
					((PlayerInfo*)(peer->data))->worldsowned.push_back(world->name);
					std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


					if (ifff.fail()) {
						ifff.close();


					}
					if (ifff.is_open()) {
					}
					json j;
					ifff >> j; //load


					j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned; //edit




					std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
					if (!o.is_open()) {
						cout << GetLastError() << endl;
						_getch();
					}

					o << j << std::endl;
				}
				else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
				{
					world->items[x + (y * world->width)].foreground = tile;
					world->owner = ((PlayerInfo*)(peer->data))->rawName;
					world->Displayowner = ((PlayerInfo*)(peer->data))->rawName;
					world->isPublic = false;
					((PlayerInfo*)(peer->data))->worldsowned.push_back(world->name);
					std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


					if (ifff.fail()) {
						ifff.close();


					}
					if (ifff.is_open()) {
					}
					json j;
					ifff >> j; //load


					j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned; //edit




					std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
					if (!o.is_open()) {
						cout << GetLastError() << endl;
						_getch();
					}

					o << j << std::endl;
				}
				else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333)
				{
					world->items[x + (y * world->width)].foreground = tile;
					world->owner = ((PlayerInfo*)(peer->data))->rawName;
					world->Displayowner = ((PlayerInfo*)(peer->data))->rawName;
					world->isPublic = false;
					((PlayerInfo*)(peer->data))->worldsowned.push_back(world->name);
					std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


					if (ifff.fail()) {
						ifff.close();


					}
					if (ifff.is_open()) {
					}
					json j;
					ifff >> j; //load


					j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned; //edit




					std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
					if (!o.is_open()) {
						cout << GetLastError() << endl;
						_getch();
					}

					o << j << std::endl;
				}
				else {
					GamePacket p2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnCancelledText1131"), "interface/tutorial/tut06_build_lock.rttex"), ""), "audio/tip_start.wav"), 0));
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					ENetPeer* currentPeer;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						enet_peer_send(currentPeer, 0, packet2);
					}

					//enet_host_flush(server);
					delete p2.data;
					std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
					std::string content((std::istreambuf_iterator<char>(ifsz)),
						(std::istreambuf_iterator<char>()));

					int b = atoi(content.c_str());

					if (b > 499)
					{
						world->items[x + (y * world->width)].foreground = tile;
						world->owner = ((PlayerInfo*)(peer->data))->rawName;
						world->Displayowner = ((PlayerInfo*)(peer->data))->rawName;
						world->isPublic = false;
						((PlayerInfo*)(peer->data))->worldsowned.push_back(world->name);
						std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


						if (ifff.fail()) {
							ifff.close();


						}
						if (ifff.is_open()) {
						}
						json j;
						ifff >> j; //load


						j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned; //edit




						std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
						if (!o.is_open()) {
							cout << GetLastError() << endl;
							_getch();
						}

						o << j << std::endl;
						if (((PlayerInfo*)(peer->data))->haveGrowId)
						{
							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`2`2" + ((PlayerInfo*)(peer->data))->tankIDName));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
							if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
								((PlayerInfo*)(peer->data))->displayName = "`2" + ((PlayerInfo*)(peer->data))->tankIDName;
							}

							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);

							delete p7.data;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer)) {
									if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
						}
						else
						{








							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`2`2" + ((PlayerInfo*)(peer->data))->displayName));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
							if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
								((PlayerInfo*)(peer->data))->displayName = "`2" + ((PlayerInfo*)(peer->data))->displayName;
							}

							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);

							delete p7.data;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer)) {
									if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
										enet_peer_send(currentPeer, 0, packet7);

										/*string text = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

										ENetPacket * packetsou = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packetsou);*/
										string text = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

										ENetPacket* packetsou = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packetsou);
									}
								}
							}
						}
					}
					if (((PlayerInfo*)(peer->data))->isNicked == true)
					{
						((PlayerInfo*)(peer->data))->isNicked = false;
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;


						if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 && ((PlayerInfo*)(peer->data))->rawName == "luc1fer")
						{

							((PlayerInfo*)(peer->data))->country = "/rtsoft_logo";
						}
						else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
						{

							((PlayerInfo*)(peer->data))->country = "/rtsoft_logo";
						}
						else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
						{

							((PlayerInfo*)(peer->data))->country = "/atomic_button";
						}
						else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333)
						{


						}

						GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
						memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


						ENetPacket* packet7 = enet_packet_create(p7.data,
							p7.len,
							ENET_PACKET_FLAG_RELIABLE);



						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
								enet_peer_send(currentPeer, 0, packet7);
							}
						}
						delete p7.data;
					}
					std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
					std::string contentx((std::istreambuf_iterator<char>(ifszi)),
						(std::istreambuf_iterator<char>()));


					int updgem = atoi(contentx.c_str());
					GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
					ENetPacket* packetpp = enet_packet_create(pp.data,
						pp.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetpp);
					delete pp.data;

				}
				ENetPeer* currentPeer;




				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer)) {
						if (((PlayerInfo*)(peer->data))->rawName == "luc1fer" && getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
						{
							world->pIsPlay = true;
						}
						else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 && ((PlayerInfo*)(peer->data))->rawName != "luc1fer") {
							world->pIsDev = true;
						}
						else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
							world->pIsMod = true;
						}
						else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333) {
							world->pIsVip = true;
						}
						else
						{
							world->pIsPlay = false;
							world->pIsDev = false;
							world->pIsMod = false;
							world->pIsVip = false;
						}
						if (((PlayerInfo*)(peer->data))->rawName == "luc1fer" && getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
						{
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `4" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packet);
							delete p.data;
						}
						else
						{
							if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `6" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet);
								delete p.data;
							}
							else
							{
								if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `#" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
									delete p.data;
								}
								else
								{
									if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `e" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
									else
									{
										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));

										int b = atoi(content.c_str());

										if (b > 499)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `2" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;

											int gemcalc10k = b - 500;


											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile2 << std::to_string(gemcalc10k);
											myfile2.close();

											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));


											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetpp);
											delete pp.data;

										}
										else
										{
											int needgems = 500 - b;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need " + to_string(needgems) + " gems more to lock a world."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											return;
										}
									}
								}
							}
						}


					}
				}
			}
			else {
				world->items[x + (y * world->width)].foreground = tile;
			}

		}


		world->items[x + (y * world->width)].breakLevel = 0;
	}


	ENetPeer* currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
			SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}
}

void sendPlayerJoin(ENetPeer* peer, PlayerInfo* player)
{
	ENetPeer * currentPeer;
	
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + player->displayName + "`` `5entered, `w" + std::to_string(getPlayersCountInWorld(player->currentWorld)) + "`` `5others here>```w"));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;

		
	}	
	delete p2.data;
}

void sendPlayerBan(ENetPeer* peer, PlayerInfo* player)
{
	ENetPeer * currentPeer;
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(player->netID) + "\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
		{
			if (isHere(peer, currentPeer)) {
				{
					ENetPacket * packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
				}
			}
		}
		delete p.data;
	}
}

void sendPlayerFakeLeave(ENetPeer* peer, PlayerInfo* player)
{
	ENetPeer * currentPeer;
	//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(player->netID) + "\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + player->displayName + "`` left, `w" + std::to_string(getPlayersCountInWorld(player->currentWorld)) + "`` others here>``"));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;

		if (isHere(peer, currentPeer)) {
			{

				/*ENetPacket * packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);*/

				{
					/*ENetPacket * packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);*/
				}

			}
			{
				if (((PlayerInfo*)(peer->data))->isinv == false)
				{
					ENetPacket * packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);


					enet_peer_send(currentPeer, 0, packet2);
				}

			}
		}
	}

	delete p2.data;
}

void sendPlayerWBan(ENetPeer* peer, string from, string to)
{
	ENetPeer * currentPeerp;

	for (currentPeerp = server->peers;
		currentPeerp < &server->peers[server->peerCount];
		++currentPeerp)
	{
		if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
			continue;

		if (getAdminLevel(((PlayerInfo*)(currentPeerp->data))->rawName, ((PlayerInfo*)(currentPeerp->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(currentPeerp->data))->rawName, ((PlayerInfo*)(currentPeerp->data))->tankIDPass) == 666) {

		}
		else
		{
			string name = from;
			string kickname = to;
			//string kickname = ((PlayerInfo*)(peer->data))->displayName;
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname));
			string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
			BYTE* data = new BYTE[5 + text.length()];
			BYTE zero = 0;
			int type = 3;
			memcpy(data, &type, 4);
			memcpy(data + 4, text.c_str(), text.length());
			memcpy(data + 4 + text.length(), &zero, 1);




			if (isHere(peer, currentPeerp))
			{

				ENetPacket * packetsou = enet_packet_create(data,
					5 + text.length(),
					ENET_PACKET_FLAG_RELIABLE);

				ENetPacket * packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);




				enet_peer_send(currentPeerp, 0, packetsou);
				enet_peer_send(currentPeerp, 0, packet);
				delete data;
				delete p.data;
			}
		}
	}
}

void sendChatMessage(ENetPeer* peer, int netID, string message)
{
	if (((PlayerInfo*)(peer->data))->haveGrowId == true) {
		string ccode;
		if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999) {
			ccode = "5";
		}
		else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
			ccode = "^";
		}
		else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333) {
			ccode = "1";
		}


		if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 222 && ((PlayerInfo*)(peer->data))->isNicked == false) {
			for (char c : message)
				
				if (c < 0x18 || std::all_of(message.begin(), message.end(), isspace))
				{
					return;
				}

			ENetPeer * currentPeer;
			string name = "";
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->netID == netID)
					name = ((PlayerInfo*)(currentPeer->data))->displayName;

			}
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o<`w" + name + "`o> `" + ccode + message));
			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), "`" + ccode + message), 0));
			//GamePacket pf2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), "`" + ccode + message), 0));
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{

					ENetPacket * packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet);

					//enet_host_flush(server);

					ENetPacket * packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet2);

					//enet_host_flush(server);
				}
			}
			delete p.data;
			delete p2.data;
		}
		else {
			for (char c : message)				
			if (c < 0x18 || std::all_of(message.begin(), message.end(), isspace))
			{
				return;
			}

			ENetPeer * currentPeer;
			string name = "";
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->netID == netID)
					name = ((PlayerInfo*)(currentPeer->data))->displayName;

			}
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o<`w" + name + "`o> " + message));

			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), message), 0));
			GamePacket p2f = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), +"`!" + message), 0));
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{

					ENetPacket * packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet);

					//enet_host_flush(server);

					if (((PlayerInfo*)(peer->data))->isFrozen == false)
					{

						ENetPacket * packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet2);

					}
					else
					{
						ENetPacket * packet2f = enet_packet_create(p2f.data,
							p2f.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet2f);
					}

					//enet_host_flush(server);
				}
			}
			delete p.data;
			delete p2.data;
			delete p2f.data;
		}
	}
	else {
		if (((PlayerInfo*)(peer->data))->haveGrowId) {

			GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oTo prevent abuse, you `4must `obe `2registered `oin order to chat!"));
			ENetPacket * packet0 = enet_packet_create(p0.data,
				p0.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(peer, 0, packet0);
			delete p0.data;
			GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`oTo prevent abuse, you `4must `obe `2registered `oin order to chat!"));
			ENetPacket * packet4 = enet_packet_create(p4.data,
				p4.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(peer, 0, packet4);
			delete p4.data;
			return;
		}
	}
}

void sendGrowmoji(ENetPeer* peer, string emoji)
{
	ENetPeer* currentPeer;
	GamePacket p2ssw = packetEnd(appendString(appendInt(appendString(createPacket(), "OnEmoticonDataChanged"), 201560520), "(wl)|ā|1&(yes)|Ă|1&(no)|ă|1&(love)|Ą|1&(oops)|ą|1&(shy)|Ć|1&(wink)|ć|1&(tongue)|Ĉ|1&(agree)|ĉ|1&(sleep)|Ċ|1&(punch)|ċ|1&(music)|Č|1&(build)|č|1&(megaphone)|Ď|1&(sigh)|ď|1&(mad)|Đ|1&(wow)|đ|1&(dance)|Ē|1&(see-no-evil)|ē|1&(bheart)|Ĕ|1&(heart)|ĕ|1&(grow)|Ė|1&(gems)|ė|1&(kiss)|Ę|1&(gtoken)|ę|1&(lol)|Ě|1&(smile)|Ā|1&(cool)|Ĝ|1&(cry)|ĝ|1&(vend)|Ğ|1&(bunny)|ě|1&(cactus)|ğ|1&(pine)|Ĥ|1&(peace)|ģ|1&(terror)|ġ|1&(evil)|Ģ|1&(fireworks)|Ħ|1&(football)|ĥ|1&(alien)|ħ|1&(party)|Ĩ|1&(pizza)|ĩ|1&(clap)|Ī|1&(song)|ī|1&(ghost)|Ĭ|1&(nuke)|ĭ|1&(halo)|Į|1&(turkey)|į|1&(gift)|İ|1&(cake)|ı|1&(heartarrow)|Ĳ|1&(lucky)|ĳ|1&(shamrock)|Ĵ|1&(grin)|ĵ|1&(ill)|Ķ|1&"));
	ENetPacket* packet2ssw = enet_packet_create(p2ssw.data,
		p2ssw.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2ssw);
	delete p2ssw.data;
}


void sendWho(ENetPeer* peer)
{
	ENetPeer * currentPeer;
	string name = "";
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer) && ((PlayerInfo*)(currentPeer->data))->isinv == false)
		{

			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(currentPeer->data))->netID), ((PlayerInfo*)(currentPeer->data))->displayName), 1));
			ENetPacket * packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);


			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			//enet_host_flush(server);
		}
	}
}
void sendWorldCursed(ENetPeer* peer, WorldInfo* worldInfo)
{
#ifdef TOTAL_LOG
	cout << "Entering a world..." << endl;
#endif
	if (worldproperlock == false)
	{
		((PlayerInfo*)(peer->data))->joinClothesUpdated = false;
		string asdf = "0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000070000000000"; // 0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000080000000000000000000000000000000000000000000000000000000000000048133A0500000000BEBB0000070000000000
		string worldName = "HELL";
		int xSize = worldInfo->width;
		int ySize = worldInfo->height;
		int square = xSize * ySize;
		__int16 nameLen = worldName.length();
		int payloadLen = asdf.length() / 2;
		int dataLen = payloadLen + 2 + nameLen + 12 + (square * 8) + 4;
		int allocMem = payloadLen + 2 + nameLen + 12 + (square * 8) + 4 + 16000;
		BYTE* data = new BYTE[allocMem];
		for (int i = 0; i < asdf.length(); i += 2)
		{
			char x = ch2n(asdf[i]);
			x = x << 4;
			x += ch2n(asdf[i + 1]);
			memcpy(data + (i / 2), &x, 1);
		}
		int zero = 0;
		__int16 item = 0;
		int smth = 0;
		for (int i = 0; i < square * 8; i += 4) memcpy(data + payloadLen + i + 14 + nameLen, &zero, 4);
		for (int i = 0; i < square * 8; i += 8) memcpy(data + payloadLen + i + 14 + nameLen, &item, 2);
		memcpy(data + payloadLen, &nameLen, 2);
		memcpy(data + payloadLen + 2, worldName.c_str(), nameLen);
		memcpy(data + payloadLen + 2 + nameLen, &xSize, 4);
		memcpy(data + payloadLen + 6 + nameLen, &ySize, 4);
		memcpy(data + payloadLen + 10 + nameLen, &square, 4);
		BYTE* blockPtr = data + payloadLen + 14 + nameLen;
		for (int i = 0; i < square; i++) {
			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100)/* || (worldInfo->items[i].foreground%2)*/)
			{
				memcpy(blockPtr, &worldInfo->items[i].foreground, 2);
				int type = 0x00000000;
				// type 1 = locked
				if (worldInfo->items[i].water)
					type |= 0x04000000;
				if (worldInfo->items[i].glue)
					type |= 0x08000000;
				if (worldInfo->items[i].fire)
					type |= 0x10000000;
				if (worldInfo->items[i].red)
					type |= 0x20000000;
				if (worldInfo->items[i].green)
					type |= 0x40000000;
				if (worldInfo->items[i].blue)
					type |= 0x80000000;


				// int type = 0x04000000; = water
				// int type = 0x08000000 = glue
				// int type = 0x10000000; = fire
				// int type = 0x20000000; = red color
				// int type = 0x40000000; = green color
				// int type = 0x80000000; = blue color
				memcpy(blockPtr + 4, &type, 4);
				/*if (worldInfo->items[i].foreground % 2)
				{
				blockPtr += 6;
				}*/
			}
			else
			{
				memcpy(blockPtr, &zero, 2);
			}
			memcpy(blockPtr + 2, &worldInfo->items[i].background, 2);
			blockPtr += 8;
			/*if (blockPtr - data < allocMem - 2000) // realloc
			{
			int wLen = blockPtr - data;
			BYTE* oldData = data;


			data = new BYTE[allocMem + 16000];
			memcpy(data, oldData, allocMem);
			allocMem += 16000;
			delete oldData;
			blockPtr = data + wLen;

			}*/
		}
		memcpy(data + dataLen - 4, &smth, 4);
		ENetPacket * packet2 = enet_packet_create(data,
			dataLen,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		//enet_host_flush(server);
		for (int i = 0; i < square; i++) {
			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100))
				; // nothing
			else
			{
				PlayerMoving data;
				//data.packetType = 0x14;
				data.packetType = 0x3;

				//data.characterState = 0x924; // animation
				data.characterState = 0x0; // animation
				data.x = i % worldInfo->width;
				data.y = i / worldInfo->height;
				data.punchX = i % worldInfo->width;
				data.punchY = i / worldInfo->width;
				data.XSpeed = 0;
				data.YSpeed = 0;
				data.netID = -1;
				data.plantingTree = worldInfo->items[i].foreground;
				SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
			}
		}
		((PlayerInfo*)(peer->data))->currentWorld = worldInfo->name;

		//print_ip(peer->address.host);


		if (((PlayerInfo*)(peer->data))->haveGrowId) {

			PlayerInfo* p = ((PlayerInfo*)(peer->data));
			std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
			json j;
			ifff >> j;

			p->currentWorld = worldInfo->name;

			int bac, han, fac, hai, fee, pan, nec, shi, mas, anc, ban;
			bac = j["ClothBack"];
			han = j["ClothHand"];
			fac = j["ClothFace"];
			hai = j["ClothHair"];
			fee = j["ClothFeet"];
			pan = j["ClothPants"];
			nec = j["ClothNeck"];
			shi = j["ClothShirt"];
			mas = j["ClothMask"];
			anc = j["ClothAnces"];
			ban = j["isBanned"];
			/*vector <string>frns;
			if (j.count("friends") == 1) {
				for (int i = 0; i < j["friends"].size(); i++) {
					frns.push_back(j["friends"][i]);
				}
			}
			else {
				frns = {};
			}*/

			p->cloth_back = bac;
			p->cloth_hand = han;
			p->cloth_face = fac;
			p->cloth_hair = hai;
			p->cloth_feet = fee;
			p->cloth_pants = pan;
			p->cloth_necklace = nec;
			p->cloth_shirt = shi;
			p->cloth_mask = mas;

			sendClothes(peer);

			ifff.close();

		}

		delete data;

	}
}
void sendAction(ENetPeer* peer, int netID, string action)
{
	ENetPeer * currentPeer;
	string name = "";
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnAction"), action));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			memcpy(p2.data + 8, &netID, 4);
			ENetPacket * packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);


			enet_peer_send(currentPeer, 0, packet2);

			//enet_host_flush(server);
		}
	}
	delete p2.data;
}

void sendTake(ENetPeer* peer, int netID, int x, int y, int item)
{
	if (item >= 7196) return;
	if (item < 0) return;
	ENetPeer * currentPeer;
	string name = "";
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

				PlayerMoving data;
				data.packetType = 14;
				data.x = x;
				data.y = y;
				data.netID = netID;
				data.plantingTree = item;


				BYTE* raw = packPlayerMoving(&data);


				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_EVENT_TYPE_RECEIVE);
			}
		}
	}

void sendResetState(ENetPeer* peer)
{
	if (((PlayerInfo*)(peer->data))->isCursed)
	{
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer * currentPeer;
	//int state = getState(info);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 0x14;
			data.characterState = 0; // animation
			data.x = 1000;
			data.y = 100;
			data.punchX = 0;
			data.punchY = 0;
			data.XSpeed = 300;
			data.YSpeed = 600;
			data.netID = netID;
			data.plantingTree = 4096;
			BYTE* raw = packPlayerMoving(&data);
			int var = info->effect; // placing and breking
			memcpy(raw + 1, &var, 3);
			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->isDuctaped)
			{
				PlayerInfo* info = ((PlayerInfo*)(peer->data));
				int netID = info->netID;
				ENetPeer * currentPeer;
				//int state = getState(info);
				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer)) {
						PlayerMoving data;
						data.packetType = 0x14;
						data.characterState = 0; // animation
						data.x = 1000;
						data.y = 100;
						data.punchX = 0;
						data.punchY = 0;
						data.XSpeed = 300;
						data.YSpeed = 600;
						data.netID = netID;
						data.plantingTree = 8192;
						BYTE* raw = packPlayerMoving(&data);
						int var = info->effect; // placing and breking
						memcpy(raw + 1, &var, 3);
						SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
					}
					else
					{
						PlayerMoving data;
						data.packetType = 0x14;
						data.characterState = 0; // animation
						data.x = 1000;
						data.y = 100;
						data.punchX = 0;
						data.punchY = 0;
						data.XSpeed = 300;
						data.YSpeed = 600;
						data.netID = netID;
						data.plantingTree = 2;
						BYTE* raw = packPlayerMoving(&data);
						int var = info->effect; // placing and breking
						memcpy(raw + 1, &var, 3);
						SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
					}
				}

			}							
		}
		}
	}
}
void sendFrozenState(ENetPeer* peer)
{
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer * currentPeer;
	//int state = getState(info);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 0x14;
			data.characterState = 0; // animation
			data.x = 1000;
			data.y = 100;
			data.punchX = 0;
			data.punchY = 0;
			data.XSpeed = 300;
			data.YSpeed = 600;
			data.netID = netID;
			data.plantingTree = 2048;
			BYTE* raw = packPlayerMoving(&data);
			int var = info->effect; // placing and breking
			memcpy(raw + 1, &var, 3);
			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
		}
	}
}
void sendState(ENetPeer* peer) {
		//return; // TODO
		PlayerInfo* info = ((PlayerInfo*)(peer->data));
		int netID = info->netID;
		ENetPeer * currentPeer;
		int state = getState(info);
		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (isHere(peer, currentPeer)) {
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
				data.x = 1000;
				data.y = 100;
				data.punchX = 0;
				data.punchY = 0;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = state;
				BYTE* raw = packPlayerMoving(&data);
                int var = 0x808000; // placing and breking
                memcpy(raw+1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
		}
	// TODO
}









void sendfakeState(ENetPeer* peer) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer * currentPeer;
	int state = getState(info);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) != 999)
			{
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = 0; // animation
				data.x = 1000;
				data.y = 100;
				data.punchX = 0;
				data.punchY = 0;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = state;
				BYTE* raw = packPlayerMoving(&data);
				int var = info->effect; // placing and breking
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
		}
	}
	// TODO
}

void sendPlayerToPlayer(ENetPeer* peer, ENetPeer* otherpeer)
{
	{
		sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
	}
	WorldInfo info = worldDB.get(((PlayerInfo*)(otherpeer->data))->currentWorld);
	sendWorld(peer, &info);


	int x = ((PlayerInfo*)(otherpeer->data))->x;
	int y = ((PlayerInfo*)(otherpeer->data))->y;


	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));


	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);


	delete p.data;
	((PlayerInfo*)(peer->data))->netID = cId;
	onPeerConnect(peer);
	cId++;


	sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
}


void sendPlayerToWorld(ENetPeer* peer, PlayerInfo* player, string wrldname)
{
	



	toUpperCase(wrldname);
	if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
	{
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`eWhoops! `wThis `oworld`w can't be warped to, as it is used by `4System`w.``"));
		ENetPacket * packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);

		delete p.data;
	}
	else
	{
		{
			sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
		}

		WorldInfo info = worldDB.get(wrldname);
		sendWorld(peer, &info);



		int x = 3040;
		int y = 736;


		for (int j = 0; j < info.width*info.height; j++)
		{
			if (info.items[j].foreground == 6) {
				x = (j%info.width) * 32;
				y = (j / info.width) * 32;
			}
		}
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));


		ENetPacket * packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);


		delete p.data;
		((PlayerInfo*)(peer->data))->netID = cId;
		onPeerConnect(peer);
		cId++;


		sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);


		
	}
}

void debugcout()
{
	while (debugcout)
	{
		cout << "debug test 1";
	}
}

void sendWorldFail(ENetPeer* peer)
{
	if (!((PlayerInfo*)(peer->data))->isIn) return;
	vector<WorldInfo> worlds = worldDB.getRandomWorlds();
	string worldOffers = "default|";
	if (worlds.size() > 0) {
		worldOffers += worlds[0].name;
	}

	worldOffers += "\nadd_button|Showing: Random worlds``|_catselect_|0.6|3529161471|\n";
	for (int i = 0; i < worlds.size(); i++) {
		worldOffers += "add_floater|" + worlds[i].name + "|" + std::to_string(getPlayersCountInWorld(worlds[i].name)) + "|0.55|3529161471\n";
	}
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->lastworlds.size(); i++) {
		worldOffers += "add_floater|" + ((PlayerInfo*)(peer->data))->lastworlds[i] + "|" + std::to_string(getPlayersCountInWorld(((PlayerInfo*)(peer->data))->lastworlds[i])) + "|0.55|3417414143\n";
	}
	worldOffers += "add_floater|START|0|0.9|4281903354\n";
	//GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|428190335\7nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), worldOffers));
	ENetPacket* packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete p3.data;
	//enet_host_flush(server);
}

void sendWorldOffers(ENetPeer* peer)
{
	if (!((PlayerInfo*)(peer->data))->isIn) return;
	vector<WorldInfo> worlds = worldDB.getRandomWorlds();
	string worldOffers = "default|";
	if (worlds.size() > 0) {
		worldOffers += worlds[0].name;
	}

	worldOffers += "\nadd_button|Showing: Random worlds``|_catselect_|0.6|3529161471|\n";
	for (int i = 0; i < worlds.size(); i++) {
		worldOffers += "add_floater|" + worlds[i].name + "|" + std::to_string(getPlayersCountInWorld(worlds[i].name)) + "|0.55|3529161471\n";
	}
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->lastworlds.size(); i++) {
		worldOffers += "add_floater|" + ((PlayerInfo*)(peer->data))->lastworlds[i] + "|" + std::to_string(getPlayersCountInWorld(((PlayerInfo*)(peer->data))->lastworlds[i])) + "|0.55|3417414143\n";
	}
	worldOffers += "add_floater|START|0|0.9|3529161471\n";
	//GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|428190335\7nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), worldOffers));
	ENetPacket* packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete p3.data;
	//enet_host_flush(server);
}


void Respawn(ENetPeer* peer) {
	int x = 3040;
	int y = 736;

	WorldInfo* world = getPlyersWorld(peer);
	if (world)
	{

	for (int i = 0; i < world->width*world->height; i++)
	{
		if (world->items[i].foreground == 6) {
			x = (i%world->width) * 32;
			y = (i / world->width) * 32;
			//world->items[i].foreground = 8;
		}
	}
	{
		PlayerMoving data;
		data.packetType = 0x0;
		data.characterState = 0x924; // animation
		data.x = x;
		data.y = y;
		data.punchX = -1;
		data.punchY = -1;
		data.XSpeed = 0;
		data.YSpeed = 0;
		data.netID = ((PlayerInfo*)(peer->data))->netID;
		data.plantingTree = 0x0; // 0x0
		SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	}

	{
		int x = 3040;
		int y = 736;


		for (int i = 0; i < world->width*world->height; i++)
		{
			if (world->items[i].foreground == 6) {
				x = (i%world->width) * 32;
				y = (i / world->width) * 32;
				//world->items[i].foreground = 8;
			}
		}
		GamePacket p222 = packetEnd(appendString(createPacket(), "OnKilled"));
		memcpy(p222.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
		ENetPacket* packet222 = enet_packet_create(p222.data,
			p222.len,
			ENET_PACKET_FLAG_RELIABLE);

		enet_peer_send(peer, 0, packet222);
		delete p222.data;
		GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
		memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
		ENetPacket * packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);


		enet_peer_send(peer, 0, packet2);
		delete p2.data;
		//enet_host_flush(server);
	}
	{
		int x = 3040;
		int y = 736;


		for (int i = 0; i < world->width*world->height; i++)
		{
			if (world->items[i].foreground == 6) {
				x = (i%world->width) * 32;
				y = (i / world->width) * 32;
				//world->items[i].foreground = 8;
			}
		}
		GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
		memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
		ENetPacket * packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);


		enet_peer_send(peer, 0, packet2);
		delete p2.data;
		enet_host_flush(server);
	}
	}
}






BOOL WINAPI HandlerRoutine(DWORD dwCtrlType)
{
	saveAllWorlds();
	return FALSE;
}

std::ifstream::pos_type filesize(const char* filename)
{
	std::ifstream in(filename, std::ifstream::ate | std::ifstream::binary);
	return in.tellg();
}

uint32_t HashString(unsigned char* str, int len)
{
	if (!str) return 0;

	unsigned char* n = (unsigned char*)str;
	uint32_t acc = 0x55555555;

	if (len == 0)
	{
		while (*n)
			acc = (acc >> 27) + (acc << 5) + *n++;
	}
	else
	{
		for (int i = 0; i < len; i++)
		{
			acc = (acc >> 27) + (acc << 5) + *n++;
		}
	}
	return acc;

}

unsigned char* getA(string fileName, int* pSizeOut, bool bAddBasePath, bool bAutoDecompress)
{
	unsigned char* pData = NULL;
	FILE* fp = fopen(fileName.c_str(), "rb");
	if (!fp)
	{
		cout << "File not found" << endl;
		if (!fp) return NULL;
	}

	fseek(fp, 0, SEEK_END);
	*pSizeOut = ftell(fp);
	fseek(fp, 0, SEEK_SET);

	pData = (unsigned char*)new unsigned char[((*pSizeOut) + 1)];
	if (!pData)
	{
		printf("Out of memory opening %s?", fileName.c_str());
		return 0;
	}
	pData[*pSizeOut] = 0;
	fread(pData, *pSizeOut, 1, fp);
	fclose(fp);

	return pData;
}

void ServerInputPluginByplayingo()
{
	while (ServerInputPluginByplayingo)
	{
		std::string buffer;
		std::cin >> buffer;

		// example:
		if (buffer == "exit") // if exit is typed in server console:
		{
			// do stuff
			exit(0);
		}
		else if (buffer == "online")
		{
			string x;


			ENetPeer* currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;


				x.append(((PlayerInfo*)(currentPeer->data))->rawName + " (" + to_string(((PlayerInfo*)(currentPeer->data))->adminLevel) + ")" + " (" + ((PlayerInfo*)(currentPeer->data))->charIP + ")" + ", ");
			}
			x = x.substr(0, x.length() - 2);

			cout << "(PEERS CONNECTED!)" << x << endl;

		}
		else if (buffer == "saveall")
		{
			saveAllWorlds();
		}

		else if (buffer == "kickall")
		{
			ENetPeer* currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;

				enet_peer_disconnect_later(currentPeer, 0);
			}
		}
		if (buffer.find("addrole") != std::string::npos) {
			// todo

		}



		else if (buffer == "help" || buffer == "?")
		{
			cout << "Operator commands: " << "help " << "kickall " << "saveall " << "addrole " << "online " << "delete " << "maintenance " << "exit" << endl;
		}



	}
}
void loadConfig()
{
	std::ifstream ifs("config.json");
	if (ifs.is_open()) {


		json j;
		ifs >> j;

		serverhash = j["Hash"];
		serverport = j["port"];
		serverversion = j["Serverversion"];
		cout << "LTPS Config :" << endl;
		cout << "[LTPS MANAGER] hosting on port :" << serverhash << endl;
		cout << "[LTPS MANAGER] Server Version :" << serverversion << ".996" << endl;
		serverrolecount = j["rolecount"];
		json roles = j["roles"];
		for (int i = 0; i < serverrolecount; i++) {
			string insertUser = roles[i]["username"].get<string>();
			string insertUserPass = roles[i]["password"].get<string>();
			int insertUserLevel = roles[i]["adminlevel"];
			addAdmin(insertUser, insertUserPass, insertUserLevel);
		}



	}




	ifs.close();
	// finished
}
int main()
{
	string user;
	int count = 0, ch;
	string passwd = "";
	cout << "======================== Growtopia Private Server LTPS ========================" << endl;
	cout << "Server Created by Luc1Fer#1234 ";
wrong: //jump back from line 32
	cout << "\t Username: ";
	cin >> user;
	cout << "\t Password: ";
	while (ch = getch()) //assign Ascii value to ch
	{
		if (ch == 13) { //check ch after press RETURN key;
			if ((passwd == "khalifa") && (user == "khalifa")) {
				cout << endl << endl << "======================================" << endl;
				cout << "\t Welcome back " << user << endl;
					cout << "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" << endl;
					cout << "Access Granted!" << endl;
					std::thread first(ServerInputPluginByplayingo);
					first.detach();

					loadConfig();
					{
						{
							// 999 = owner/dev/admin 666 = mod/supermod 333 = vip 166 = influencer


						}
						enet_initialize();;
						if (atexit(saveAllWorlds)) {
							cout << "Worlds won't be saved for this session..." << endl;
						}
						/*if (RegisterApplicationRestart(L" -restarted", 0) == S_OK)
						{
						cout << "Autorestart is ready" << endl;
						}
						else {
						cout << "Binding autorestart failed!" << endl;
						}
						Sleep(65000);
						int* p = NULL;
						*p = 5;*/
						SetConsoleCtrlHandler(HandlerRoutine, true);
						addAdmin("luc1fer", "Kk123Aa1", 999);
						addAdmin("luc1fer", "Kk123Aa1", 333);
						addAdmin("luc1fer", "Kk123Aa1", 666);
						int itemdathash;

						// load items.dat
						{
							std::ifstream file("items.dat", std::ios::binary | std::ios::ate);
							itemsDatSize = file.tellg();



							itemsDat = new BYTE[60 + itemsDatSize];
							string asdf = "0400000010000000FFFFFFFF000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
							for (int i = 0; i < asdf.length(); i += 2)
							{
								char x = ch2n(asdf[i]);
								x = x << 4;
								x += ch2n(asdf[i + 1]);
								memcpy(itemsDat + (i / 2), &x, 1);
								if (asdf.length() > 60 * 2) throw 0;
							}
							memcpy(itemsDat + 56, &itemsDatSize, 4);
							file.seekg(0, std::ios::beg);


							if (file.read((char*)(itemsDat + 60), itemsDatSize))
							{
								uint8_t* pData;
								int size = 0;
								const char filename[] = "items.dat";
								size = filesize(filename);
								pData = getA((string)filename, &size, false, false);
								cout << "Updating items data success! Hash: " << HashString((unsigned char*)pData, size) << endl;
								itemdathash = HashString((unsigned char*)pData, size);
								file.close();
							}
							else {
								cout << "Updating item data failed!" << endl;
							}
						}



						//world = generateWorld();


						worldDB.get("TEST");
						worldDB.get("MAIN");
						worldDB.get("NEW");
						worldDB.get("ADMIN");
						ENetAddress address;
						/* Bind the server to the default localhost.     */
						/* A specific host address can be specified by   */
						enet_address_set_host(&address, "0.0.0.0");
						//address.host = ENET_HOST_ANY;
						/* Bind the server to port 1234. */
						address.port = 17091; // any port serverport
						server = enet_host_create(&address /* the address to bind the server host to */,
							1024      /* allow up to 32 clients and/or outgoing connections */,
							2      /* allow up to 2 channels to be used, 0 and 1 */,
							4096      /* assume any amount of incoming bandwidth */,
							0      /* assume any amount of outgoing bandwidth */);
						if (server == NULL)
						{
							fprintf(stderr,
								"An error occurred while trying to create an ENet server host.\n");
							while (1);
							exit(EXIT_FAILURE);
						}
						server->checksum = enet_crc32;
						enet_host_compress_with_range_coder(server);

						buildItemsDatabase();
						cout << "Connected to the server!" << endl;

						ENetEvent event;
						/* Wait up to 1000 milliseconds for an event. */
						while (true)
							while (enet_host_service(server, &event, 1000) > 0)
							{

								ENetPeer* peer = event.peer;

								switch (event.type)
								{
								case ENET_EVENT_TYPE_CONNECT:
								{
#ifdef TOTAL_LOG
									printf("A new client connected.\n");
#endif
									/* Store any relevant client information here. */
														  //event.peer->data = "Client information";



									ENetPeer* currentPeer;
									int count = 0;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (currentPeer->address.host == peer->address.host)
											count++;

									}


									//char clientConnection[32];
									//((PlayerInfo*)(peer->data))->charIP = enet_address_get_host_ip(&peer->address, clientConnection, 32);

									event.peer->data = new PlayerInfo;



									/* Get the string ip from peer */
									char clientConnection[16];
									enet_address_get_host_ip(&peer->address, clientConnection, 16);
									((PlayerInfo*)(peer->data))->charIP = clientConnection;


									if (count > 3)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rToo many accounts are logged on from this IP. Log off one account before playing please.``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										//enet_host_flush(server);
										enet_peer_disconnect_later(peer, 0);
									}
									else {
										sendData(peer, 1, 0, 0);
									}




									continue;
								}
								case ENET_EVENT_TYPE_RECEIVE:
								{




									if (((PlayerInfo*)(peer->data))->isUpdating)
									{
										cout << "packet drop" << endl;
										continue;
									}

									if (((PlayerInfo*)(peer->data))->forcegemUpdate)
									{
										/*((PlayerInfo*)(peer->data))->forcegemUpdate = false;

										std::ifstream ifszx("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string contentix((std::istreambuf_iterator<char>(ifszx)),
											(std::istreambuf_iterator<char>()));

										int updvgem = atoi(contentix.c_str());

										GamePacket ppx = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updvgem));
										ENetPacket * packetppx = enet_packet_create(ppx.data,
											ppx.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packetppx);
										delete ppx.data;


										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`8You have received some `4gems`8, pal!"));
										ENetPacket * packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;*/

									}
									if (((PlayerInfo*)(event.peer->data))->wrongpass == true)
									{
										if (((PlayerInfo*)(peer->data))->isIn) {
											enet_peer_disconnect_later(peer, 0);

										}
										else
										{
											string text = "action|log\nmsg|`4GrowID or password is wrong! `7Incase you want to recover/change your account/password, contact ! Luc1Fer#1234.``";
											string text3 = "action|logon_fail\n";
											string dc = "https://discord.gg/zW25ynC";
											string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


											BYTE* data = new BYTE[5 + text.length()];
											BYTE* data3 = new BYTE[5 + text3.length()];
											BYTE* dataurl = new BYTE[5 + url.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);

											memcpy(dataurl, &type, 4);
											memcpy(dataurl + 4, url.c_str(), url.length());
											memcpy(dataurl + 4 + url.length(), &zero, 1);

											memcpy(data3, &type, 4);
											memcpy(data3 + 4, text3.c_str(), text3.length());
											memcpy(data3 + 4 + text3.length(), &zero, 1);

											ENetPacket* p = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, p);
											ENetPacket* p3 = enet_packet_create(dataurl,
												5 + url.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, p3);
											ENetPacket* p2 = enet_packet_create(data3,
												5 + text3.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, p2);

											delete data;
											delete dataurl;
											delete data3;

											enet_peer_disconnect_later(peer, 0);
										}
									}


									if (((PlayerInfo*)(event.peer->data))->player_age == "")
									{
										enet_peer_disconnect_now(peer, 0);
									}

									ENetPeer* currentPeer;
									int count = 0;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;



										std::string mac(((PlayerInfo*)(currentPeer->data))->mac);
										Remove(mac, ":");
										std::string currentip = std::to_string(currentPeer->address.host);
										//((PlayerInfo*)(event.peer->data))->player_age
										bool exist = false;
										if (std::experimental::filesystem::exists("devicebans/" + currentip + ".txt") || std::experimental::filesystem::exists("ridbans/" + ((PlayerInfo*)(event.peer->data))->rid + ".txt") || std::experimental::filesystem::exists("sidbans/" + ((PlayerInfo*)(event.peer->data))->wkid + ".txt") || std::experimental::filesystem::exists("aidbans/" + ((PlayerInfo*)(event.peer->data))->aid + ".txt") || std::experimental::filesystem::exists("vidbans/" + ((PlayerInfo*)(event.peer->data))->vid + ".txt") || std::experimental::filesystem::exists("gidbans/" + ((PlayerInfo*)(event.peer->data))->gid + ".txt") || std::experimental::filesystem::exists("macbans/" + mac + ".txt"))
										{

											exist = true;
										}
										else
										{
											exist = false;
										}


										if (exist == true)
										{
											if (peer->address.host == currentPeer->address.host)
											{

												if (((PlayerInfo*)(peer->data))->isIn) {
													enet_peer_disconnect_later(peer, 0);

												}
												else
												{

													string text = "action|log\nmsg|`4Sorry, this device or location has been suspended. `5Contact ! Luc1Fer#1234 on discord``! `wPlease do not request an unban if you know that you have done something wrong.";
													string text3 = "action|logon_fail\n";
													string dc = "https://discord.gg/zW25ynC";
													string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


													BYTE* data = new BYTE[5 + text.length()];
													BYTE* data3 = new BYTE[5 + text3.length()];
													BYTE* dataurl = new BYTE[5 + url.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);

													memcpy(dataurl, &type, 4);
													memcpy(dataurl + 4, url.c_str(), url.length());
													memcpy(dataurl + 4 + url.length(), &zero, 1);

													memcpy(data3, &type, 4);
													memcpy(data3 + 4, text3.c_str(), text3.length());
													memcpy(data3 + 4 + text3.length(), &zero, 1);

													ENetPacket* p = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, p);
													ENetPacket* p3 = enet_packet_create(dataurl,
														5 + url.length(),
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, p3);
													ENetPacket* p2 = enet_packet_create(data3,
														5 + text3.length(),
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, p2);

													delete data;
													delete dataurl;
													delete data3;

													enet_peer_disconnect_later(peer, 0);
												}
											}
										}
									}

									/*printf("A packet of length %u containing %s was received from %s on channel %u.\n",
									event.packet->dataLength,
									event.packet->data,
									event.peer->data,
									event.channelID);
									cout << (int)*event.packet->data << endl;*/
									//cout << text_encode(getPacketData((char*)event.packet->data));
									/*for (int i = 0; i < event.packet->dataLength; i++)
									{
									cout << event.packet->data[i];
									}
									sendData(7, 0, 0);
									string x = "eventType|0\neventName|102_PLAYER.AUTHENTICATION\nAuthenticated|0\nAuthentication_error|6\nDevice_Id|^^\nGrow_Id|0\nName|^^Elektronik\nWordlock_balance|0\n";
									//string x = "eventType | 0\neventName | 102_PLAYER.AUTHENTICATION\nAuthenticated | 0\nAuthentication_error | 6\nDevice_Id | ^^\nGrow_Id | 0\nName | ^^Elektronik\nWorldlock_balance | 0\n";
									sendData(6, (char*)x.c_str(), x.length());
									string y = "action|quit\n";
									sendData(3, (char*)y.c_str(), y.length());
									cout << endl;
									string asdf = "0400000001000000FFFFFFFF0000000008000000000000000000000000000000000000000000000000000000000000000000000000000000400000000600020E0000004F6E53656E64546F5365727665720109ED4200000209834CED00030910887F0104020D0000003230392E35392E3139302E347C05090100000000C";
									//asdf = "0400000001000000FFFFFFFF000000000800000000000000000000000000000000000000000000000000000000000000000000000000000040000000060002220000004F6E53757065724D61696E53746172744163636570744C6F676F6E464232313131330109ED4200000209834CED00030910887F0104020D0000003230392E35392E3139302E347C05090100000000C";
									ENetPacket * packet = enet_packet_create(0,
									asdf.length()/2,
									ENET_PACKET_FLAG_RELIABLE);
									for (int i = 0; i < asdf.length(); i += 2)
									{
									char x = ch2n(asdf[i]);
									x = x << 4;
									x += ch2n(asdf[i + 1]);
									memcpy(packet->data + (i / 2), &x, 1);
									}
									enet_peer_send(peer, 0, packet);
									enet_host_flush(server);
									/* Clean up the packet now that we're done using it. */
									//enet_packet_destroy(event.packet);
									//sendData(7, 0, 0);
									int messageType = GetMessageTypeFromPacket(event.packet);
									//cout << "Packet type is " << messageType << endl;
									//cout << (event->packet->data+4) << endl;
									WorldInfo* world = getPlyersWorld(peer);
									switch (messageType) {
									case 2:
									{
										//cout << GetTextPointerFromPacket(event.packet) << endl;

										string cch = GetTextPointerFromPacket(event.packet);
										string str = cch.substr(cch.find("text|") + 5, cch.length() - cch.find("text|") - 1);


										if (cch.find("action|wrench") == 0) {
											vector<string> ex = explode("|", cch);


											stringstream ss;


											ss << ex[3];


											string temp;
											int found;
											while (!ss.eof()) {


												ss >> temp;


												if (stringstream(temp) >> found)
													//cout << found;
													((PlayerInfo*)(peer->data))->wrenchsession = found;


												temp = "";
											}
											string worldsowned;

											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;


												if (isHere(peer, currentPeer)) {
													if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->wrenchsession) {

														((PlayerInfo*)(peer->data))->lastInfo = ((PlayerInfo*)(currentPeer->data))->rawName;
														((PlayerInfo*)(peer->data))->lastInfoname = ((PlayerInfo*)(currentPeer->data))->tankIDName;

														string name = ((PlayerInfo*)(currentPeer->data))->displayName;
														string rawnam = ((PlayerInfo*)(peer->data))->rawName;
														string rawnamofwrench = ((PlayerInfo*)(currentPeer->data))->rawName;
														if (rawnamofwrench != rawnam)
														{

															if (rawnamofwrench != "")
															{
																std::ifstream ifszsx("gemdb/" + ((PlayerInfo*)(peer->data))->lastInfo + ".txt");
																std::string contentch2x((std::istreambuf_iterator<char>(ifszsx)),
																	(std::istreambuf_iterator<char>()));
																if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(currentPeer->data))->rawName) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
																	if (world->owner == ((PlayerInfo*)(peer->data))->rawName && ((PlayerInfo*)(peer->data))->haveGrowId || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333)
																	{
																		if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333)
																		{
																			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`w" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|\nadd_button|punishview|`!Punish/View|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
																			ENetPacket* packet = enet_packet_create(p.data,
																				p.len,
																				ENET_PACKET_FLAG_RELIABLE);
																			enet_peer_send(peer, 0, packet);
																			delete p.data;
																		}
																		else
																		{
																			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
																			ENetPacket* packet = enet_packet_create(p.data,
																				p.len,
																				ENET_PACKET_FLAG_RELIABLE);
																			enet_peer_send(peer, 0, packet);
																			delete p.data;
																		}
																	}
																	else
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\n\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		delete p.data;
																	}
																}
																else {
																	if (world->owner == ((PlayerInfo*)(peer->data))->rawName && ((PlayerInfo*)(peer->data))->haveGrowId || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333)
																	{
																		if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333)
																		{
																			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`w" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|punishview|`!Punish/View|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\n\nadd_button|addfriendrnbutton|`wAdd as friend|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
																			ENetPacket* packet = enet_packet_create(p.data,
																				p.len,
																				ENET_PACKET_FLAG_RELIABLE);
																			enet_peer_send(peer, 0, packet);
																			delete p.data;
																		}
																		else
																		{
																			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\n\nadd_button|addfriendrnbutton|`wAdd as friend|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
																			ENetPacket* packet = enet_packet_create(p.data,
																				p.len,
																				ENET_PACKET_FLAG_RELIABLE);
																			enet_peer_send(peer, 0, packet);
																			delete p.data;
																		}
																	}
																	else
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\n\nadd_button|addfriendrnbutton|`wAdd as friend|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		delete p.data;
																	}
																}
															}
															else
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
														}
														else
														{
															std::ifstream ifszs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentch2((std::istreambuf_iterator<char>(ifszs)),
																(std::istreambuf_iterator<char>()));
															if (((PlayerInfo*)(peer->data))->isAAP == true)
															{
																if (((PlayerInfo*)(peer->data))->haveGrowId == true)
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|disableaap|`5Disable AAP`w``|noflags|0|0|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;
																}
																else
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;
																}
															}
															else
															{
																if (((PlayerInfo*)(peer->data))->haveGrowId == true)
																{
																	std::ostringstream oss;
																	if (!((PlayerInfo*)(peer->data))->worldsowned.empty())
																	{
																		std::copy(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end() - 1,
																			std::ostream_iterator<string>(oss, " "));

																		// Now add the last element with no delimiter
																		oss << ((PlayerInfo*)(peer->data))->worldsowned.back();
																	}
																	else {
																		string oss = "You dont have any worlds!";
																	}
																	int levels = ((PlayerInfo*)(peer->data))->level;
																	int xp = ((PlayerInfo*)(peer->data))->xp;
																	int rubble = ((PlayerInfo*)(peer->data))->rubble;
																	string currentworld = ((PlayerInfo*)(peer->data))->currentWorld;
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_player_info|" + name + "|" + std::to_string(levels) + "|" + std::to_string(xp) + "|300|\nadd_spacer|small|\nadd_button|passbutton|`4Change Password``|\nadd_textbox|`oCurrent time: `b" + currentDateTime() + "|left|\nadd_textbox|`oYou have: `w" + to_string(rubble) + " `orubbles.|left|\nadd_textbox|`oYou Currently Have `w" + contentch2 + " `oGems.|left|\nadd_textbox|`oCurrent World: `w" + currentworld + "|left|\nadd_textbox|`oWorlds Owned:" + oss.str() + "|left|4|\nadd_spacer|small|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;
																}
																else
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "        |left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;
																}
															}
														}

													}


												}


											}
										}
										if (cch.find("action|respawn") == 0 || cch.find("action|respawn_spike") == 0)
										{
											Respawn(peer);
										}
										if (cch.find("action|respawn_spike") == 0)
										{
											//cout << "hey";
											//((PlayerInfo*)(peer->data))->canLeave = false;
											int x = 3040;
											int y = 736;


											if (!world) continue;


											for (int i = 0; i < world->width * world->height; i++)
											{
												if (world->items[i].foreground == 6) {
													x = (i % world->width) * 32;
													y = (i / world->width) * 32;
													//world->items[i].foreground = 8;
												}
											}
											{
												PlayerMoving data;
												data.packetType = 0x0;
												data.characterState = 0x924; // animation
												data.x = x;
												data.y = y;
												data.punchX = -1;
												data.punchY = -1;
												data.XSpeed = 0;
												data.YSpeed = 0;
												data.netID = ((PlayerInfo*)(peer->data))->netID;
												data.plantingTree = 0x0; // 0x0
												SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
											}

											{
												int x = 3040;
												int y = 736;


												for (int i = 0; i < world->width * world->height; i++)
												{
													if (world->items[i].foreground == 6) {
														x = (i % world->width) * 32;
														y = (i / world->width) * 32;
														//world->items[i].foreground = 8;
													}
												}
												GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
												memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(peer, 0, packet2);
												string text = "action|play_sfx\nfile|audio/male_scream.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);

												{
													ENetPacket* packetres = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													if (isHere(peer, currentPeer)) {
													}
												}
												delete p2.data;
												//enet_host_flush(server);
											}
											{
												int x = 3040;
												int y = 736;


												for (int i = 0; i < world->width * world->height; i++)
												{
													if (world->items[i].foreground == 6) {
														x = (i % world->width) * 32;
														y = (i / world->width) * 32;
														//world->items[i].foreground = 8;
													}
												}
												GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
												memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												enet_host_flush(server);


											}
#ifdef TOTAL_LOG		
											cout << "Respawning... " << endl;
#endif
										}
										if (cch.find("action|friends") == 0)
										{
											if (((PlayerInfo*)(peer->data))->joinguild == true) {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|showguild|Show Guild Members``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											else {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|createguildinfo|Create Guild``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
										}
										if (cch.find("action|growid") == 0)
										{
#ifndef REGISTRATION
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Registration is not supported yet!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
												//enet_host_flush(server);
											}
#endif
#ifdef REGISTRATION
											//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGet a GrowID``|left|206|\n\nadd_spacer|small|\nadd_textbox|A `wGrowID `wmeans `oyou can use a name and password to logon from any device.|\nadd_spacer|small|\nadd_textbox|This `wname `owill be reserved for you and `wshown to other players`o, so choose carefully!|\nadd_text_input|username|GrowID||30|\nadd_text_input|password|Password||100|\nadd_text_input|passwordverify|Password Verify||100|\nadd_textbox|Your `wemail address `owill only be used for account verification purposes and won't be spammed or shared. If you use a fake email, you'll never be able to recover or change your password.|\nadd_text_input|email|Email||100|\nadd_textbox|Your `wDiscord ID `owill be used for secondary verification if you lost access to your `wemail address`o! Please enter in such format: `wdiscordname#tag`o. Your `wDiscord Tag `ocan be found in your `wDiscord account settings`o.|\nadd_text_input|pin|Discord||100|\nend_dialog|register|Cancel|Get My GrowID!|\n"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
#endif
										}
										if (cch.find("action|store") == 0) // to do and sound (for example breaking when no access is to do) and accessing on wls.
										{
											if (((PlayerInfo*)(peer->data))->haveGrowId == true)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label|small|`wWelcome to the `2LTPS `wStore!|left|\nadd_smalltext|`wPlease select the button that you'd like to get more info on. Want to get `1VIP `wStatus? Want to get `#Moderator `wStatus? Then tap on Purchase `4in-game assets`w.|\nadd_spacer|small|\nadd_button|no|`wPurchase `9in-game items|\nadd_button|store|`wPurchase `4in-game assets|\nadd_spacer|small|\nend_dialog|chc0|Cancel|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
											else
											{
#ifdef REGISTRATION
												//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGet a GrowID``|left|206|\n\nadd_spacer|small|\nadd_textbox|A `wGrowID `wmeans `oyou can use a name and password to logon from any device.|\nadd_spacer|small|\nadd_textbox|This `wname `owill be reserved for you and `wshown to other players`o, so choose carefully!|\nadd_text_input|username|GrowID||30|\nadd_text_input|password|Password||100|\nadd_text_input|passwordverify|Password Verify||100|\nadd_textbox|Your `wemail address `owill only be used for account verification purposes and won't be spammed or shared. If you use a fake email, you'll never be able to recover or change your password.|\nadd_text_input|email|Email||100|\nadd_textbox|Your `wDiscord ID `owill be used for secondary verification if you lost access to your `wemail address`o! Please enter in such format: `wdiscordname#tag`o. Your `wDiscord Tag `ocan be found in your `wDiscord account settings`o.|\nadd_text_input|pin|Discord||100|\nend_dialog|register|Cancel|Get My GrowID!|\n"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
#endif


												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`7Create a GrowID to access the store, it's free!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
											//enet_host_flush(server);
										}
										if (cch.find("action|info") == 0)
										{
											std::stringstream ss(cch);
											std::string to;
											int id = -1;
											int count = -1;
											while (std::getline(ss, to, '\n')) {
												vector<string> infoDat = explode("|", to);
												if (infoDat.size() == 3) {
													if (infoDat[1] == "itemID") id = atoi(infoDat[2].c_str());
													if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
												}
											}
											if (id == -1 || count == -1) continue;
											if (itemDefs.size() < id || id < 0) continue;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);


											//enet_host_flush(server);
											delete p.data;
										}

										if (cch.find("action|info") == 0)
										{
											std::stringstream ss(cch);
											std::string to;
											int id = -1;
											int count = -1;
											while (std::getline(ss, to, '\n')) {
												vector<string> infoDat = explode("|", to);
												if (infoDat.size() == 3) {
													if (infoDat[1] == "itemID") id = atoi(infoDat[2].c_str());
													if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
												}
											}
											if (id == -1 || count == -1) continue;
											if (itemDefs.size() < id || id < 0) continue;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);


											//enet_host_flush(server);
											delete p.data;
										}if (cch.find("action|dialog_return\ndialog_name|door_edit") == 0) {
											if (world != NULL) {
												if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(world->owner)) {
													std::stringstream ss(GetTextPointerFromPacket(event.packet));
													std::string to;
													int x = 0;
													int y = 0;
													bool created = false;
													string text = "";
													string wo = "";
													string idd = "";
													string iop = "";
													while (std::getline(ss, to, '\n')) {
														string id = to.substr(0, to.find("|"));
														string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
														if (id == "tilex")
														{
															x = atoi(act.c_str());

														}
														else if (id == "tiley")
														{
															y = atoi(act.c_str());
														}
														else if (id == "ch3")
														{
															text = act;
															created = true;
														}
														else if (id == "wo3")
														{
															wo = act;
														}
														else if (id == "id")
														{
															idd = act;
														}
														else if (id == "iop")
														{
															iop = act;
														}
														if (created == true) {
															if (text == "__%&P&%__") {
																sendConsoleMsg(peer, ">> Can't use this!");
																continue;
															}
															if (text.length() > 0) {
																if (text.length() < 255) {
																	WorldInfo* worldInfo = getPlyersWorld(peer);
																	int squaresign = ((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * 100);
																	updateDoor(peer, worldInfo->items[squaresign].foreground, squaresign % worldInfo->width, squaresign / worldInfo->width, text);
																	string world = ((PlayerInfo*)(peer->data))->currentWorld;
																	std::ofstream outfile("labels/" + world + std::to_string(x) + std::to_string(y) + ".txt");

																	outfile << text;

																	outfile.close();

																	std::ofstream outfile1("destination/" + world + std::to_string(x) + std::to_string(y) + ".txt");

																	outfile1 << wo;

																	outfile1.close();

																	std::ofstream outfile2("id/" + world + std::to_string(x) + std::to_string(y) + ".txt");

																	outfile2 << idd;

																	outfile2.close();

																	std::ofstream outfile3("ids/" + idd + ".txt");

																	outfile3 << std::to_string(x) + "/" + std::to_string(y);

																	outfile3.close();

																	std::ofstream outfile4("iop/" + world + std::to_string(x) + std::to_string(y) + ".txt");

																	outfile4 << iop;

																	outfile4.close();


																}
															}
														}
													}
												}
											}
										}
										if (cch.find("action|dialog_return\ndialog_name|sign_edit") == 0) {
											if (world != NULL) {
												if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(world->owner)) {
													std::stringstream ss(GetTextPointerFromPacket(event.packet));
													std::string to;
													int x = 0;
													int y = 0;
													bool created = false;
													string text = "";
													string world = ((PlayerInfo*)(peer->data))->currentWorld;
													while (std::getline(ss, to, '\n')) {
														string id = to.substr(0, to.find("|"));
														string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
														if (id == "tilex")
														{
															x = atoi(act.c_str());

														}
														else if (id == "tiley")
														{
															y = atoi(act.c_str());
														}
														else if (id == "ch3")
														{
															text = act;
															created = true;
														}
														if (created == true) {
															if (text == "__%&P&%__") {
																sendConsoleMsg(peer, ">> Can't use this!");
																continue;
															}
														}
														if (text.length() < 255) {
															WorldInfo* worldInfo = getPlyersWorld(peer);
															int squaresign = ((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * 100);
															updateSign(peer, worldInfo->items[squaresign].foreground, squaresign % worldInfo->width, squaresign / worldInfo->width, text, worldInfo->items[squaresign].background);
															worldInfo->items[squaresign].text = text;
														}
													}
												}
											}
										}

										if (cch.find("action|dialog_return") == 0)
										{
											std::stringstream ss(cch);
											std::string to;
											bool isGuildDialog = false;
											string gguildname;
											string gguildstatement;
											string gguildflagbg;
											string gguildflagfg;
											string btn = "";
											bool isRegisterDialog = false;
											string username = "";
											string restrictedname = "";
											string password = "";
											string passwordverify = "";
											string password2 = "";
											string username2 = "";
											string password2verify = "";
											string oldpass = "";
											string newgrowid = "";
											//string email = "";
											string discord = "";
											string netid = "";
											string pin;
											string text = "";//done!

											bool isDropDialog = false;
											string dropitemcount = "";
											bool isPasswordDialog = false;
											bool isGrowidDialog = false;
											bool isFindDialog = false;

											bool isTradeDialog = false;

											bool isBotDialog = false;

											bool Accesspicker = false;

											bool signszzz = false;
											string itemFind = "";

											string strBuyOffer = "";
											string strResult = "";
											int Result = 68662362;
											int buyOffer;

											string dialog_name = "";

											while (std::getline(ss, to, '\n')) {
												vector<string> infoDat = explode("|", to);

												if (infoDat.size() == 2) {
													if (infoDat[0] == "buttonClicked") btn = infoDat[1];
													if (infoDat[0] == "dialog_name" && infoDat[1] == "searchitem1337")
													{
														isFindDialog = true;
													}
													if (infoDat[0] == "dialog_name" && infoDat[1] == "findid")
													{
														isFindDialog = true;
													}
													if (infoDat[0] == "dialog_name" && infoDat[1] == "signsshitit")
													{
														signszzz = true;
													}
													if (infoDat[0] == "dialog_name" && infoDat[1] == "reqoffer")
													{
														isTradeDialog = true;
													}
													if (infoDat[0] == "dialog_name" && infoDat[1] == "antibotres")
													{
														isBotDialog = true;
													}
													if (infoDat[0] == "netid") {
														netid = infoDat[1];
														Accesspicker = true;
													}
													if (infoDat[0] == "dialog_name" && infoDat[1] == "dropdialog")
													{
														isDropDialog = true;
													}
													if (infoDat[0] == "dialog_name" && infoDat[1] == "guildconfirm")
													{
														isGuildDialog = true;
													}
													if (isDropDialog) {
														if (infoDat[0] == "dropitemcount") dropitemcount = infoDat[1];
														int x;

														try {
															x = stoi(dropitemcount);
														}
														catch (std::invalid_argument& e) {
															GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Please enter how many u want to drop"));
															ENetPacket* packet = enet_packet_create(ps.data,
																ps.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete ps.data;
															continue;
														}
														if (x < 0 || x >200) {
															GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "That too many or too less to drop"));
															ENetPacket* packet = enet_packet_create(ps.data,
																ps.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete ps.data;
															continue;
														}

														else {


														}
													}
													if (signszzz) {
														if (infoDat[0] == "text")
														{
															text = infoDat[1];
															((PlayerInfo*)(peer->data))->SignPosX;
															((PlayerInfo*)(peer->data))->SignPosY;
															int yy = ((PlayerInfo*)(event.peer->data))->SignPosX / 32;
															int xx = ((PlayerInfo*)(event.peer->data))->SignPosY / 32;
															int posX = ((PlayerInfo*)(event.peer->data))->posX / 32; // good value is actually 31.16-31.33
															int posY = ((PlayerInfo*)(event.peer->data))->posY / 32;
															string world = ((PlayerInfo*)(peer->data))->currentWorld;
															string posx = std::to_string(yy);
															string posy = std::to_string(xx);

															for (char c : text)

																if (c < 0x18 || std::all_of(text.begin(), text.end(), isspace))
																{

																}

															std::ofstream outfile("signs/" + world + posx + posy + ".txt");

															outfile << text;

															outfile.close();
														}
													}
													if (isBotDialog)
													{
														if (infoDat[0] == "antibot")
														{
															strResult = infoDat[1];

															bool contains_non_int
																= !std::regex_match(strBuyOffer, std::regex("^[0-9]+$"));

															if (contains_non_int == true)
															{
																Result = atoi(strResult.c_str());
																((PlayerInfo*)(peer->data))->Endresult = Result;
															}

															if (((PlayerInfo*)(peer->data))->resultnbr1 + ((PlayerInfo*)(peer->data))->resultnbr2 != Result)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4[PLAY-Captcha]: Captcha failed."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;

																((PlayerInfo*)(peer->data))->Endresult = Result;

																enet_peer_disconnect_later(peer, 0);
																cout << "[CAPTCHA FAIL] user typed: " << Result << endl;
																cout << "[CAPTCHA FAIL] answer was: " << ((PlayerInfo*)(peer->data))->resultnbr1 + ((PlayerInfo*)(peer->data))->resultnbr2 << endl;
															}
														}
													}
													if (isFindDialog) {
														if (infoDat[0] == "item") itemFind = infoDat[1];
													}
													if (isTradeDialog) {
														if (infoDat[0] == "worldoffer")
														{
															strBuyOffer = infoDat[1];

															bool contains_non_int
																= !std::regex_match(strBuyOffer, std::regex("^[0-9]+$"));

															if (contains_non_int == true)
															{
																GamePacket pfi = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Requesting offer failed... You may only use positive numbers to begin a trade!"));
																ENetPacket* packetfi = enet_packet_create(pfi.data,
																	pfi.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packetfi);

																delete pfi.data;
															}
															else
															{
																buyOffer = std::atoi(strBuyOffer.c_str());

																GamePacket psu = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Requested`w " + ((PlayerInfo*)(peer->data))->lastInfo + " `9for a world-trade (you sell world for`w " + strBuyOffer + " `4Gems`9)."));
																ENetPacket* packetsu = enet_packet_create(psu.data,
																	psu.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packetsu);
																delete psu.data;


																ENetPeer* currentPeerpx;

																for (currentPeerpx = server->peers;
																	currentPeerpx < &server->peers[server->peerCount];
																	++currentPeerpx)
																{
																	if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
																		continue;

																	if (isHere(peer, currentPeerpx))
																	{




																		if (((PlayerInfo*)(currentPeerpx->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
																		{
																			GamePacket psu = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ((PlayerInfo*)(peer->data))->displayName + " `9requested you for a world-trade (he/she sells world for`w " + strBuyOffer + " `4Gems`9). Do /tradeworld if you want to buy, /decline if you dont accept the trade. [TRADE COMING TOMORROW TODAY ITS ONLY DESIGN NOT WORK!]"));
																			ENetPacket* packetsu = enet_packet_create(psu.data,
																				psu.len,
																				ENET_PACKET_FLAG_RELIABLE);
																			enet_peer_send(currentPeerpx, 0, packetsu);
																			delete psu.data;

																			((PlayerInfo*)(peer->data))->lastBuyer = ((PlayerInfo*)(currentPeerpx->data))->rawName;
																			((PlayerInfo*)(currentPeerpx->data))->lastSeller = ((PlayerInfo*)(peer->data))->rawName;
																			((PlayerInfo*)(currentPeerpx->data))->lastTradeAmount = buyOffer;
																			((PlayerInfo*)(peer->data))->lastTradeAmount = buyOffer;
																			((PlayerInfo*)(currentPeerpx->data))->lastSellWorld = getPlyersWorld(currentPeerpx)->name;
																			((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
																		}
																	}
																}
															}
														}


													}
													if (Accesspicker) {
														if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

															ENetPeer* currentPeer;
															for (currentPeer = server->peers;
																currentPeer < &server->peers[server->peerCount];
																++currentPeer)
															{
																if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																	continue;
																if (((PlayerInfo*)(currentPeer->data))->netID == stoi(netid)) {
																	if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->rawName) {
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You can't access yourself"));
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		delete p.data;
																	}
																	else {
																		WorldInfo info;
																		world->worldaccess.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You got world access!"));
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(currentPeer, 0, packet);
																		delete p.data;
																		GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You gave world access to player! (To remove acc type /unacc name!)"));
																		ENetPacket* packet2 = enet_packet_create(p2.data,
																			p2.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet2);
																		delete p2.data;
																		//enet_host_flush(server);
																		string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
																		BYTE* data = new BYTE[5 + text.length()];
																		BYTE zero = 0;
																		int type = 3;
																		memcpy(data, &type, 4);
																		memcpy(data + 4, text.c_str(), text.length());
																		memcpy(data + 4 + text.length(), &zero, 1);
																		ENetPacket* packet3 = enet_packet_create(data,
																			5 + text.length(),
																			ENET_PACKET_FLAG_RELIABLE);


																		enet_peer_send(currentPeer, 0, packet3);
																	}
																}
															}
														}
													}
													if (infoDat[0] == "dialog_name" && infoDat[1] == "pssdia") 	isPasswordDialog = true;
													if (infoDat[0] == "dialog_name" && infoDat[1] == "grodia") 	isGrowidDialog = true;
													if (infoDat[0] == "dialog_name" && infoDat[1] == "register") isRegisterDialog = true;
													if (infoDat[0] == "dialog_name") dialog_name = infoDat[1];
													if (isPasswordDialog) {
														if (infoDat[0] == "oldpass") oldpass = infoDat[1];
														if (infoDat[0] == "newpass") password2 = infoDat[1];
														if (infoDat[0] == "verifypass")	password2verify = infoDat[1];
													}
													if (isGrowidDialog) {
														if (infoDat[0] == "newgrowid") newgrowid = infoDat[1];
														if (infoDat[0] == "username2") username2 = infoDat[1];
													}
													if (isRegisterDialog) {
														if (infoDat[0] == "username")
														{
															username = infoDat[1];
															restrictedname = username;
															toUpperCase(restrictedname);


															//cout << "user typed: " + restrictedname;
															string cleanrname = std::regex_replace(restrictedname, std::regex("^ +| +$|( ) +"), "$1");

															if (restrictedname == "CON" || restrictedname == "NUL" || restrictedname == "PRN" || restrictedname == "AUX" || restrictedname == "CLOCK$" || restrictedname == "COM0" || restrictedname == "COM1" || restrictedname == "COM2" || restrictedname == "COM3" || restrictedname == "COM4" || restrictedname == "COM5" || restrictedname == "COM6" || restrictedname == "COM7" || restrictedname == "COM8" || restrictedname == "COM9" || restrictedname == "LPT0" || restrictedname == "LPT1" || restrictedname == "LPT2" || restrictedname == "LPT3" || restrictedname == "LPT4" || restrictedname == "LPT5" || restrictedname == "LPT6" || restrictedname == "LPT7" || restrictedname == "LPT8" || restrictedname == "LPT9")
															{
																enet_peer_disconnect_now(peer, 0);
															}
															else
															{
																((PlayerInfo*)(peer->data))->canCreate == true;
															}

														}

														if (infoDat[0] == "password") password = infoDat[1];
														if (infoDat[0] == "passwordverify") passwordverify = infoDat[1];
														//if (infoDat[0] == "email") email = infoDat[1];
														if (infoDat[0] == "discord") discord = infoDat[1];
														if (infoDat[0] == "pin") pin = infoDat[1];
													}
												}
												if (isGuildDialog) {
													if (infoDat[0] == "gname") gguildname = infoDat[1];
													if (infoDat[0] == "gstatement") gguildstatement = infoDat[1];
													if (infoDat[0] == "ggcflagbg") gguildflagbg = infoDat[1];
													if (infoDat[0] == "ggcflagfg") gguildflagfg = infoDat[1];
												}
												if (isGuildDialog) {

													cout << gguildname << endl;
													cout << gguildstatement << endl;
													cout << gguildflagbg << endl;
													cout << gguildflagfg << endl;


													int GCState = PlayerDB::guildRegister(peer, gguildname, gguildstatement, gguildflagbg, gguildflagfg);
													if (GCState == -1) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rGuild creation has failed, because special characters isnt allowed!``"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else if (GCState == -2) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rGuild creation has failed, because guild name is too short!``"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else if (GCState == -3) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rGuild creation has failed, because guild name is too long!``"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else if (GCState == -4) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rGuild creation has failed, because the guild name is already taken!``"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else if (GCState == -5) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rGuild creation has failed, because the background block must be a number!``"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													if (GCState == -6) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rGuild creation has failed, because the foreground block must be a number!``"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else if (GCState == -7) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rGuild creation has failed, because the background id is too long!``"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													if (GCState == -8) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rGuild creation has failed, because the foreground id is too long!``"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else if (world->owner != ((PlayerInfo*)(peer->data))->rawName) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rGuild creation has failed, because the foreground id is too long!``"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else {
														if (GCState == 1) {

															((PlayerInfo*)(peer->data))->createGuildName = gguildname;
															((PlayerInfo*)(peer->data))->createGuildStatement = gguildstatement;


															((PlayerInfo*)(peer->data))->createGuildFlagBg = gguildflagbg;
															((PlayerInfo*)(peer->data))->createGuildFlagFg = gguildflagfg;

															GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guild|left|5814|\nadd_textbox|`1Guild Name: `o" + gguildname + "``|\nadd_textbox|`1Guild Statement: `o" + gguildstatement + "``|\nadd_label_with_icon|small|`1<-Guild Flag Background``|left|" + gguildflagbg + "|\nadd_label_with_icon|small|`1<-Guild Flag Foreground``|left|" + gguildflagfg + "|\n\nadd_spacer|small|\nadd_textbox|`oCost: `4250,000 Gems``|\n\nadd_spacer|small|\nadd_button|confirmcreateguild|`oCreate Guild``|\nend_dialog||`wCancel``||\n"));
															ENetPacket* packet = enet_packet_create(ps.data,
																ps.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															delete ps.data;

														}
													}
												}
											}
											if (btn.substr(0, 5) == "found") {
												PlayerInventory inventory;
												InventoryItem item;
												item.itemID = atoi(btn.substr(5, btn.length()).c_str());
												item.itemCount = 200;
												inventory.items.push_back(item);
												item.itemCount = 1;
												item.itemID = 18;
												inventory.items.push_back(item);
												item.itemID = 32;
												inventory.items.push_back(item);
												sendInventory(peer, inventory);
											}





											//enet_host_flush(server);




											int x = ((PlayerMoving*)(peer->data))->punchX;
											int y = ((PlayerMoving*)(peer->data))->punchY;
											int causedBy = ((PlayerMoving*)(peer->data))->netID;
											int tile = ((PlayerMoving*)(peer->data))->plantingTree;
											if (btn == "joinguildzzz") {
												((PlayerInfo*)(peer->data))->guild = ((PlayerInfo*)(peer->data))->guildlast;
												((PlayerInfo*)(peer->data))->isinvited = false;
												((PlayerInfo*)(peer->data))->joinguild = true;

												string fixedguildName = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);

												/*
												std::ifstream ifs2("guilds/" + fixedguildName + ".json");
												if (ifs2.fail()) {
													ifs2.close();
												}
												if (ifs2.is_open()) {

												}
												json j2;
												ifs2 >> j2;*/

												guildmem.push_back(((PlayerInfo*)(peer->data))->rawName);

												std::ifstream ifff("guilds/" + fixedguildName + ".json");
												if (ifff.fail()) {
													ifff.close();
													continue;
												}
												if (ifff.is_open()) {
												}
												json j;
												ifff >> j; //load


												j["Member"] = guildmem; //edit

												std::ofstream o("guilds/" + fixedguildName + ".json"); //save
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}
												o << j << std::endl;
											}

											if (btn == "inviteguildbutton") {
												if (((PlayerInfo*)(peer->data))->guild != "") {
													int number = ((PlayerInfo*)(peer->data))->guildmatelist.size();
													if (number > 9) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ERROR: `oYou already have `450 `ofriends! Please remove some before adding new ones!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														continue;
													}
													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer))
														{
															if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
																string name = ((PlayerInfo*)(currentPeer->data))->rawName;
																if (((PlayerInfo*)(currentPeer->data))->guild != "") {
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3GUILD ERROR: `w" + ((PlayerInfo*)(currentPeer->data))->displayName + "`o is already in a Guild!"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;
																}
																else {
																	GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5[`wGuild request sent to `2" + ((PlayerInfo*)(currentPeer->data))->displayName + "`5]"));
																	ENetPacket* packet4 = enet_packet_create(p4.data,
																		p4.len,
																		ENET_PACKET_FLAG_RELIABLE);

																	enet_peer_send(peer, 0, packet4);
																	delete p4.data;
																	string text = "action|play_sfx\nfile|audio/tip_start.wav\ndelayMS|0\n";
																	BYTE* data = new BYTE[5 + text.length()];
																	BYTE zero = 0;
																	int type = 3;
																	memcpy(data, &type, 4);
																	memcpy(data + 4, text.c_str(), text.length());
																	memcpy(data + 4 + text.length(), &zero, 1);
																	ENetPacket* packet2 = enet_packet_create(data,
																		5 + text.length(),
																		ENET_PACKET_FLAG_RELIABLE);

																	enet_peer_send(currentPeer, 0, packet2);
																	delete data;
																	((PlayerInfo*)(currentPeer->data))->guildlast = ((PlayerInfo*)(peer->data))->guild;
																	((PlayerInfo*)(currentPeer->data))->isinvited = true;
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD REQUEST] `oYou've been invited to join `2" + ((PlayerInfo*)(peer->data))->guild + "`o by `w" + ((PlayerInfo*)(peer->data))->displayName + "`o! To accept, `wwrench yourself `oand then choose `2Join " + ((PlayerInfo*)(peer->data))->guild + "`o."));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet);
																	delete p.data;
																}
															}
														}
													}
												}
												else {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ERROR] `oYou must be in a Guild as a Elder or higher in order to invite players!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "passbutton") {
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete ps.data;
												continue;
											}
											if (btn == "joinguild") {
												vector<string> gmembers;
												string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guildlast);
												if (guildname != "") {
													std::ifstream ifff("guilds/" + guildname + ".json");
													if (ifff.fail()) {
														ifff.close();
														cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
													}
													json j;
													ifff >> j;

													for (int i = 0; i < j["Member"].size(); i++) {
														gmembers.push_back(j["Member"][i]);
													}

													ifff.close();

													int membercount = gmembers.size();

													if (membercount > 14) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `oThat guild is already full!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else {
														((PlayerInfo*)(peer->data))->guild = ((PlayerInfo*)(peer->data))->guildlast;
														((PlayerInfo*)(peer->data))->guildlast = "";
														((PlayerInfo*)(peer->data))->isinvited = false;
														((PlayerInfo*)(peer->data))->joinguild = true;
														updateInvis(peer);
														std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
														if (ifff.fail()) {
															ifff.close();
															GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
															ENetPacket* packet = enet_packet_create(ps.data,
																ps.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete ps.data;
															continue;
														}
														if (ifff.is_open()) {
														}
														json j;
														ifff >> j; //load

														vector<string> gmlist;

														for (int i = 0; i < j["Member"].size(); i++) {
															gmlist.push_back(j["Member"][i]);
														}

														gmlist.push_back(((PlayerInfo*)(peer->data))->rawName);

														j["Member"] = gmlist; //edit

														std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}

														o << j << std::endl;
														ENetPeer* currentPeer;

														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild)
															{
																updateGuild(peer);
																updateGuild(currentPeer);
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->displayName + " `ojoined the guild!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(currentPeer, 0, packet);
																delete p.data;
																updateInvis(peer);
															}
														}
													}
												}
											}


											if (btn == "showguild") {
												string onlinegmlist = "";
												string grole = "";
												int onlinecount = 0;
												string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);
												if (guildname != "") {
													std::ifstream ifff("guilds/" + guildname + ".json");
													if (ifff.fail()) {
														ifff.close();
														cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
														((PlayerInfo*)(peer->data))->guild = "";

													}
													json j;
													ifff >> j;

													int gfbg, gffg, guildlvl, guildxp;

													string gstatement, gleader;

													vector<string> gmembers;

													gfbg = j["backgroundflag"];
													gffg = j["foregroundflag"];
													gstatement = j["GuildStatement"];
													gleader = j["Leader"];
													guildlvl = j["GuildLevel"];
													guildxp = j["GuildExp"];
													for (int i = 0; i < j["Member"].size(); i++) {
														gmembers.push_back(j["Member"][i]);
													}
													((PlayerInfo*)(peer->data))->guildlevel = guildlvl;
													((PlayerInfo*)(peer->data))->guildexp = guildxp;

													((PlayerInfo*)(peer->data))->guildBg = gfbg;
													((PlayerInfo*)(peer->data))->guildFg = gffg;
													((PlayerInfo*)(peer->data))->guildStatement = gstatement;
													((PlayerInfo*)(peer->data))->guildLeader = gleader;
													((PlayerInfo*)(peer->data))->guildMembers = gmembers;

													ifff.close();
												}
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													string name = ((PlayerInfo*)(currentPeer->data))->rawName;
													if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), name) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
														if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
															onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " `e(GL)``|0|0|";
															onlinecount++;
														}
														else {
															onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " " + grole + "``|0|0|";
															onlinecount++;
														}
													}
												}
												if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|`oGuild Name : " + ((PlayerInfo*)(peer->data))->guild + "``|\nadd_textbox|`oStatement : " + ((PlayerInfo*)(peer->data))->guildStatement + "``|\nadd_textbox|`oGuild size: " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + "/15 members|\nadd_textbox|`oGuild Level : " + std::to_string(((PlayerInfo*)(peer->data))->guildlevel) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(((PlayerInfo*)(peer->data))->guildexp) + "|\n\nadd_spacer|small|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0|\nadd_button|editguildstatement|`wEdit Guild Statement``|0|0|\n\nadd_spacer|small|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + " `wGuild Members Online|" + onlinegmlist + "\n\nadd_spacer|small|\nadd_button|backsocialportal|`wBack``|0|0|\nadd_button||`wClose``|0|0|\nadd_quick_exit|"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}
												else {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|`oGuild Name : " + ((PlayerInfo*)(peer->data))->guild + "``|\nadd_textbox|`oStatement : " + ((PlayerInfo*)(peer->data))->guildStatement + "``|\nadd_textbox|`oGuild size: " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + "/15 members|\nadd_textbox|`oGuild Level : " + std::to_string(((PlayerInfo*)(peer->data))->guildlevel) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(((PlayerInfo*)(peer->data))->guildexp) + "|\n\nadd_spacer|small|\nadd_button|leavefromguild|`4Leave from guild``|0|0|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0| \n\nadd_spacer|small|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + " `wGuild Members Online|" + onlinegmlist + "\n\nadd_spacer|small|\nadd_button|backsocialportal|`wBack``|0|0|\nadd_button||`wClose``|0|0|\nadd_quick_exit|"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}
											}
											if (btn == "lbot")
											{
												((PlayerInfo*)(peer->data))->cloth_shirt = 1780;
												sendClothes(peer);
												PlayerInfo* info = ((PlayerInfo*)(peer->data));
												int netID = info->netID;
												ENetPeer* currentPeer;
												int state = getState(info);
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer)) {
														PlayerMoving data;
														data.packetType = 0x14;
														data.characterState = 0; // animation
														data.x = 1000;
														data.y = 100;
														data.x = 1000;
														data.y = 1000;
														data.punchX = 0;
														data.punchY = 0;
														data.XSpeed = 300;
														data.YSpeed = 600;
														data.netID = netID;
														data.plantingTree = state;
														BYTE* raw = packPlayerMoving(&data);
														int var = 20; // placing and breking
														memcpy(raw + 1, &var, 3);
														SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
														ENetPacket* packet6 = enet_packet_create(p6.data,
															p6.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet6);
														delete p6.data;
													}
												}
											}
											if (btn == "lwings")
											{
												((PlayerInfo*)(peer->data))->cloth_back = 1784;
												sendClothes(peer);
												PlayerInfo* info = ((PlayerInfo*)(peer->data));
												((PlayerInfo*)(peer->data))->canDoubleJump = true;
												int netID = info->netID;
												ENetPeer* currentPeer;
												int state = getState(info);
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
														ENetPacket* packet6 = enet_packet_create(p6.data,
															p6.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet6);
														delete p6.data;
													}
												}
											}
											if (btn == "ldrag")
											{
												((PlayerInfo*)(peer->data))->cloth_hand = 1782;
												sendClothes(peer);
												PlayerInfo* info = ((PlayerInfo*)(peer->data));
												int netID = info->netID;
												ENetPeer* currentPeer;
												int state = getState(info);
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer)) {
														PlayerMoving data;
														data.packetType = 0x14;
														data.characterState = 0; // animation
														data.x = 1000;
														data.y = 100;
														data.x = 1000;
														data.y = 1000;
														data.punchX = 0;
														data.punchY = 0;
														data.XSpeed = 300;
														data.YSpeed = 600;
														data.netID = netID;
														data.plantingTree = state;
														BYTE* raw = packPlayerMoving(&data);
														int var = 21; // placing and breking
														memcpy(raw + 1, &var, 3);
														SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
														ENetPacket* packet6 = enet_packet_create(p6.data,
															p6.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet6);
														delete p6.data;
													}
												}
											}
											if (btn == "lsky")
											{
												((PlayerInfo*)(peer->data))->cloth_back = 7734;
												sendClothes(peer);
												PlayerInfo* info = ((PlayerInfo*)(peer->data));
												((PlayerInfo*)(peer->data))->canDoubleJump = true;
												int netID = info->netID;
												ENetPeer* currentPeer;
												int state = getState(info);
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
														ENetPacket* packet6 = enet_packet_create(p6.data,
															p6.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet6);
														delete p6.data;
													}
												}
											}
											if (btn == "lwhip")
											{
												((PlayerInfo*)(peer->data))->cloth_hand = 6026;
												sendClothes(peer);
												PlayerInfo* info = ((PlayerInfo*)(peer->data));
												int netID = info->netID;
												ENetPeer* currentPeer;
												int state = getState(info);
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer)) {
														PlayerMoving data;
														data.packetType = 0x14;
														data.characterState = 0; // animation
														data.x = 1000;
														data.y = 100;
														data.x = 1000;
														data.y = 1000;
														data.punchX = 0;
														data.punchY = 0;
														data.XSpeed = 300;
														data.YSpeed = 600;
														data.netID = netID;
														data.plantingTree = state;
														BYTE* raw = packPlayerMoving(&data);
														int var = 76; // placing and breking
														memcpy(raw + 1, &var, 3);
														SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oThe truth is yours! (`oWhip of Truth mod added`o)"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);

														delete p.data;
														((PlayerInfo*)(peer->data))->effect = 8421452;
														sendState(peer); //here
														sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
														ENetPacket* packet6 = enet_packet_create(p6.data,
															p6.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet6);
														delete p6.data;
													}
												}
											}
											if (btn == "lkat")
											{
												((PlayerInfo*)(peer->data))->cloth_hand = 2592;
												sendClothes(peer);
												PlayerInfo* info = ((PlayerInfo*)(peer->data));
												int netID = info->netID;
												ENetPeer* currentPeer;
												int state = getState(info);
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer)) {
														PlayerMoving data;
														data.packetType = 0x14;
														data.characterState = 0; // animation
														data.x = 1000;
														data.y = 100;
														data.x = 1000;
														data.y = 1000;
														data.punchX = 0;
														data.punchY = 0;
														data.XSpeed = 300;
														data.YSpeed = 600;
														data.netID = netID;
														data.plantingTree = state;
														BYTE* raw = packPlayerMoving(&data);
														int var = 43; // placing and breking
														memcpy(raw + 1, &var, 3);
														SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oNone can stand against you! (`oLegendary Swordsmaster mod added`o)"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);

														delete p.data;
														((PlayerInfo*)(peer->data))->effect = 8421399;
														sendState(peer); //here
														sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
														ENetPacket* packet6 = enet_packet_create(p6.data,
															p6.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet6);
														delete p6.data;
													}
												}
											}
											if (btn == "showguildzz") {

												string fg, bg, guildname, guildleader, gstatement;
												int guildlvl, guildexp;
												string guildName = ((PlayerInfo*)(peer->data))->guild;
												std::ifstream ifs("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
												if (ifs.is_open()) {
													json j;
													ifs >> j;

													gstatement = j["GuildStatement"];
													fg = j["foregroundflag"];
													bg = j["backgroundflag"];
													guildname = j["GuildName"];
													guildlvl = j["GuildLevel"];
													guildexp = j["GuildExp"];
													guildleader = j["Leader"];

													vector<string> gmlists;

													for (int i = 0; i < j["Member"].size(); i++) {
														gmlists.push_back(j["Member"][i]);
													}
													((PlayerInfo*)(peer->data))->guildmatelist = gmlists;

												}

												int block = stoi(fg);
												int wallpaper = stoi(bg);
												int flag = ((65536 * wallpaper) + block);

												string onlinefrnlist = "";
												int onlinecount = 0;
												int totalcount = ((PlayerInfo*)(peer->data))->guildmatelist.size();
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;

													string name = ((PlayerInfo*)(currentPeer->data))->rawName;
													if (find(((PlayerInfo*)(peer->data))->guildmatelist.begin(), ((PlayerInfo*)(peer->data))->guildmatelist.end(), name) != ((PlayerInfo*)(peer->data))->guildmatelist.end()) {
														if (((PlayerInfo*)(currentPeer->data))->rawName == guildleader) {
															onlinefrnlist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " `e(GL)``|0|0|";
															onlinecount++;
														}
														else {
															onlinefrnlist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + "``|0|0|";
															onlinecount++;
														}
													}

												}
												if (guildleader == ((PlayerInfo*)(peer->data))->rawName) {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + bg + "|" + fg + "|1.0|0|\nadd_label|small|" + gstatement + "|left|4|\n\nadd_spacer|small|\nadd_textbox|Guild size: " + std::to_string(totalcount) + "/10 members``|\nadd_textbox|`oGuild Level : " + std::to_string(guildlvl) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(guildexp) + "|\nadd_textbox|Guild Name : " + guildname + "|\nadd_textbox|`oGuild Leader : " + guildleader + "|\nadd_spacer|small|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0|\nadd_button|editguildstatement|`wEdit Guild Statement``|0|0|\nadd_spacer|big|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wGuild Members Online|\nadd_spacer|small|" + onlinefrnlist + "\nadd_spacer|small|\nadd_button|backsocialportal|`wBack|\nadd_button|cl0se|`wClose|\nadd_quick_exit|"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}
												else {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + bg + "|" + fg + "|1.0|0|\nadd_label|small|" + gstatement + "|left|4|\n\nadd_spacer|small|\nadd_textbox|Guild size: " + std::to_string(totalcount) + "/10 members``|\nadd_textbox|`oGuild Level : " + std::to_string(guildlvl) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(guildexp) + "|\nadd_textbox|Guild Name : " + guildname + "|\nadd_textbox|`oGuild Leader : " + guildleader + "|\nadd_spacer|small|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0| \nadd_spacer|big|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wGuild Members Online|\nadd_spacer|small|" + onlinefrnlist + "\nadd_spacer|small|\nadd_button|backsocialportal|`wBack|\nadd_button|cl0se|`wClose|\nadd_quick_exit|"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);
													delete p2.data;

												}

											}
											if (btn == "guildoffline") {


												string onlinegmlist = "";
												string offname, offlinegm;
												string grole = "";
												int onlinecount = 0;
												int totalcount = ((PlayerInfo*)(peer->data))->guildMembers.size();

												string gstatement = ((PlayerInfo*)(peer->data))->guildLeader;
												string bg = std::to_string(((PlayerInfo*)(peer->data))->guildBg);
												string fg = std::to_string(((PlayerInfo*)(peer->data))->guildFg);
												string guildname = ((PlayerInfo*)(peer->data))->guild;
												string guildleader = ((PlayerInfo*)(peer->data))->guildLeader;
												string guildlvl = "0";
												string guildexp = "0";
												ENetPeer* currentPeer;
												vector<string>offlineguild = ((PlayerInfo*)(peer->data))->guildMembers;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													string name = ((PlayerInfo*)(currentPeer->data))->rawName;
													if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), name) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
														if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
															onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " `e(GL)``|0|0|";
															onlinecount++;
														}
														else {
															onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " " + grole + "``|0|0|";
															onlinecount++;
															offlineguild.erase(std::remove(offlineguild.begin(), offlineguild.end(), name), offlineguild.end());
														}
													}
												}
												for (std::vector<string>::const_iterator i = offlineguild.begin(); i != offlineguild.end(); ++i) {
													offname = *i;
													offlinegm += "\nadd_button|offlinegm_" + offname + "|`4OFFLINE: `o" + offname + "``|0|0|";

												}
												/*if (onlinecount > 0) {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\n\nadd_spacer|small|\nadd_textbox|All of your friend are online!|\n\nadd_spacer|small| \n\nadd_spacer|small| \nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backonlinelist|Back``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
													ENetPacket * packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}
												else {*/
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + bg + "|" + fg + "|1.0|0|\nadd_label|small|" + gstatement + "|left|4|\n\nadd_spacer|small|\nadd_textbox|Guild size: " + std::to_string(totalcount) + "/10 members``|\nadd_textbox|`oGuild Level : " + guildlvl + "|\nadd_textbox|`oGuild Exp : " + guildexp + "|\nadd_textbox|Guild Name : " + guildname + "|\nadd_textbox|`oGuild Leader : " + guildleader + "|\nadd_spacer|small| \nadd_button|goguildhome|`wGo to Guild Home``|0|0| \nadd_spacer|big|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wGuild Members Online|\nadd_spacer|small|" + offlinegm + "\nadd_spacer|small|\nadd_button|showguild|`wBack|\nadd_button|cl0se|`wClose|\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;

											}
											if (btn == "goguildhome") {
												string gworld;
												string guildName = ((PlayerInfo*)(peer->data))->guild;
												std::ifstream ifs("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
												if (ifs.is_open()) {
													json j;
													ifs >> j;

													gworld = j["GuildWorld"];

												}
												sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
												joinWorld(peer, gworld, 0, 0);
											}
											if (btn == "worldPublic") {

												if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) getPlyersWorld(peer)->isPublic = true;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. Set world to: Public!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
											if (btn == "createguildinfo") {
												/*GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guild|left|5814|\nadd_label|small|`oWelcome to Grow Guilds where you can create a Guild! With a Guild you can level up the Guild to add more members.``|left|4|\n\nadd_spacer|small|\nadd_textbox|`oYou will be charged `6250,000 `oGems.``|\nadd_spacer|small|\nadd_button|createguild|`oCreate a Guild``|0|0|\nadd_button|backsocialportal|Back|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;*/
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wThis option will be added soon!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}

											if (btn == "createguild") {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guild Creation``|left|5814|\nadd_spacer|small|\nadd_text_input|gname|Guild Name: ||20|\nadd_text_input|gstatement|Guild Statement: ||100|\nadd_text_input|ggcflagbg|`oGuild Flag Background ID:``||5|\nadd_text_input|ggcflagfg|`oGuild Flag Foreground ID:``||5|\nadd_spacer|small|\nadd_textbox|`oConfirm your guild settings by selecting `2Create Guild `obelow to create your guild.|\nadd_spacer|small|\nadd_textbox|`8Remember`o: A guild can only be created in a world owned by you and locked with a `5World Lock`o!|\nadd_spacer|small|\nadd_textbox|`4Warning! `oThe guild name cannot be changed once you have confirmed the guild settings!|\nadd_quick_exit|\nadd_spacer|small|\nend_dialog|guildconfirm|Cancel|Create Guild|\n"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											if (btn == "skiptutorial") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Now create your GrowID!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
												int x = ((PlayerInfo*)(peer->data))->x;
												int y = ((PlayerInfo*)(peer->data))->y;
												GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 48), x, y));

												ENetPacket* packetd = enet_packet_create(psp.data,
													psp.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetd);
											}
											if (btn == "tutorial") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wChoose destination|left|6128|\nadd_spacer|small|\nadd_button|how2item|`wHow to get any item?|0|0|\nadd_button|how2gem|`wHow to get `2Gems`w?|0|0|\nadd_button|how2level|`wHow to get `2Level`w?|0|0|\nadd_label|small|`wTo see all commands type `2/help `wor `2/?`w.|left|\nadd_spacer|small|\nadd_button|skiptutorial|`2Thanks|0|0|\n"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "how2item") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHow to get any item?|left|1970|\nadd_label|small|`wAlmost every item is free!|left|\nadd_spacer|small|\nadd_label|small|`wType `2/find `wand enter the item name to get item!|left|\nadd_spacer|small|\nadd_button|backtutorial|`wBack!|0|0|\n"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "how2gem") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHow to get gem?|left|112|\nadd_spacer|small|\nadd_label|small|`wBreaking blocks will give you `21-5 `wgems!|left|\nadd_spacer|small|\nadd_label|small|`wYou can buy items with gems!|left|\nadd_spacer|\nadd_button|backtutorial|`wBack!|0|0|\n"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "how2level") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHow to get level?|left|18|\nadd_spacer|small|\nadd_label|small|`wBreaking blocks will give you `21 `wxp collect `2300 `wxp to level up!|left|\nadd_spacer|small|\nadd_label|small|`wYou can get `1Blue Name `wwith being 125 level!|left|\nadd_spacer|\nadd_button|backtutorial|`wBack!|0|0|\n"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "confirmcreateguild") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 249000)
												{
													int gemcalc10k = b - 250000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;
													GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You created guild!"));
													//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
													ENetPacket* packetto = enet_packet_create(pto.data,
														pto.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetto);
													delete pto.data;
													string guildName = ((PlayerInfo*)(peer->data))->createGuildName;
													string guildStatement = ((PlayerInfo*)(peer->data))->createGuildStatement;
													string fixedguildName = PlayerDB::getProperName(guildName);
													string guildFlagbg = ((PlayerInfo*)(peer->data))->createGuildFlagBg;
													string guildFlagfg = ((PlayerInfo*)(peer->data))->createGuildFlagFg;

													//guildmem.push_back(((PlayerInfo*)(peer->data))->rawName);

													std::ofstream o("guilds/" + fixedguildName + ".json");
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}
													json j;
													vector<string> test1s;
													vector<string>test2s;

													((PlayerInfo*)(peer->data))->guildMembers.push_back(((PlayerInfo*)(peer->data))->rawName);
													j["GuildName"] = ((PlayerInfo*)(peer->data))->createGuildName;
													j["GuildRawName"] = fixedguildName;
													j["GuildStatement"] = ((PlayerInfo*)(peer->data))->createGuildStatement;
													j["Leader"] = ((PlayerInfo*)(peer->data))->rawName;
													j["Co-Leader"] = test1s;
													j["Elder-Leader"] = test2s;
													j["Member"] = ((PlayerInfo*)(peer->data))->guildMembers;
													j["GuildLevel"] = 0;
													j["GuildExp"] = 0;
													j["GuildWorld"] = ((PlayerInfo*)(peer->data))->currentWorld;
													j["backgroundflag"] = stoi(((PlayerInfo*)(peer->data))->createGuildFlagBg);
													j["foregroundflag"] = stoi(((PlayerInfo*)(peer->data))->createGuildFlagFg);
													o << j << std::endl;

													updateInvis(peer);

													((PlayerInfo*)(peer->data))->guild = guildName;
													((PlayerInfo*)(peer->data))->joinguild = true;
													for (int i = 0; i < world->width * world->height; i++)
													{

														if (world->items[i].foreground == 242) {
															world->items[i].foreground = 5814;
														}
													}
												}
												else {
													GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You don't have enough gems."));
													//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
													ENetPacket* packetto = enet_packet_create(pto.data,
														pto.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetto);
													delete pto.data;
												}
											}
											if (btn == "backtutorial") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wChoose destination|left|7974|\nadd_spacer|small|\nadd_button|how2item|`wHow to get any item?|0|0|\nadd_button|how2gem|`wHow to get `2Gems`w?|0|0|\nadd_button|how2level|`wHow to get `2Level`w?|0|0|\nadd_label|small|`wTo see all commands type `2/help `wor `2/?`w.|left|\nadd_spacer|small|\nadd_button|skiptutorial|`2Thanks|0|0|\n"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "betaserver") {
												GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBetaMode"), 1));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;

												GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Beta-mode activated."));
												//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packetto = enet_packet_create(pto.data,
													pto.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packetto);
												delete pto.data;
											}
											if (btn == "battleroyaleserver")
											{
												GamePacket p3 = packetEnd(appendInt(appendInt(appendString(appendString(createPacket(), "OnRedirectServer"), "192.168.2.101"), 17091), 1));

												//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packet3 = enet_packet_create(p3.data,
													p3.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet3);
												delete p3.data;

												GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Coming soon, will warp to normal GTOG server when connect!"));
												//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packetto = enet_packet_create(pto.data,
													pto.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packetto);
												delete pto.data;
											}
											if (btn == "gtpaserver")
											{
												GamePacket p3 = packetEnd(appendInt(appendInt(appendString(appendString(createPacket(), "OnRedirectServer"), "104.198.35.105"), 17353), 1));

												//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packet3 = enet_packet_create(p3.data,
													p3.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet3);
												delete p3.data;



												GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Connecting.. `wYou will now be Warped to GTPA! `4[Restart Growtopia to go Back!]``"));
												//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packetto = enet_packet_create(pto.data,
													pto.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packetto);
												delete pto.data;


											}
											if (btn == "vyteserver")
											{
												GamePacket p3 = packetEnd(appendInt(appendInt(appendString(appendString(createPacket(), "OnRedirectServer"), "privategts1.eu"), 17353), 1));

												//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packet3 = enet_packet_create(p3.data,
													p3.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet3);
												delete p3.data;



												GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Connecting.. `wYou will now be Warped to GTPS! `4[Restart Growtopia to go Back!]``"));
												//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packetto = enet_packet_create(pto.data,
													pto.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packetto);
												delete pto.data;


											}
											if (btn == "advertiseserver") {
												GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You can link your private server to this button. Costs 2 dls."));
												//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packetto = enet_packet_create(pto.data,
													pto.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packetto);
												delete pto.data;
											}
											if (btn == "subserver1") {
												GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You can rent server with WPS Server.exe. Costs 7 dls, contact us!"));
												//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packetto = enet_packet_create(pto.data,
													pto.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packetto);
												delete pto.data;
											}
											if (btn == "trade")
											{
												ENetPeer* currentPeerpx;

												for (currentPeerpx = server->peers;
													currentPeerpx < &server->peers[server->peerCount];
													++currentPeerpx)
												{
													if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
														continue;

													if (((PlayerInfo*)(currentPeerpx->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
													{
														GamePacket p2 = packetEnd(appendInt(appendInt(appendString(createPacket(), "OnStartTrade"), ((PlayerInfo*)(currentPeerpx->data))->netID), 1));

														//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet2);
														delete p2.data;

														/*GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnTradeStatus"), "Trader"));

														//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
														ENetPacket * packet3 = enet_packet_create(p3.data,
															p3.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet3);
														delete p3.data;*/
													}
												}
											}
											if (btn == "enableaap")
											{

											}
											if (btn == "dotradedialog")
											{
												//\nadd_button_with_icon|allowMod|Allow Noclip|noflags|1796||

												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wTrade Menu``|left|242|\nadd_label|small|\nadd_button_with_icon|dotrade|Do the Trade!|noflags|1424||\nadd_button|decline|`4Cancel/Decline|noflags||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "dotrade")
											{


												string text = "action|play_sfx\nfile|audio/keypad_hit.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);


												ENetPacket* packettrd = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);

												ENetPeer* currentPeerp;

												for (currentPeerp = server->peers;
													currentPeerp < &server->peers[server->peerCount];
													++currentPeerp)
												{
													if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeerp))
														enet_peer_send(currentPeerp, 0, packettrd);
												}
											}

											if (btn == "worldPrivate") {
												if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
													if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) {
														getPlyersWorld(peer)->isPublic = false;

														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. Set world to: Private!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
											}
											if (btn == "allowMod") {
												if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
													if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner)
													{
														getPlyersWorld(peer)->allowMod = true;

														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. World flags modified -> ALLOW-MOD = TRUE!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
											}
											if (btn == "allowMod1")
											{
												if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {

													if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) {
														getPlyersWorld(peer)->allowMod = false;

														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. World flags modified -> ALLOW-MOD = FALSE!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;


														ENetPeer* currentPeer;


														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;

															if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
																if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld) {

																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Owner `ohas `4disabled `5Mod-Noclip `oin this world."));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet);
																	delete p.data;


																	if (((PlayerInfo*)(currentPeer->data))->rawName != getPlyersWorld(peer)->owner)
																	{
																		((PlayerInfo*)(currentPeer->data))->canWalkInBlocks = false;
																		((PlayerInfo*)(currentPeer->data))->skinColor = 0x8295C3FF;
																		sendClothes(currentPeer);
																		sendState(currentPeer);


																		((PlayerInfo*)(currentPeer->data))->canWalkInBlocks = true;
																	}

																}
															}
														}
													}
												}
											}
											if (isFindDialog && btn.substr(0, 4) == "tool") {
												int id = atoi(btn.substr(4, btn.length() - 4).c_str());
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "item `2" + to_string(id) + " `ohas been `2added `ointo your inventory."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet);
												delete p.data;
												size_t invsize = 200;
												if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsize) {
													PlayerInventory inventory;
													InventoryItem item;
													item.itemID = id;
													item.itemCount = 200;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 18;
													inventory.items.push_back(item);
													item.itemID = 32;
													inventory.items.push_back(item);
													((PlayerInfo*)(peer->data))->inventory = inventory;

												}
												else {
													InventoryItem item;
													item.itemID = id;
													item.itemCount = 200;
													((PlayerInfo*)(peer->data))->inventory.items.push_back(item);
												}
												sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
											}
											else if (isFindDialog) {
												string itemLower2;
												vector<ItemDefinition> itemDefsfind;
												for (char c : itemFind) if (c < 0x20 || c>0x7A) goto SKIPFind;
												if (itemFind.length() < 3) goto SKIPFind3;
												for (const ItemDefinition& item : itemDefs)
												{
													string itemLower;
													for (char c : item.name) if (c < 0x20 || c>0x7A) goto SKIPFind2;
													if (!(item.id % 2 == 0)) goto SKIPFind2;
													itemLower2 = item.name;
													std::transform(itemLower2.begin(), itemLower2.end(), itemLower2.begin(), ::tolower);
													if (itemLower2.find(itemLower) != std::string::npos) {
														itemDefsfind.push_back(item);
													}
												SKIPFind2:;
												}
											SKIPFind3:;
												string listMiddle = "";
												string listFull = "";

												for (const ItemDefinition& item : itemDefsfind)
												{
													string kys = item.name;
													std::transform(kys.begin(), kys.end(), kys.begin(), ::tolower);
													string kms = itemFind;
													std::transform(kms.begin(), kms.end(), kms.begin(), ::tolower);
													if (kys.find(kms) != std::string::npos)
														listMiddle += "add_button_with_icon|tool" + to_string(item.id) + "|`$" + item.name + "``|left|" + to_string(item.id) + "||\n";
												}
												if (itemFind.length() < 3) {
													listFull = "add_textbox|`4Word is less than 3 letters!``|\nadd_spacer|small|\n";
													showWrong(peer, listFull, itemFind);
												}
												else if (itemDefsfind.size() == 0) {
													//listFull = "add_textbox|`4Found no item match!``|\nadd_spacer|small|\n";
													showWrong(peer, listFull, itemFind);

												}
												else {
													GamePacket fff = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wFound item : " + itemFind + "``|left|6016|\nadd_spacer|small|\nadd_textbox|Enter a word below to find the item|\nadd_text_input|item|Item Name||20|\nend_dialog|findid|Cancel|Find the item!|\nadd_spacer|big|\n" + listMiddle + "add_quick_exit|\n"));
													ENetPacket* packetd = enet_packet_create(fff.data,
														fff.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packetd);

													//enet_host_flush(server);
													delete fff.data;
												}
											}
										SKIPFind:;
											if (btn == "crash")
											{
												sendConsoleMsg(peer, "`8Your set was removed in order to fix the crash. You can now continue playing, before that, we will need to disconnect you `3ONCE`8.");
												((PlayerInfo*)(peer->data))->cloth_hair = 0;
												((PlayerInfo*)(peer->data))->cloth_shirt = 0;
												((PlayerInfo*)(peer->data))->cloth_pants = 0;
												((PlayerInfo*)(peer->data))->cloth_feet = 0;
												((PlayerInfo*)(peer->data))->cloth_face = 0;
												((PlayerInfo*)(peer->data))->cloth_hand = 0;
												((PlayerInfo*)(peer->data))->cloth_back = 0;
												((PlayerInfo*)(peer->data))->cloth_mask = 0;
												((PlayerInfo*)(peer->data))->cloth_necklace = 0;
												((PlayerInfo*)(peer->data))->cloth_ances = 0;
												sendClothes(peer);
												enet_peer_disconnect_later(peer, 0);
											}


											if (btn == "effect0")
											{
												((PlayerInfo*)(peer->data))->effect = -1; // punch

											}
											if (btn == "effect1")
											{
												((PlayerInfo*)(peer->data))->effect = -500;	 // death ray	

											}
											if (btn == "effect2")
											{
												((PlayerInfo*)(peer->data))->effect = 8421381; // shotgun
												sendState(peer); //here
												sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											}
											if (btn == "effect3")
											{
												((PlayerInfo*)(peer->data))->effect = 8420386; // Tank
											}
											if (btn == "effect4")
											{
												((PlayerInfo*)(peer->data))->effect = 8420396; // Silver Bow
											}
											if (btn == "effect5")
											{
												((PlayerInfo*)(peer->data))->effect = 8420389; // Rock Hammer
											}
											if (btn == "effect6")
											{
												((PlayerInfo*)(peer->data))->effect = 8421382; // Dragon
											}
											if (btn == "effect7")
											{
												((PlayerInfo*)(peer->data))->effect = -979; // egg
											}
											if (btn == "effect8")
											{
												((PlayerInfo*)(peer->data))->effect = -1017; // idk
											}
											if (btn == "effect9")
											{
												((PlayerInfo*)(peer->data))->effect = -991; // ice drag
											}
											if (btn == "effect10")
											{
												((PlayerInfo*)(peer->data))->effect = -1002; // Focused Eyes
											}
											if (btn == "effect11")
											{
												((PlayerInfo*)(peer->data))->effect = -991; // icedrag
											}
											if (btn == "effect12")
											{
												((PlayerInfo*)(peer->data))->effect = -997; // chaos curse wand
											}
											if (btn == "effect13")
											{
												((PlayerInfo*)(peer->data))->effect = 8420394;
											}
											if (btn == "effect14")
											{
												((PlayerInfo*)(peer->data))->effect = 8421391;
											}
											if (btn == "effect15")
											{
												((PlayerInfo*)(peer->data))->effect = 8421391; // battle trout
											}
											if (btn == "effect16")
											{
												((PlayerInfo*)(peer->data))->effect = -1008; // fiesta
											}
											if (btn == "effect17")
											{
												((PlayerInfo*)(peer->data))->effect = -1007; // squirt
											}
											if (btn == "effect18")
											{
												((PlayerInfo*)(peer->data))->effect = -1006; // key tar
											}
											if (btn == "effect19")
											{
												((PlayerInfo*)(peer->data))->effect = -940; // drag V2
											}
											if (btn == "effect20")
											{
												((PlayerInfo*)(peer->data))->effect = -1004; // lbot
											}
											if (btn == "effect21")
											{
												((PlayerInfo*)(peer->data))->effect = -1003; // l drag
											}
											if (btn == "effect22")
											{
												((PlayerInfo*)(peer->data))->effect = -950; // fiesta
											}
											if (btn == "effect23")
											{
												((PlayerInfo*)(peer->data))->effect = -996; // Green Swe
											}
											if (btn == "effect24")
											{
												((PlayerInfo*)(peer->data))->effect = -977; // Gungir
											}
											if (btn == "effect25")
											{
												((PlayerInfo*)(peer->data))->effect = -964; // Blue Soul
											}
											if (btn == "effect26")
											{
												((PlayerInfo*)(peer->data))->effect = -1011; //Black Shadow Effect

											}
											if (btn == "effect27")
											{
												((PlayerInfo*)(peer->data))->effect = -992; // Black Crystal
											}
											if (btn == "effect28")
											{
												((PlayerInfo*)(peer->data))->effect = -981; // l katana
											}
											if (btn == "effect29")
											{
												((PlayerInfo*)(peer->data))->effect = -978; // Black Holes
											}
											if (btn == "effect30")
											{
												((PlayerInfo*)(peer->data))->effect = 8420397; // Pineapple Blur Effect
											}
											if (btn == "effect31")
											{
												((PlayerInfo*)(peer->data))->effect = -995; // digger spade
											}
											if (btn == "effect32")
											{
												((PlayerInfo*)(peer->data))->effect = 0; //
											}
											if (btn == "effect33")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect34")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect35")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect36")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect37")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect38")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect39")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect40")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect41")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect42")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect43")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect44")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect45")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect46")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect47")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect48")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect49")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect50")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect51")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect52")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect53")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect54")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect55")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect56")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect57")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect58")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect59")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect60")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect61")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect62")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect63")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect64")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect65")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect66")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect67")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect67")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect68")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect69")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect70")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect71")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect72")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect73")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect74")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect75")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect76")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect77")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect78")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect79")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect80")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect81")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect82")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect83")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect84")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect85")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect86")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect87")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect88")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect89")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect90")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect91")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect92")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect93")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect94")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect95")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect96")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect97")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect98")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect99")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect100")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect101")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect102")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect103")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect104")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect105")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect106")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect107")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect108")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect109")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect110")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect111")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect112")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect113")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											if (btn == "effect114")
											{
												((PlayerInfo*)(peer->data))->effect = 0;
											}
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

											if (btn == "suspend")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {

													GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `4banned `w" + ((PlayerInfo*)(peer->data))->lastInfoname + " `#** `o(`4/rules `oto see the rules!)"));
													ENetPeer* currentPeer;


													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;

														if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;


															GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You've been `4BANNED `0from LTPS for 730 days"), "audio/hub_open.wav"), 0));
															ENetPacket* packet2 = enet_packet_create(ps2.data,
																ps2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet2);
															GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `4BANNED `ofrom LTPS for 730 days"));
															ENetPacket* packet3 = enet_packet_create(ps3.data,
																ps3.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet3);
															GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfoname + "."));
															//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
															ENetPacket* packetto = enet_packet_create(pto.data,
																pto.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packetto);
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {

																PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));
																p->ban = 1;
																string username = PlayerDB::getProperName(p->rawName);

																std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");

																if (ifff.fail()) {
																	ifff.close();


																}
																if (ifff.is_open()) {
																}
																json j;
																ifff >> j; //load

																int effect = p->effect;
																j["isBanned"] = 1;

																//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


																std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
																if (!o.is_open()) {
																	cout << GetLastError() << endl;
																	_getch();
																}

																o << j << std::endl;

																string bannamed = str.substr(5, cch.length() - 5 - 1);
																std::ofstream outfile("bans/" + bannamed + ".txt");

																outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

																outfile.close();
															}


															enet_peer_disconnect_later(currentPeer, 0);


														}
														ENetPacket* packet7 = enet_packet_create(p7.data,
															p7.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet7);

														//enet_host_flush(server);
													}

												}

											}
											if (btn == "banbysystem")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {

													GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + ((PlayerInfo*)(peer->data))->lastInfoname + " `4AUTO-BANNED BY SYSTEM **"));
													ENetPeer* currentPeer;


													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;

														if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;

															GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You've been `4BANNED `0from LTPS for 730 days"), "audio/hub_open.wav"), 0));
															ENetPacket* packet2 = enet_packet_create(ps2.data,
																ps2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet2);
															GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `4BANNED `ofrom LTPS for 730 days"));
															ENetPacket* packet3 = enet_packet_create(ps3.data,
																ps3.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet3);
															GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfoname + "."));
															//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
															ENetPacket* packetto = enet_packet_create(pto.data,
																pto.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packetto);
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {

																PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));
																p->ban = 1;
																string username = PlayerDB::getProperName(p->rawName);

																std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");

																if (ifff.fail()) {
																	ifff.close();


																}
																if (ifff.is_open()) {
																}
																json j;
																ifff >> j; //load

																int effect = p->effect;
																j["isBanned"] = 1;

																//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


																std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
																if (!o.is_open()) {
																	cout << GetLastError() << endl;
																	_getch();
																}

																o << j << std::endl;

																string bannamed = str.substr(5, cch.length() - 5 - 1);
																std::ofstream outfile("bans/" + bannamed + ".txt");

																outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

																outfile.close();
															}


															enet_peer_disconnect_later(currentPeer, 0);


														}
														ENetPacket* packet7 = enet_packet_create(p7.data,
															p7.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet7);

														//enet_host_flush(server);
													}

												}

											}
											if (btn == "ban7")
											{
#pragma warning (disable : 4996)
												// current date/time based on current system
												time_t now = time(0);




												cout << now << endl;


												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
												{


													ENetPeer* currentPeerp;

													for (currentPeerp = server->peers;
														currentPeerp < &server->peers[server->peerCount];
														++currentPeerp)
													{
														if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
															continue;

														if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wFeature doesnt work yet, in the next update it will work for sure!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
														}

													}
												}
											}
											if (btn == "disconnect")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
												{


													ENetPeer* currentPeerp;

													for (currentPeerp = server->peers;
														currentPeerp < &server->peers[server->peerCount];
														++currentPeerp)
													{
														if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
															continue;

														if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Fake disconnected player from server."));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															enet_peer_disconnect_later(currentPeerp, 0);
														}
													}
												}
											}
											if (btn == "freeze")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
												{


													ENetPeer* currentPeerp;

													for (currentPeerp = server->peers;
														currentPeerp < &server->peers[server->peerCount];
														++currentPeerp)
													{
														if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
															continue;

														if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
														{
															if (((PlayerInfo*)(currentPeerp->data))->isFrozen == false)
															{
																((PlayerInfo*)(currentPeerp->data))->isFrozen = true;



																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUsed `!Freeze`w mod on `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;

																((PlayerInfo*)(currentPeerp->data))->skinColor = -37500;
																sendClothes(currentPeerp);
																sendFrozenState(currentPeerp);

																GamePacket pf = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wSHUSH... pretty cold here. `!(Frozen)`w mod added."));
																ENetPacket* packetf = enet_packet_create(pf.data,
																	pf.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(currentPeerp, 0, packetf);
																delete pf.data;
															}
															else
															{
																((PlayerInfo*)(currentPeerp->data))->isFrozen = false;
																sendResetState(currentPeerp);

																GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
																memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeerp->data))->netID), 4);
																ENetPacket* packet2 = enet_packet_create(p2.data,
																	p2.len,
																	ENET_PACKET_FLAG_RELIABLE);


																enet_peer_send(currentPeerp, 0, packet2);
																delete p2.data;

																((PlayerInfo*)(currentPeerp->data))->skinColor = 0x8295C3FF;
																sendClothes(currentPeerp);


																GamePacket pf = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wLiking it warm... `!(Frozen)`w mod removed."));
																ENetPacket* packetf = enet_packet_create(pf.data,
																	pf.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(currentPeerp, 0, packetf);
																delete pf.data;

																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`!Unfrozen `wplayer `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
															}

														}

														string text = "action|play_sfx\nfile|audio/freeze.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetso = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														if (isHere(peer, currentPeerp))
														{
															enet_peer_send(currentPeerp, 0, packetso);
														}
													}
												}
											}
											if (btn == "tape")
											{
												if (((PlayerInfo*)(peer->data))->adminLevel > 333)
												{
													GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave duct-taped `w" + ((PlayerInfo*)(peer->data))->lastInfoname + "`o's mouth. `#** `o(`4/rules `oto see the rules!)"));
													ENetPeer* currentPeerp;

													for (currentPeerp = server->peers;
														currentPeerp < &server->peers[server->peerCount];
														++currentPeerp)
													{
														if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
															continue;
														ENetPacket* packet7 = enet_packet_create(p7.data,
															p7.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet7);

														if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
														{
															if (((PlayerInfo*)(currentPeerp->data))->taped == false)
															{
																((PlayerInfo*)(currentPeerp->data))->taped = true;
																((PlayerInfo*)(currentPeerp->data))->isDuctaped = true;
																((PlayerInfo*)(currentPeerp->data))->cantsay = true;
																sendState(currentPeerp);



																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUsed `btape`w mod on `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
															}
															else
															{
																((PlayerInfo*)(currentPeerp->data))->taped = false;
																((PlayerInfo*)(currentPeerp->data))->isDuctaped = false;
																((PlayerInfo*)(currentPeerp->data))->cantsay = false;
																sendState(currentPeerp);
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUn`btaped`w player."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
															}
															GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfo));
															//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
															ENetPacket* packetto = enet_packet_create(pto.data,
																pto.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packetto);
														}

														//enet_host_flush(server);
														string text = "action|play_sfx\nfile|audio/lightning.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetso = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														if (isHere(peer, currentPeerp))
														{
															enet_peer_send(currentPeerp, 0, packetso);
														}
													}
												}
											}
											if (btn == "punishview")
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4IP-Ban`1/`4Kick`w)|\nadd_button|view|`1View `w(`4Check IP`1/`4Details`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											if (btn == "view")
											{
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													string name = ((PlayerInfo*)(currentPeer->data))->rawName;
													int pullX = ((PlayerInfo*)(peer->data))->x;
													int pullY = ((PlayerInfo*)(peer->data))->y;


													if (name == ((PlayerInfo*)(peer->data))->lastInfo)
													{
														string showplatid = ((PlayerInfo*)(currentPeer->data))->platformID;
														string showplatidplain;
														if (showplatid == "4")
														{
															showplatidplain = "Android";
														}
														else if (showplatid == "0")
														{
															showplatidplain = "PC (Windows)";
														}
														else if (showplatid == "6")
														{
															showplatidplain = "Mac (OS X)";
														}
														else
														{
															showplatidplain = " iOS ";
														}
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1View player|left|1432|\nadd_spacer|small|\nadd_label|small|`9IP Address: `2" + ((PlayerInfo*)(currentPeer->data))->charIP + "|left|\nadd_label|small|`9Platform: `2" + showplatidplain + "|left|\nadd_label|small|`9Game Version: `2" + ((PlayerInfo*)(currentPeer->data))->gameversion + "|left|\nadd_label|small|`9Username: `2" + ((PlayerInfo*)(currentPeer->data))->rawName + "|left|\nadd_label|small|`9Player WKID: `2" + ((PlayerInfo*)(currentPeer->data))->wkid + "|left|\nadd_label|small|`9Player RID: `2" + ((PlayerInfo*)(currentPeer->data))->rid + "|left|\nadd_label|small|`9Current World: `2" + ((PlayerInfo*)(currentPeer->data))->currentWorld + "|left|\nadd_label|small|`9Player Age:`2 " + ((PlayerInfo*)(currentPeer->data))->player_age + "|left|\nadd_spacer|small|\nadd_label|small|`4WARNING: `wDo not abuse player information or else you will be `5DEMOTED`w!|left|\nadd_spacer|small|\nadd_button|punishview|`wBack|\nadd_button|cl0se|`wClose|\n"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}
											if (btn == "banmenu")
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish player|left|1432|\nadd_spacer|small|\nadd_button|suspend|`4Ban from Game|\nadd_button|banbysystem|`4IP-Ban from Game|\nadd_button|disconnect|`4Kick|\nadd_spacer|small|\nadd_button|punishview|`wBack|\nadd_button|chc9|Close|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											if (btn == "wban")
											{
												if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
												{
													ENetPeer* currentPeerp;

													for (currentPeerp = server->peers;
														currentPeerp < &server->peers[server->peerCount];
														++currentPeerp)
													{
														if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
															continue;



														string name = ((PlayerInfo*)(peer->data))->displayName;
														string kickname = ((PlayerInfo*)(peer->data))->lastInfoname;
														//string kickname = ((PlayerInfo*)(peer->data))->displayName;
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname + " from `w" + world->name + "`o!"));
														string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);

														if (isHere(peer, currentPeerp))
														{
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);

															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);



															enet_peer_send(currentPeerp, 0, packetsou);
															enet_peer_send(currentPeerp, 0, packet);
															delete data;
															delete p.data;
															if (((PlayerInfo*)(currentPeerp->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
															{


																namespace fs = std::experimental::filesystem;

																if (!fs::is_directory("worldbans/" + getPlyersWorld(peer)->name) || !fs::exists("worldbans/" + getPlyersWorld(peer)->name)) {
																	fs::create_directory("worldbans/" + getPlyersWorld(peer)->name);

																	std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

																	outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

																	outfile.close();
																}
																else
																{
																	std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

																	outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

																	outfile.close();
																}

																sendPlayerLeave(currentPeerp, (PlayerInfo*)(currentPeerp->data));
																sendWorldOffers(currentPeerp);


																((PlayerInfo*)(currentPeerp->data))->currentWorld = "EXIT";

															}
														}


													}

												}
											}
											if (btn == "autoban")
											{
												// Warning from `4System``: You've been `4BANNED`` from `wGrowtopia`` for 60 days``


											}
											if (btn == "kick")
											{
												if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
												{
													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;



														string name = ((PlayerInfo*)(peer->data))->displayName;
														string kickname = ((PlayerInfo*)(peer->data))->lastInfoname;
														//string kickname = ((PlayerInfo*)(peer->data))->displayName;
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4kicks " + "`w" + kickname));
														string text = "action|play_sfx\nfile|audio/male_scream.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);

														if (isHere(peer, currentPeer))
														{
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);

															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);


															enet_peer_send(currentPeer, 0, packetsou);
															enet_peer_send(currentPeer, 0, packet);


															int x = 3040;
															int y = 736;


															for (int i = 0; i < world->width * world->height; i++)
															{
																if (world->items[i].foreground == 6) {
																	x = (i % world->width) * 32;
																	y = (i / world->width) * 32;
																}
															}
															GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
															memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);

															if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo)
															{
																enet_peer_send(currentPeer, 0, packet2);
															}



															delete p2.data;
															delete p.data;
															delete data;

														}

													}
												}
											}

											if (btn == "pull")
											{
												if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
												{
													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														string name = ((PlayerInfo*)(currentPeer->data))->rawName;
														int pullX = ((PlayerInfo*)(peer->data))->x;
														int pullY = ((PlayerInfo*)(peer->data))->y;


														if (name == ((PlayerInfo*)(peer->data))->lastInfo)
														{
															if (isHere(peer, currentPeer) && getPlyersWorld(peer)->name != "EXIT")
															{
																string name = ((PlayerInfo*)(peer->data))->displayName;
																string pullname = ((PlayerInfo*)(currentPeer->data))->displayName;
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `5pulls " + "`w" + pullname));
																string text = "action|play_sfx\nfile|audio/object_spawn.wav\ndelayMS|0\n";
																BYTE* data = new BYTE[5 + text.length()];
																BYTE zero = 0;
																int type = 3;
																memcpy(data, &type, 4);
																memcpy(data + 4, text.c_str(), text.length());
																memcpy(data + 4 + text.length(), &zero, 1);

																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);

																enet_peer_send(currentPeer, 0, packet);
																enet_peer_send(peer, 0, packet);




																ENetPacket* packetsou = enet_packet_create(data,
																	5 + text.length(),
																	ENET_PACKET_FLAG_RELIABLE);


																enet_peer_send(currentPeer, 0, packetsou);
																enet_peer_send(peer, 0, packetsou);

																GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), pullX, pullY));
																memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
																ENetPacket* packet2 = enet_packet_create(p2.data,
																	p2.len,
																	ENET_PACKET_FLAG_RELIABLE);

																enet_peer_send(currentPeer, 0, packet2);

																GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You have been pulled by " + ((PlayerInfo*)(peer->data))->displayName));
																//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
																ENetPacket* packetto = enet_packet_create(pto.data,
																	pto.len,
																	ENET_PACKET_FLAG_RELIABLE);

																enet_peer_send(currentPeer, 0, packetto);

																delete pto.data;
																delete p2.data;
																delete p.data;

															}
														}
													}
												}






											}
											if (btn == "backsocialportal") {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|createguildinfo|Create Guild``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											if (btn == "frnoption") {
												string checkboxshit = "add_checkbox|checkbox_public|Show location to friends|1";
												string checkboxshits = "add_checkbox|checkbox_notifications|Show friend notifications|1";;
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wFriend Options``|left|1366|\n\nadd_spacer|small|\n" + checkboxshit + "\n" + checkboxshits + "\nadd_button|backonlinelist|`oClose``|0|0|\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											if (btn == "backonlinelist") {

												string onlinefrnlist = "";
												int onlinecount = 0;
												int totalcount = ((PlayerInfo*)(peer->data))->friendinfo.size();
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;

													string name = ((PlayerInfo*)(currentPeer->data))->rawName;
													if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
														onlinefrnlist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "``|0|0|";
														onlinecount++;

													}

												}
												if (totalcount == 0) {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_label|small|`oYou currently have no friends.  That's just sad.  To make some, click a person's wrench icon, then choose `5Add as friend`o.``|left|4|\n\nadd_spacer|small|\nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backsocialportal|Back|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}
												else if (onlinecount == 0) {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\nadd_label|small|`oNone of your friends are currently online.``|left|4|\n\nadd_spacer|small|\nadd_button|showoffline|`oShow offline``|0|0|\nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backsocialportal|Back|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}

												else {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|" + onlinefrnlist + "\n\nadd_spacer|small|\nadd_button|showoffline|`oShow offline``|0|0|\nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backsocialportal|Back|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}
											}
											if (btn.substr(0, 9) == "onlinegm_") {
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->rawName == btn.substr(9, cch.length() - 9 - 1)) {
														((PlayerInfo*)(peer->data))->lastgmworld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
														((PlayerInfo*)(peer->data))->lastgmname = ((PlayerInfo*)(currentPeer->data))->displayName;
														((PlayerInfo*)(peer->data))->lastgm = ((PlayerInfo*)(currentPeer->data))->rawName;
													}
												}
												if (btn.substr(9, cch.length() - 9 - 1) == ((PlayerInfo*)(peer->data))->rawName) {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|This is you!|\n\nadd_spacer|small|\nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}
												else {
													if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "`o.|\n\nadd_spacer|small|\nadd_button|gmwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "``|0|0|\nadd_button|gmmsgbutton|`5Send message``|0|0|\n\nadd_spacer|small| \nadd_button|removegmonline|Kick from guild|0|0|\nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
													else {
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "`o.|\n\nadd_spacer|small|\nadd_button|gmwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "``|0|0|\nadd_button|gmmsgbutton|`5Send message``|0|0|\n\nadd_spacer|small| \nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}
											if (btn == "showoffline") {
												string onlinelist = "";
												string offlinelist = "";
												string offname = "";
												int onlinecount = 0;
												int totalcount = ((PlayerInfo*)(peer->data))->friendinfo.size();
												vector<string>offliness = ((PlayerInfo*)(peer->data))->friendinfo;

												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													string name = ((PlayerInfo*)(currentPeer->data))->rawName;

													if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
														onlinelist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + "``|0|0|";
														onlinecount++;

														offliness.erase(std::remove(offliness.begin(), offliness.end(), name), offliness.end());
													}
												}
												for (std::vector<string>::const_iterator i = offliness.begin(); i != offliness.end(); ++i) {
													offname = *i;
													offlinelist += "\nadd_button|offlinefrns_" + offname + "|`4OFFLINE: `o" + offname + "``|0|0|";

												}

												/*if (onlinecount > 0) {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\n\nadd_spacer|small|\nadd_textbox|All of your friend are online!|\n\nadd_spacer|small| \n\nadd_spacer|small| \nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backonlinelist|Back``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
													ENetPacket * packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}
												else {*/
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\nadd_spacer|small|" + offlinelist + "\nadd_spacer|small|\n\nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backonlinelist|Back``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;

											}
											if (btn == "removecon") {
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastFrn) {


														((PlayerInfo*)(peer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->lastFrn), ((PlayerInfo*)(peer->data))->friendinfo.end());


														((PlayerInfo*)(currentPeer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(currentPeer->data))->friendinfo.begin(), ((PlayerInfo*)(currentPeer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->rawName), ((PlayerInfo*)(currentPeer->data))->friendinfo.end());


														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `2" + ((PlayerInfo*)(peer->data))->displayName + " `ohas removed you as a friend."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(currentPeer, 0, packet);
														delete p.data;
													}
												}
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Friend removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`oOk, you are no longer friends with `o" + ((PlayerInfo*)(peer->data))->lastFrnName + ".``|\n\nadd_spacer|small|\nadd_button||`oOK``|0|0|\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											if (btn == "removeconoff") {
												((PlayerInfo*)(peer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->lastFrn), ((PlayerInfo*)(peer->data))->friendinfo.end());

												std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->lastFrn + ".json");
												if (ifff.fail()) {
													ifff.close();
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oPlayer `5" + ((PlayerInfo*)(peer->data))->lastFrn + " `odoes not exist!"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
													continue;
												}
												if (ifff.is_open()) {
												}
												json j;
												ifff >> j; //load

												vector<string> friends;

												for (int i = 0; i < j["friends"].size(); i++) {
													friends.push_back(j["friends"][i]);
												}

												friends.erase(std::remove(friends.begin(), friends.end(), ((PlayerInfo*)(peer->data))->rawName), friends.end());

												j["friends"] = friends; //edit

												std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->lastFrn + ".json"); //save
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}

												o << j << std::endl;

												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Friend removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`oOk, you are no longer friends with `o" + ((PlayerInfo*)(peer->data))->lastFrn + ".``|\n\nadd_spacer|small|\nadd_button||`oOK``|0|0|\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											if (btn.substr(0, 11) == "onlinefrns_") {
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->rawName == btn.substr(11, cch.length() - 11 - 1)) {
														((PlayerInfo*)(peer->data))->lastFrnWorld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
														((PlayerInfo*)(peer->data))->lastFrnName = ((PlayerInfo*)(currentPeer->data))->tankIDName;
														((PlayerInfo*)(peer->data))->lastFrn = ((PlayerInfo*)(currentPeer->data))->rawName;
													}
												}

												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastFrnName + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastFrnName + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastFrnWorld + "`o.|\n\nadd_spacer|small|\nadd_button|frnwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastFrnWorld + "``|0|0|\nadd_button|msgbutton|`5Send message``|0|0|\n\nadd_spacer|small|\nadd_button|removecon|`oRemove as friend``|0|0|\nadd_button|backonlinelist|`oBack``|0|0|\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											if (btn == "frnwarpbutton") {
												sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
												joinWorld(peer, ((PlayerInfo*)(peer->data))->lastFrnWorld, 0, 0);
											}
											if (btn == "msgbutton") {

												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`5Message to `o" + ((PlayerInfo*)(peer->data))->lastFrnName + "|left|660|\nadd_spacer|small|\nadd_text_input|msgtext|||50|\nend_dialog|msgdia|Cancel|`5Send``| \nadd_spacer|big|\nadd_button|backonlinelist|`oBack``|0|0|\nadd_quick_exit|\n"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											if (btn.substr(0, 12) == "offlinefrns_") {
												((PlayerInfo*)(peer->data))->lastFrn = btn.substr(12, cch.length() - 12 - 1);

												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastFrn + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastFrn + " is `4offline`o.``|\nadd_spacer|small|\nadd_button|removeconoff|`oRemove as friend``|0|0|\nadd_button|showoffline|`oBack``|0|0|\nadd_quick_exit|"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											if (btn.substr(0, 7) == "nothing") {
												sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
												joinWorld(peer, btn.substr(7, cch.length() - 7 - 1), 0, 0);
											}
											if (btn == "addfriendrnbutton") {
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) { // if last wrench

														if (((PlayerInfo*)(peer->data))->lastfriend == ((PlayerInfo*)(currentPeer->data))->rawName) { // last  h friend

															((PlayerInfo*)(peer->data))->friendinfo.push_back(((PlayerInfo*)(currentPeer->data))->rawName); //add


															((PlayerInfo*)(currentPeer->data))->friendinfo.push_back(((PlayerInfo*)(peer->data))->rawName);

															string text = "action|play_sfx\nfile|audio/love_in.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length());
															memcpy(data + 4 + text.length(), &zero, 1);
															ENetPacket* packet2 = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet2);
															enet_peer_send(peer, 0, packet2);
															delete data;
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ADDED: `oYou're now friends with `w" + ((PlayerInfo*)(peer->data))->rawName + "`o!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);
															delete p.data;
															GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ADDED: `oYou're now friends with `w" + ((PlayerInfo*)(currentPeer->data))->rawName + "`o!"));
															ENetPacket* packet3 = enet_packet_create(p3.data,
																p3.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet3);
															delete p3.data;
															std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


															if (ifff.fail()) {
																ifff.close();


															}
															if (ifff.is_open()) {
															}
															json j;
															ifff >> j; //load


															j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo; //edit

															std::ifstream ifff2("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");


															if (ifff2.fail()) {
																ifff2.close();


															}
															if (ifff2.is_open()) {
															}
															json x;
															ifff2 >> x; //load


															x["friends"] = ((PlayerInfo*)(currentPeer->data))->friendinfo; //edit


															std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
															if (!o.is_open()) {
																cout << GetLastError() << endl;
																_getch();
															}

															o << j << std::endl;

															std::ofstream a("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
															if (!a.is_open()) {
																cout << GetLastError() << endl;
																_getch();
															}

															a << x << std::endl;
														}
														else {
															GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5[`wFriend request sent to " + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`5]"));
															ENetPacket* packet4 = enet_packet_create(p4.data,
																p4.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packet4);
															delete p4.data;
															string text = "action|play_sfx\nfile|audio/tip_start.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length());
															memcpy(data + 4 + text.length(), &zero, 1);
															ENetPacket* packet2 = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet2);
															delete data;
															((PlayerInfo*)(currentPeer->data))->lastfriend = ((PlayerInfo*)(peer->data))->rawName;
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND REQUEST: `oYou've received a `wfriend request `ofrom `w" + ((PlayerInfo*)(peer->data))->rawName + "`o! To accept, click the `wwrench by his/her name `oand then choose `wAdd as friend`o."));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);
															delete p.data;
														}
													}
												}
											}


											if (btn == "starttrd")
											{
												if (world->owner == ((PlayerInfo*)(peer->data))->rawName && world->isPublic == false)
												{
													if (((PlayerInfo*)(peer->data))->haveGrowId == true)
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_button|chc0|Close|noflags|0|0|\nadd_spacer|small|\nadd_textbox|Choose amount of `4Gems`w to sell world for:|\nadd_text_input|worldoffer|World Offer||30|\nend_dialog|disabled111|Cancel|Request Offer!\n"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														// need also to reset seller/buyer when wl breaks and any exits (door or exit world) declines, or disconnects happen.
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR! `w >> `7You need a GrowID first to trade worlds! `wCreate one, it's free."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR! `w >> `7You are not the `9world `2owner`w or world is Public!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "dwheel")
											{

											}
											if (btn == "swheel")
											{

											}
											if (btn == "lkw")
											{
												if (((PlayerInfo*)(peer->data))->boughtLKW == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Dragon Knight Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Dragon Knight Wings``|left|\nadd_spacer|small|\nadd_button|yeslkw|`9Purchase for - `150.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "pwing")
											{
												if (((PlayerInfo*)(peer->data))->boughtPHOENIX == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Phoenix Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Phoenix Wings``|left|\nadd_spacer|small|\nadd_button|yespwng|`9Purchase for - `110.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "ndev")
											{
												if (((PlayerInfo*)(peer->data))->boughtNDEV == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Nightmare Devil Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Nightmare Devil Wings``|left|\nadd_spacer|small|\nadd_button|yesndev|`9Purchase for - `17.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "txmom")
											{
												if (((PlayerInfo*)(peer->data))->boughtTXMOM == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9TXMom's Crown``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9TXMom's Crown``|left|\nadd_spacer|small|\nadd_button|yestxmom|`9Purchase for - `17.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "dav")
											{
												if (((PlayerInfo*)(peer->data))->boughtDAV == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Da Vinci Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Da Vinci Wings``|left|\nadd_spacer|small|\nadd_button|yesdav|`9Purchase for - `1150.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "flashaxe")
											{
												if (((PlayerInfo*)(peer->data))->boughtFLASHAXE == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Diamond Flashaxe``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Diamond Flashaxe``|left|\nadd_spacer|small|\nadd_button|yesflashaxe|`9Purchase for - `13.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "violet")
											{
												if (((PlayerInfo*)(peer->data))->boughtVIOLET == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Violet Protodrake Leash``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Violet Protodrake Leash``|left|\nadd_spacer|small|\nadd_button|yesviolet|`9Purchase for - `17.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "zeus")
											{
												if (((PlayerInfo*)(peer->data))->boughtZEUS == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Zeus's Lightning Bolt``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Zeus's Lightning Bolt``|left|\nadd_spacer|small|\nadd_button|yeszeus|`9Purchase for - `15.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "gbow")
											{
												if (((PlayerInfo*)(peer->data))->boughtGBOW == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Heartbow``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Heartbow``|left|\nadd_spacer|small|\nadd_button|yesgbow|`9Purchase for - `15.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "gangel")
											{
												if (((PlayerInfo*)(peer->data))->boughtGANGEL == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Angel Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Angel Wings``|left|\nadd_spacer|small|\nadd_button|yesgangel|`9Purchase for - `115.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "gbug")
											{
												if (((PlayerInfo*)(peer->data))->boughtGBUG == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Love Bug``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Love Bug``|left|\nadd_spacer|small|\nadd_button|yesgbug|`9Purchase for - `12.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "hammer")
											{
												if (((PlayerInfo*)(peer->data))->boughtWAR == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `bWar hammer``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `bWar hammer `wand get 10-15 gems per block``|left|\nadd_spacer|small|\nadd_button|yeswar|`9Purchase for - `1200.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "rayman")
											{
												if (((PlayerInfo*)(peer->data))->boughtRAY == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `wRayman Fist``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wRayman fist and 3 far``|left|\nadd_spacer|small|\nadd_button|yesray|`9Purchase for - `250000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "tk69")
											{
												if (((PlayerInfo*)(peer->data))->boughtTK == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `5Tk69 mystical board``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wTK69 and got 5-13 gems when breaking blocks!``|left|\nadd_spacer|small|\nadd_button|yestk|`9Purchase for - `2350.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "ances")
											{
												if (((PlayerInfo*)(peer->data))->boughtAAC == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `6Ancestral``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `6Ancestral `wand get 5-12 gems per blocks + /ssb!``|left|\nadd_spacer|small|\nadd_button|yesaac|`9Purchase for - `2450000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "spd")
											{
												if (((PlayerInfo*)(peer->data))->boughtSPD == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1486|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `bDigger Spade``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `bDigger spade `wand 2 hit when breaking block``|left|\nadd_spacer|small|\nadd_button|yesspd|`9Purchase for - `250000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "dm")
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Door Mover``|left|1404|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `bDoor Mover``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wDoor Mover``|left|\nadd_spacer|small|\nadd_button|yesdm|`9Purchase for - `25000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
											if (btn == "gpegasus")
											{
												if (((PlayerInfo*)(peer->data))->boughtGPEGASUS == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Pegasus``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Pegasus``|left|\nadd_spacer|small|\nadd_button|yesgpegasus|`9Purchase for - `17.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "gglass")
											{
												if (((PlayerInfo*)(peer->data))->boughtGGLASS == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Heart Glasses``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Heart Glasses``|left|\nadd_spacer|small|\nadd_button|yesgglass|`9Purchase for - `12.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "gneck")
											{
												if (((PlayerInfo*)(peer->data))->boughtGNECK == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Diamond Necklace``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Diamond Necklace``|left|\nadd_spacer|small|\nadd_button|yesgneck|`9Purchase for - `15.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "gtangel")
											{
												if (((PlayerInfo*)(peer->data))->boughtGTANGEL == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Teeny Golden Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Teeny Golden Wings``|left|\nadd_spacer|small|\nadd_button|yesgtangel|`9Purchase for - `113.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "gdiaper")
											{
												if (((PlayerInfo*)(peer->data))->boughtGDIAPER == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Diaper``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Diaper``|left|\nadd_spacer|small|\nadd_button|yesgdiaper|`9Purchase for - `15.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "hscythe")
											{
												if (((PlayerInfo*)(peer->data))->boughtHSCYTHE == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Heavenly Scythe``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Heavenly Scythe``|left|\nadd_spacer|small|\nadd_button|yeshscythe|`9Purchase for - `115.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "grob")
											{
												if (((PlayerInfo*)(peer->data))->boughtGROB == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Air Robinsons``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Air Robinsons``|left|\nadd_spacer|small|\nadd_button|yesgrob|`9Purchase for - `110.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "ccrown")
											{
												if (((PlayerInfo*)(peer->data))->boughtCCROWN == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Challenge Crown``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Challenge Crown``|left|\nadd_spacer|small|\nadd_button|yesccrown|`9Purchase for - `17.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "chimera")
											{
												if (((PlayerInfo*)(peer->data))->boughtCHIMERA == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Danieldd's Chimera Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Danieldd's Chimera Wings``|left|\nadd_spacer|small|\nadd_button|yeschimera|`9Purchase for - `15.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "brainflower")
											{
												if (((PlayerInfo*)(peer->data))->boughtBRAIN == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Brainflower``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Brainflower``|left|\nadd_spacer|small|\nadd_button|yesbrain|`9Purchase for - `110.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "cwd")
											{
												if (((PlayerInfo*)(peer->data))->boughtCWD == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Token Items``|left|1486|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `1Focused Eyes``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `1Focused Eyes!``|left|\nadd_spacer|small|\nadd_button|yescwd|`9Purchase for - `15000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "rfs")
											{
												if (((PlayerInfo*)(peer->data))->boughtRFS == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Token Items``|left|1486|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Pickaxe``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Pickaxe!``|left|\nadd_spacer|small|\nadd_button|yesrfs|`9Purchase for - `115.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "cdg")
											{
												if (((PlayerInfo*)(peer->data))->boughtCDG == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Token Items``|left|1486|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Puppy Leash``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Puppy Leash!``|left|\nadd_spacer|small|\nadd_button|yescdg|`9Purchase for - `110.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "lgk")
											{
												if (((PlayerInfo*)(peer->data))->boughtLGK == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Katana``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Katana `w& `9/supporter`w!``|left|\nadd_spacer|small|\nadd_button|yeslgk|`9Purchase for - `125.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "lwp")
											{
												if (((PlayerInfo*)(peer->data))->boughtLWHIP == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Whip of Truth``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Whip of Truth!``|left|\nadd_spacer|small|\nadd_button|yeslwp|`9Purchase for - `180.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "lgb")
											{
												if (((PlayerInfo*)(peer->data))->boughtLGB == false) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Bot``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Bot!``|left|\nadd_spacer|small|\nadd_button|yeslgb|`9Purchase for - `125.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "ltit")
											{
												if (((PlayerInfo*)(peer->data))->boughtLTIT == false) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Title``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Title!``|left|\nadd_spacer|small|\nadd_button|yestit|`9Purchase for - `170.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "lgw")
											{
												if (((PlayerInfo*)(peer->data))->boughtLGW == false) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Wings!``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Wings!``|left|\nadd_spacer|small|\nadd_button|yeslgw|`9Purchase for - `140.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "lgd")
											{
												if (((PlayerInfo*)(peer->data))->boughtLGD == false) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Dragon of Legend!``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Dragon of Legend!``|left|\nadd_spacer|small|\nadd_button|yeslgd|`9Purchase for - `120.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "traderubbles") {
												if (((PlayerInfo*)(peer->data))->rubble > 10) {
													int valgem = rand() % 70;
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));
													int b = atoi(content.c_str());
													int bb = b + valgem;
													ofstream myfile;
													myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile << bb;
													myfile.close();
													((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble - 10;
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You got " + to_string(valgem) + " gems."));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;
												}
												else {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`3You need 10 rubble to exchange again!"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}
											}
											if (btn == "traderubble") {
												if (((PlayerInfo*)(peer->data))->rubble > 0) {
													int valgem = rand() % 15;
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));
													int b = atoi(content.c_str());
													int bb = b + valgem;
													ofstream myfile;
													myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile << bb;
													myfile.close();
													((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble - 1;
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You got " + to_string(valgem) + " gems."));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;
												}
												else {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`3You need enough rubble to exchange again!"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}
												if (((PlayerInfo*)(peer->data))->haveGrowId) {
													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

													PlayerInfo* p = ((PlayerInfo*)(peer->data));

													string username = PlayerDB::getProperName(p->rawName);



													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load
													j["level"] = p->level;
													j["xp"] = p->xp;
													j["rubblexp"] = p->rubblexp;
													j["rubble"] = p->rubble;

													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;
												}
											}
											if (btn == "no")
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wWelcome to our store!|left|1430|\nadd_spacer|small|\nadd_label|small|`rPlease choose item that you want to purchase!|left|\nadd_spacer|small|\nadd_label_with_icon|small|`#Legendary items`4:|left|1790|\nset_labelXMult|1.1\nadd_button_with_icon|ltit||staticBlueFrame|1794|70000|\nadd_button_with_icon|lgb||staticBlueFrame|1780|25000|\nadd_button_with_icon|lgw||staticBlueFrame|1784|40000|\nadd_button_with_icon|lgd||staticBlueFrame|1782|20000|\nadd_button_with_icon|lgk||staticBlueFrame|2592|25000|\nadd_button_with_icon|lwp||staticBlueFrame|6026|80000|\nadd_button_with_icon|lkw||staticBlueFrame|7734|50000|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|small|`rToken items`4:|left|1486|\nset_labelXMult|1.1\nadd_button_with_icon|spd||staticBlueFrame|2952|50000|\nadd_button_with_icon|cwd||staticBlueFrame|1204|5000|\nadd_button_with_icon|rfs||staticBlueFrame|1438|15000|\nadd_button_with_icon|cdg||staticBlueFrame|1742|10000|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|small|`9Golden items`4:|left|1458||\nset_labelXMult|1.1\nadd_button_with_icon|gneck||staticBlueFrame|1466|5000|\nadd_button_with_icon|gbow||staticBlueFrame|1464|5000|\nadd_button_with_icon|gangel||staticBlueFrame|1460|15000|\nadd_button_with_icon|grob||staticBlueFrame|1822|10000|\nadd_button_with_icon|gtangel||staticBlueFrame|2392|13500|\nadd_button_with_icon||END_LIST|noflags|0|0|\nset_labelXMult|1.1\nadd_button_with_icon|gbug||staticBlueFrame|2394|2500|\nadd_button_with_icon|hscythe||staticBlueFrame|2386|15000|\nadd_button_with_icon|gpegasus||staticBlueFrame|4414|7500|\nadd_button_with_icon|gglass||staticBlueFrame|4420|2500|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|small|`5Special items`4:|left|572|\nset_labelXMult|1.1\nadd_button_with_icon|pwing||staticBlueFrame|1674|10000|\nadd_button_with_icon|dav||staticBlueFrame|8286|150000|\nadd_button_with_icon|zeus||staticBlueFrame|1804|5000|\nadd_button_with_icon|ndev||staticBlueFrame|1970|7500|\nadd_button_with_icon|txmom||staticBlueFrame|4626|7500|\nadd_button_with_icon|flashaxe||staticBlueFrame|1836|3000|\nadd_button_with_icon||END_LIST|noflags|0|0||\nset_labelXMult|1.1\nadd_button_with_icon|violet||staticBlueFrame|1868|7500|\nadd_button_with_icon|chimera||staticBlueFrame|6334|5000|\nadd_button_with_icon|brainflower||staticBlueFrame|3462|10000|\nadd_button_with_icon|ccrown||staticBlueFrame|3138|7500|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|small|`8Other items`4:|left|5078|\nset_labelXMult|1.1\nadd_button_with_icon|hammer||staticBlueFrame|7912|100000|\nadd_button_with_icon|ances||staticBlueFrame|5078|450000|\nadd_button_with_icon|rayman||staticBlueFrame|5480|50000|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_spacer|small|\nend_dialog|chc0|Nevermind|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
											if (btn == "store") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wWelcome to Our Store!|left|1430|\nadd_spacer|small|\nadd_smalltext|`wPlease select the Rank/Asset that you'd like to get more information on. Want to purchase `#@Moderator`w? Then click on ' `#Purchase Moderator `w'. Want to purchase `1VIP`w? Then click on ' `1Purchase VIP `w'. Etc you will get the point, now below are the ranks/assets that are available for Purchase!|\nadd_spacer|small|\nadd_label_with_icon|small|`5Current Assets`4:|left|732|\nset_labelXMult|1.1\nadd_button_with_icon|pmods||staticBlueFrame|278||\nadd_button_with_icon|pvips||staticBlueFrame|158|\nadd_button_with_icon|pgems||staticBlueFrame|112||\nadd_button_with_icon|plvls||staticBlueFrame|1488||\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_spacer|small|\nend_dialog|chc0|Nevermind|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "pvips") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPurchase `1VIP|left|18|\nadd_smalltext|`4Make sure to read this information clearly!|\nadd_spacer|small|\nadd_smalltext|`oPrice: `35Diamond Locks|\nadd_smalltext|`oStock: `w[`4~`w]|\nadd_smalltext|`oDuration: `w[`4~`w]|\nadd_spacer|small|\nadd_label|small|`qRules:|left|\nadd_spacer|small|\nadd_smalltext|`b1. `rDo not sell your account as it can result into an ip-ban!|\nadd_smalltext|`b2. `rNever share your account it can result into an ip-ban!|\nadd_smalltext|`b3. `rDon't Abuse your role Powers!|\nadd_spacer|small|\nadd_label|small|`qCommands:|left|\nadd_spacer|small|\nadd_smalltext|`eAll commands will be displayed in /vhelp.|\nadd_spacer|small|\nadd_label|small|`qHow to Purchase?|left|\nadd_spacer|small|\nadd_smalltext|`wTo `2Successfully `wpurchase `1VIP`w, You must firstly head over to discord and read the information in the #purchase channel then head over to the world: `5SOLO45 `win normal growtopia and deposit in your worldlocks and make sure to include `1#BUYVIP`w.|\nadd_spacer|small|\nend_dialog|chc0|Thank you|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "pmods") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPurchase `#MOD|left|18|\nadd_smalltext|`4Make sure to read this information clearly!|\nadd_spacer|small|\nadd_smalltext|`oPrice: `310Diamond Locks|\nadd_smalltext|`oStock: `w[`4~`w]|\nadd_smalltext|`oDuration: `w[`4~`w]|\nadd_spacer|small|\nadd_label|small|`qRules:|left|\nadd_spacer|small|\nadd_smalltext|`b1. `rDo not sell your account as it can result into an ip-ban!|\nadd_smalltext|`b2. `rNever share your account it can result into an ip-ban!|\nadd_smalltext|`b3. `rDon't Abuse your role Powers!|\nadd_spacer|small|\nadd_label|small|`qCommands:|left|\nadd_spacer|small|\nadd_smalltext|`eAll commands will be displayed in /ahelp.|\nadd_spacer|small|\nadd_label|small|`qHow to Purchase?|left|\nadd_spacer|small|\nadd_smalltext|`wTo `2Successfully `wpurchase `#MOD`w, You must firstly head over to discord and read the information in the #purchase channel then head over to the world: `5SOLO45 `win normal growtopia and deposit in your worldlocks and make sure to include `##BUYMOD`w.|\nadd_spacer|small|\nend_dialog|chc0|Thank you|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "pgems") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPurchase `9GEMS|left|18|\nadd_smalltext|`4Make sure to read this information clearly!|\nadd_spacer|small|\nadd_smalltext|`oPrice: `91000/1World Lock|\nadd_smalltext|`oStock: `w[`4~`w]|\nadd_smalltext|`oDuration: `w[`4~`w]|\nadd_spacer|small|\nadd_label|small|`qRules:|left|\nadd_spacer|small|\nadd_smalltext|`b1. `rDo not sell your account as it can result into an ip-ban!|\nadd_smalltext|`b2. `rNever share your account it can result into an ip-ban!|\nadd_smalltext|`b3. `rTrying to sell your gems will result into an ip-ban!|\nadd_spacer|small|\nadd_label|small|`qHow to Purchase?|left|\nadd_spacer|small|\nadd_smalltext|`wTo `2Successfully `wpurchase `9GEMS`w, You must firstly head over to discord and read the information in the #purchase channel then head over to the world: `5SOLO45 `win normal growtopia and deposit in your worldlocks and make sure to include `9@#BUYGEMS`w.|\nadd_spacer|small|\nend_dialog|chc0|Thank you|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "plvls") {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPurchase `3Levels|left|18|\nadd_smalltext|`4Make sure to read this information clearly!|\nadd_spacer|small|\nadd_smalltext|`oPrice: `93/1World Lock|\nadd_smalltext|`oStock: `w[`4~`w]|\nadd_smalltext|`oDuration: `w[`4~`w]|\nadd_spacer|small|\nadd_label|small|`qRules:|left|\nadd_spacer|small|\nadd_smalltext|`b1. `rDo not sell your account as it can result into an ip-ban!|\nadd_smalltext|`b2. `rNever share your account it can result into an ip-ban!|\nadd_spacer|small|\nadd_label|small|`qHow to Purchase?|left|\nadd_spacer|small|\nadd_smalltext|`wTo `2Successfully `wpurchase `3Levels`w, You must firstly head over to discord and read the information in the #purchase channel then head over to the world: `5SOLO45 `win normal growtopia and deposit in your worldlocks and make sure to include `3#BUYLEVELS`w.|\nadd_spacer|small|\nend_dialog|chc0|Thank you|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												//enet_host_flush(server);
												delete p.data;
											}
											if (btn == "yeslwp") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 79999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Whip of Truth!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 80000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtLWHIP = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;

													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}

											}
											if (btn == "yeslkw") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 49999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Dragon Knight's Wings!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 50000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtLKW = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;

													PlayerInventory inventory;
													InventoryItem item;
													item.itemCount = 1;
													item.itemID = 18;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 32;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 7734;
													inventory.items.push_back(item);
													sendInventory(peer, inventory);

													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}

											}
											if (btn == "yestit") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 69999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Title!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													GamePacket p5 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9We are disconnecing you once for legendary title."));
													ENetPacket* packet5 = enet_packet_create(p5.data,
														p5.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet5);
													delete p5.data;

													int gemcalc10k = b - 70000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtLTIT = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;


													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}

											}
											if (btn == "yescwd") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 4999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Focused Eyes!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 5000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtCWD = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;


													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesrfs") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 14999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Golden Pickaxe!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 15000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtRFS = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;


													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesray") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 49999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Rayman fist"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 50000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtRAY = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;


													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yestk") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 349999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought TK69 Mystical board"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 350000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtTK = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtRAY; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;


													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesaac") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 449999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Ancestral"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 450000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtAAC = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;


													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesspd") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 49999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Digger Spade"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 50000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtSPD = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;


													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesdm") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 4999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Digger Spade"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 5000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;
													PlayerInventory inventory;

													InventoryItem item;
													item.itemCount = 1;
													item.itemID = 18;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 32;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 1404;
													inventory.items.push_back(item);
													sendInventory(peer, inventory);

													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yespwng") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 9999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Phoenix Wings!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 10000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtPHOENIX = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yeszeus") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 4999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Zeus's Lightning Bolt!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 5000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtZEUS = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesgangel") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 14999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Golden Angel Wings!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 15000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtGANGEL = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yeswar") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 199999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought War hammer!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 200000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtWAR = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesgbug") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 2499)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Golden Love Bug!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 2500;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtGBUG = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesgpegasus") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 7499)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Golden Pegasus!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 7500;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtGPEGASUS = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesgglass") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 2499)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Golden Heart Glasses!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 2500;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtGGLASS = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesgneck") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 4999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Golden Diamond Necklace!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 5000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtGNECK = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesgtangel") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 13499)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Teeny Golden Wings!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 13500;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtGTANGEL = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesgdiaper") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 4999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Golden Diaper!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 5000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtGDIAPER = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yeshscythe") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 14999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Heavenly Scythe!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 15000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtHSCYTHE = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesgrob") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 9999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Golden Air Robinsons!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 10000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtGROB = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesgbow") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 4999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Golden Heartbow!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 5000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtGBOW = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesccrown") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 7499)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Challenge Crown!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 7500;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtCCROWN = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yeschimera") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 4999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Danieldd's Chimera Wings"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 5000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtCHIMERA = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesbrain") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 9999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Brainflower"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 10000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtBRAIN = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesflashaxe") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 2999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Diamond Flashaxe!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 3000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtFLASHAXE = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesviolet") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 7499)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Violet Protodrake Leash!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 7500;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtVIOLET = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesdav") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 149000)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Da Vinci Wings!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 150000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtDAV = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yesndev") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 7499)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Nightmare Devil Wings!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 7500;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtNDEV = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yestxmom") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 7499)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought TXMom's Crown!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 7500;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtTXMOM = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yescdg") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 9999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Puppy Leash!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 10000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtCDG = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yeslgk") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 24999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Katana!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 25000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtLGK = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;



													PlayerInventory inventory;
													InventoryItem item;
													item.itemCount = 1;
													item.itemID = 18;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 32;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 2592;
													inventory.items.push_back(item);
													sendInventory(peer, inventory);



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yeslgb") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 24999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Bot!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 25000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtLGB = true;



													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;


													PlayerInventory inventory;
													InventoryItem item;
													item.itemCount = 1;
													item.itemID = 18;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 32;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 1780;
													inventory.items.push_back(item);
													sendInventory(peer, inventory);



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yeslgw") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 39999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Wings!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 40000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtLGW = true;



													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;


													PlayerInventory inventory;
													InventoryItem item;
													item.itemCount = 1;
													item.itemID = 18;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 32;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 1784;
													inventory.items.push_back(item);
													sendInventory(peer, inventory);



													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "yeslgd") {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 19999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Dragon of Legend!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 20000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->boughtLGD = true;



													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;

													PlayerInventory inventory;
													InventoryItem item;
													item.itemCount = 1;
													item.itemID = 18;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 32;
													inventory.items.push_back(item);
													item.itemCount = 1;
													item.itemID = 1782;
													inventory.items.push_back(item);
													sendInventory(peer, inventory);


													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											if (btn == "lwings")
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wDisabled shop, need to improve it soon!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;

												/*std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 9999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now have access to legendary wings! do /item 1784 to get them."));
													ENetPacket * packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 10000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems to buy these"));
													ENetPacket * packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}*/


												if (btn == "pay500gem") {

													/*std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													std::ifstream ifsz2("wrenchsessions/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentxx((std::istreambuf_iterator<char>(ifsz2)),
														(std::istreambuf_iterator<char>()));

													std::ifstream ifs3("gemdb/" + contentxx + ".txt");
													std::string contentxxp((std::istreambuf_iterator<char>(ifs3)),
														(std::istreambuf_iterator<char>()));


													int b = atoi(content.c_str());
													int b2 = atoi(contentxxp.c_str());
													if (b > 499)
													{
														if (((PlayerInfo*)(peer->data))->rawName == contentxx)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wExplain me why you wanna pay to yourself first bruh.``"));
															ENetPacket * packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;

														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - Sent `4Gems `wto " + contentxx + ", may need to reenter to take effect.``"));
															ENetPacket * packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;

															int gemcalc500 = b - 500;
															int gemcalc500add = b2 + 500;

															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc500);
															myfile2.close();

															ofstream myfile4;
															myfile4.open("gemdb/" + contentxx + ".txt");
															myfile4 << std::to_string(gemcalc500add);
															myfile4.close();
														}



													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rYou don't have enough `4Gems `w to pay.``"));
														ENetPacket * packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													if (btn == "pay5000gem")
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#Feature coming soon!``"));
														ENetPacket * packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}*/

												}

											}
											if (isPasswordDialog) {
												cout << oldpass << endl;
												cout << password2 << endl;
												cout << password2verify << endl;
												if (((PlayerInfo*)(peer->data))->tankIDPass != oldpass) {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_textbox|`4Oops! `oThe Current Password you have entered is incorrect!``|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}
												else if (password2 != password2verify) {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_textbox|`4Oops! `oThe Password Verify failed.``|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}
												else {
													((PlayerInfo*)(peer->data))->tankIDPass = password2;
													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["password"] = hashPassword(((PlayerInfo*)(peer->data))->tankIDPass); //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;
													GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), ((PlayerInfo*)(peer->data))->rawName), password2));
													ENetPacket* packet3 = enet_packet_create(p3.data,
														p3.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet3);
													GamePacket p9 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Your password has been changed!"));
													ENetPacket* packet9 = enet_packet_create(p9.data,
														p9.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet9);
													delete p9.data;
													enet_peer_disconnect_later(peer, 0);
												}
											}
											if (isGrowidDialog) {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 19999)
												{

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Your growid has been changed!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 20000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;


													((PlayerInfo*)(peer->data))->tankIDName = newgrowid;
													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load
													j["username"] = (((PlayerInfo*)(peer->data))->tankIDName); //edit




													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;
													GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), ((PlayerInfo*)(peer->data))->rawName), newgrowid));
													ENetPacket* packet3 = enet_packet_create(p3.data,
														p3.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet3);
													string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
													memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetsou);

												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rYou need to have enough gems to change `2name`w!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}

#ifdef REGISTRATION
											if (isRegisterDialog) {


												int regState = PlayerDB::playerRegister(peer, username, password, passwordverify, discord, pin);
												if (regState == 1) {
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string acontent((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));
													int arda = 0;
													ofstream myfile;
													myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile << arda;
													myfile.close();
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrowID GET!``|left|206|\n\nadd_spacer|small|\nadd_label|small|A `wGrowID ``with the log on of `w" + username + " ``and the password of `w" + password + " ``created. Write them down, they will be required to log on from now.|left|\nend_dialog|sasasa|Continue|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);

													//enet_host_flush(server);
													delete p.data;
													GamePacket p9 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3Your account was created"));
													ENetPacket* packet9 = enet_packet_create(p9.data,
														p9.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet9);
													delete p9.data;
													GamePacket p7 = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), 0));
													ENetPacket* packet7 = enet_packet_create(p7.data,
														p7.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet7);
													GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), username), password));
													ENetPacket* packet3 = enet_packet_create(p3.data,
														p3.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet3);

													//enet_host_flush(server);
													delete p3.data;
													string nam1e = "```0" + username;
													((PlayerInfo*)(event.peer->data))->displayName = username;
													((PlayerInfo*)(event.peer->data))->tankIDName = username;
													((PlayerInfo*)(event.peer->data))->tankIDPass = password;
													((PlayerInfo*)(event.peer->data))->rawName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
													((PlayerInfo*)(event.peer->data))->msgName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
													((PlayerInfo*)(event.peer->data))->haveGrowId = true;
													GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), nam1e));
													memcpy(p4.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
													ENetPacket* packet4 = enet_packet_create(p4.data,
														p4.len,
														ENET_PACKET_FLAG_RELIABLE);
													string text = "action|play_sfx\nfile|audio/piano_nice.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet2);

													//enet_host_flush(server);
													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer))
														{
															enet_peer_send(currentPeer, 0, packet4);
															GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `2New Account with username: `4" + username + " `rIP:`4" + ((PlayerInfo*)(peer->data))->charIP));
															string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length());
															memcpy(data + 4 + text.length(), &zero, 1);

															for (currentPeer = server->peers;
																currentPeer < &server->peers[server->peerCount];
																++currentPeer)
															{
																if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																	continue;
																if (!((PlayerInfo*)(currentPeer->data))->radio)
																	continue;
																if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999) {
																	ENetPacket* packet6 = enet_packet_create(p6.data,
																		p6.len,
																		ENET_PACKET_FLAG_RELIABLE);

																	enet_peer_send(currentPeer, 0, packet6);




																	ENetPacket* packet2 = enet_packet_create(data,
																		5 + text.length(),
																		ENET_PACKET_FLAG_RELIABLE);

																	enet_peer_send(currentPeer, 0, packet2);

																	//enet_host_flush(server);
																}
															}
															delete data;
															delete p6.data;
															delete p4.data;
														}
													}
												}
												else if (regState == -1) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rAccount creation has failed, because it already exists!``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (regState == -2) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rAccount creation has failed, because the name is too short!``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (regState == -3) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Passwords mismatch!``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (regState == -4) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Account creation has failed, because email address is invalid!``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (regState == -5) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Account creation has failed, because Discord ID is invalid!``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (regState == -6) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Account creation has failed due to account name that is being used by system!``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (regState == -7) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Oops! `9Looks like players data have been resetted, `wmake sure to use your `bPIN `wthat you used when creating your account. `2For help, message `w! Wry#4304 on Discord!`w``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (regState == -8) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Oops! `9Looks like `wPIN `9is not in a range of 1000-9999. Choose a `wPIN `9from 1000-9999!``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (regState == -9) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Oops! `9Looks like `wPIN `9contains text, only numbers. Choose a `wPIN `9from 1000-9999!``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (regState == -10) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wPlayer name contains illegal characters.``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (regState == -11) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wAmini siktim cokertme.``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
#endif
											}
										}
										string dropText = "action|drop\n|itemID|";
										if (cch.find(dropText) == 0)
										{

											//      sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y, atoi(cch.substr(dropText.length(), cch.length() - dropText.length() - 1).c_str()), 0, 0);
											std::stringstream ss(cch);
											std::string to;
											int idx = -1;
											int count = -1;
											while (std::getline(ss, to, '\n')) {
												vector<string> infoDat = explode("|", to);
												if (infoDat.size() == 3) {
													if (infoDat[1] == "itemID") idx = atoi(infoDat[2].c_str());
													if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
												}
											}
											((PlayerInfo*)(peer->data))->lastdropitem = idx;
											((PlayerInfo*)(peer->data))->lastdropitemcount = count;
											if (idx == -1) continue;
											if (itemDefs.size() < idx || idx < 0) continue;
											if (((PlayerInfo*)(peer->data))->lastdropitem == 18 || ((PlayerInfo*)(peer->data))->lastdropitem == 32) {
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You can't drop that."));
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete ps.data;
												continue;
											}
											else {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wDrop " + itemDefs.at(idx).name + "``|left|" + std::to_string(idx) + "|\nadd_textbox|`oHow many to drop?|\nadd_text_input|dropitemcount|||3|\nend_dialog|dropdialog|Cancel|Ok|\n"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
											}
										}
										if (cch.find("text|") != std::string::npos) {
											bool canchat = true;
											PlayerInfo* pData = ((PlayerInfo*)(peer->data));
											if (str.length() && str[0] == '/')
											{
												sendConsoleMsg(peer, "`6" + str);
												sendAction(peer, ((PlayerInfo*)(peer->data))->netID, str);

											}

											else if (((PlayerInfo*)(peer->data))->taped == false) {
												sendChatMessage(peer, ((PlayerInfo*)(peer->data))->netID, str);

											}
											else {
												for (char c : str)

													if (c < 0x18 || std::all_of(str.begin(), str.end(), isspace))
													{
														canchat = false;
													}
												if (canchat)
												{
													sendChatMessage(peer, ((PlayerInfo*)(peer->data))->netID, "mfmfmmfmfmff");

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Can't talk properly while you're duct-taped!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}

											}


											if (str == "/mod")
											{


												//if (getPlyersWorld(peer)->allowMod == false && world->owner != ((PlayerInfo*)(currentPeer->data))->rawName)





												if (getPlyersWorld(peer)->allowMod == false && ((PlayerInfo*)(peer->data))->rawName != world->owner) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7You are not allowed to enable the /mod command in this world cause it is deactivated by owner."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													((PlayerInfo*)(peer->data))->isModState = true;
													((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
													sendState(peer);
												}
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wYour attoms suddenly start shivering (ghost mod added)``"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p.data;
												delete data;
											}
											else if (str == "/news")
											{
												GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wLTPS 1|left|5016|\nadd_spacer|small|\nadd_button|crash|`w[`4Stop Crash`w] `3Remove Clothes|\nadd_spacer|small|\n\nadd_image_button|banner|interface/large/anni_sta.rttex|noflags||3764|\nadd_spacer|small|\nadd_label|small|`wDecember 16th: `5Luc1Fer's Birthday Countdown!|left|\nadd_spacer|small|\nadd_label|small|`wWhat's New?|left|\nadd_smalltext|`wDear LTPS Players, This update that will occur throughout these weeks will be special days for `9Luc1Fer#1234 `was it is his birthday soon! So we have decided to throw him a  birthday party! (party) |\nadd_spacer|small|\nadd_spacer|small|\nadd_label|big|`#Enjoy `3LTPS`#!|left|\nadd_spacer|small|\nadd_spacer|small|\nadd_label|small|`4WARNING: `wDon't Forget to follow the `4/Rules`w.|left|\nadd_spacer|small|\nadd_label|small|`wOther updates you will see in-game now click `9Continue `wTo start playing..|left|\nadd_spacer|small|\nadd_button|chc0|`9Continue|"));
												ENetPacket* packet3 = enet_packet_create(p3.data,
													p3.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet3);
												delete p3.data;
											}

											else if (str == "/ghost")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
												{
													if (pData->ghostalr == true)
													{

														int x = ((PlayerInfo*)(peer->data))->x;
														int y = ((PlayerInfo*)(peer->data))->y;



														pData->ghostalr = false;
														((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
														sendClothes(peer);
														((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
														sendState(peer);
														sendConsoleMsg(peer, "`oYour body stops shimmering and returns to normal. (Ghost in the shell mod removed)");



													}
													else
													{




														pData->ghostalr = true;

														((PlayerInfo*)(peer->data))->skinColor = atoi("-155");
														sendClothes(peer);
														((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
														sendState(peer);
														sendConsoleMsg(peer, "`oYour atoms are suddenly aware of quantum tunneling. (Ghost in the shell mod added)");




													}


												}
											}
											else if (str == "/mods") {
												string x;

												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;

													if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) > 333) {
														x.append("`#@" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "``, ");
													}

												}
												x = x.substr(0, x.length() - 2);

												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oMods online: " + x));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}
											else if (str == "/find")
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wItem Finder``|left|6016|\nadd_textbox|Enter a word below to Find the item!|\nadd_text_input|item|Item Name||30|\nend_dialog|findid|Cancel|Find the item!|\nadd_quick_exit|\n"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
											}
											else if (str == "/online") {

												string online = "";
												int total = 0;
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) >= 0) {
														online += ((PlayerInfo*)(currentPeer->data))->displayName + "`o, `w";
														total++;
													}
												}
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5Players online [`wTotal: `2" + to_string(total) + "`5]: `w" + online));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
											else if (str.substr(0, 4) == "/p ")
											{   //NiteSpicy
												if (!isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) break;
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													GamePacket p3 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), atoi(str.substr(4).c_str())), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
													ENetPacket* packet3 = enet_packet_create(p3.data,
														p3.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet3);
													delete p3.data;
												}
											}
											else if (str.substr(0, 8) == "/summon ") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													string name = str.substr(8, str.length());


													ENetPeer* currentPeer;


													bool found = false;


													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;


														string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;


														std::transform(name.begin(), name.end(), name.begin(), ::tolower);
														std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);


														if (name == name2) {
															GamePacket pox = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You were summoned by a mod."));
															ENetPacket* packetpox = enet_packet_create(pox.data,
																pox.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packetpox);
															updateAllClothes(currentPeer);
															sendClothes(currentPeer);
															sendPlayerToPlayer(currentPeer, peer);
															found = true;
														}


													}
													if (found) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Summoning " + name));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
													}
													else {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Player not found!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
													}
												}


											}
											else if (str.substr(0, 5) == "/pay ")
											{
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));
												int b = atoi(content.c_str());
												ENetPeer* currentPeer;
												string imie = str.substr(5, cch.length() - 5 - 1);
												int phm = 0;
												if (imie.find(" ") != std::string::npos)
												{
													phm = atoi(imie.substr(imie.find(" ") + 1).c_str());
													imie = imie.substr(0, imie.find(" "));
												}
												else {
													GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Pay failed"));
													ENetPacket* packet4 = enet_packet_create(p4.data,
														p4.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet4);
													delete p4.data;
												}
												if (phm < 0)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You think you are smart huh?"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
												else if (b >= phm)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player`w " + ((PlayerInfo*)(peer->data))->rawName + "`o paid you `2" + std::to_string(phm) + " Gems`o!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
														{
															std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
															std::string acontent((std::istreambuf_iterator<char>(ifsz)),
																(std::istreambuf_iterator<char>()));
															int a = atoi(acontent.c_str());
															int bb = b - phm;
															int aa = a + phm;
															ofstream myfile;
															myfile.open("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
															myfile << aa;
															myfile.close();
															myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile << bb;
															myfile.close();
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You paid`w " + imie + "`2 " + std::to_string(phm) + " Gems`o!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), bb));
															ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsa);
															GamePacket psa2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
															ENetPacket* packetsa2 = enet_packet_create(psa2.data, psa2.len, ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packetsa2);
															enet_peer_send(currentPeer, 0, packet);
															delete psa.data;
															delete psa2.data;
														}
													}
													delete p.data;
												}
												else if (b < phm)
												{
													GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Sorry but you need " + std::to_string(phm) + " gems to pay someone."));
													ENetPacket* packet3 = enet_packet_create(p3.data,
														p3.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet3);
													delete p3.data;
												}
											}

											else if (str.substr(0, 6) == "/pull ")
											{
												cout << "/pull from " << ((PlayerInfo*)(peer->data))->displayName << endl;
												WorldInfo* world = getPlyersWorld(peer);
												if (((PlayerInfo*)(peer->data))->rawName == world->owner)
												{
													ENetPeer* currentPeer;
													string imie = str.substr(6, cch.length() - 6 - 1);
													int x = ((PlayerInfo*)(peer->data))->x;
													int y = ((PlayerInfo*)(peer->data))->y;
													string dupa;
													GamePacket pmsg = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o" + ((PlayerInfo*)(peer->data))->displayName + " `5pulls " + imie));
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer))
														{
															if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
															{
																dupa = ((PlayerInfo*)(currentPeer->data))->rawName;
																PlayerMoving data;
																data.packetType = 0x0;
																data.characterState = 0x924; // animation
																data.x = x;
																data.y = y;
																data.punchX = -1;
																data.punchY = -1;
																data.XSpeed = 0;
																data.YSpeed = 0;
																data.netID = ((PlayerInfo*)(currentPeer->data))->netID;
																data.plantingTree = 0x0;
																SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
																GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
																memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
																ENetPacket* packet2 = enet_packet_create(p2.data,
																	p2.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(currentPeer, 0, packet2);
																delete p2.data;
															}
														}
													}

													ENetPacket* packetmsg = enet_packet_create(pmsg.data,
														pmsg.len,
														ENET_PACKET_FLAG_RELIABLE);
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer))
														{
															enet_peer_send(currentPeer, 0, packetmsg);
														}
													}
													delete pmsg.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need to be world owner to use that command."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

												}
											}
											else if (str == "/cry")
											{
												GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ":'("), 0));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														enet_peer_send(currentPeer, 0, packet2);
													}
												}
												delete p2.data;
												continue;
											}

											else if (str.substr(0, 4) == "/me ")
											{
												if (((PlayerInfo*)(peer->data))->isDuctaped == false && ((PlayerInfo*)(peer->data))->haveGrowId == true)
												{
													string namer = ((PlayerInfo*)(peer->data))->displayName;
													GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`#<`w" + namer + " `#" + str.substr(3, cch.length() - 3 - 1).c_str() + "`5>"), 0));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w<" + namer + " `#" + str.substr(3, cch.length() - 3 - 1).c_str() + "`w>"));
													ENetPacket* packet3 = enet_packet_create(p3.data,
														p3.len,
														ENET_PACKET_FLAG_RELIABLE);
													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer))
														{
															enet_peer_send(currentPeer, 0, packet2);
															enet_peer_send(currentPeer, 0, packet3);
														}
													}
													delete p2.data;
													delete p3.data;
													continue;
												}
											}
											else if (str == "/clearworld") {
												if (((PlayerInfo*)(peer->data))->rawName == world->owner || isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`wWorld `5" + ((PlayerInfo*)(peer->data))->currentWorld + " `whas been cleared!"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
													WorldInfo* wrld = getPlyersWorld(peer);

													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
														{
															string act = ((PlayerInfo*)(peer->data))->currentWorld;
															//WorldInfo info = worldDB.get(act);
															// sendWorld(currentPeer, &info);
															int x = 3040;
															int y = 736;



															for (int i = 0; i < world->width * world->height; i++)
															{
																if (world->items[i].foreground == 6) {
																	//world->items[i].foreground =0;
																}
																else if (world->items[i].foreground == 8) {

																}
																else if (world->items[i].foreground == 242) {

																}
																else {
																	world->items[i].foreground = 0;
																	world->items[i].background = 0;
																}
															}

															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															joinWorld(currentPeer, act, 0, 0);





														}

													}
												}
											}
											else if (str.substr(0, 6) == "/warn ") {
												if (!isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) break;

												string warn_info = str;

												size_t extra_space = warn_info.find("  ");
												if (extra_space != std::string::npos) {
													warn_info.replace(extra_space, 2, " ");
												}

												string delimiter = " ";
												size_t pos = 0;
												string warn_user;
												string warn_message;
												if ((pos = warn_info.find(delimiter)) != std::string::npos) {
													warn_info.erase(0, pos + delimiter.length());
												}
												else {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease specify a player you want to warn."));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}

												if ((pos = warn_info.find(delimiter)) != std::string::npos) {
													warn_user = warn_info.substr(0, pos);
													warn_info.erase(0, pos + delimiter.length());
												}
												else {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease enter your warn reason."));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}

												warn_message = warn_info;
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->rawName == warn_user) {

														GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> Warned " + warn_user));
														ENetPacket* packet0 = enet_packet_create(p0.data,
															p0.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet0);
														delete p0.data;
														GamePacket ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wWarning from `4Admin`0: " + warn_message), "audio/hub_open.wav"), 0));

														ENetPacket* packet = enet_packet_create(ps.data,
															ps.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete ps.data;
														break;
													}
												}
											}

											else if (str == "/rules") {
												//cout << "/rules from " << ((PlayerInfo*)(peer->data))->displayName << endl;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHelp & Rules``|left|18|\n\nadd_spacer|small|\nadd_label|small|`wTo keep this community,We've got some rules to follow it:|left|1432|\nadd_label_with_icon|small|`wKeep your password secret.sharing your password will result in stolen world.|left|1432|\nadd_label_with_icon|small|`0Be civil. Bullying, racism,excessive profanity,sexual content and abuse behavior is not allowed|left|1432|\nadd_label_with_icon|small|`wUsing 1 hit ingame is illegal.Except you are using Rayman + sorrow.|left|1432|\nadd_label_with_icon|small|`wTrying to get punishment or asking for punishment can earn you a worse punishment.|left|1432|\nadd_label_with_icon|small|`wDon't lie about mods or fake official LTPS system messages.``|left|1432|\nadd_label_with_icon|small|`wSelling gems for outside server items is illegal!|left|1432|\nadd_label_with_icon|small|`wDo not sb about a rude stuff.|left|1432|\nadd_label_with_icon|small|`0Do not war sb.|left|1432|\nadd_label_with_icon|small|`w@Moderators are here to enforce the rules. Abusing, spamming or harassing mods will have consequences.|left|1432|\nadd_label|small|`0Thank You!|left|21|\nadd_label|small|~`6@Luc1fer#1234 &|left|32|\nadd_button|chc0|`0I accept these Rules.|"));
												ENetPacket* packet = enet_packet_create (p.data,
													p.len,
														ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												//enet_host_flush(server);
												delete p.data;
											}

											else if (str == "/partners") {
											//cout << "/rules from " << ((PlayerInfo*)(peer->data))->displayName << endl;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9LTPS Partners|left|1660|\nadd_spacer|small|\nadd_label|small|`wWelcome to the `2LTPS Partners `wPage! To get Partnered up with `4LTPS`w, You must firstly Message `6Luc1Fer#1234`w On Discord, Once you have Messaged him, you must pay `33Diamond Locks `wTo get your server Linked in this `5Page`w!|left|\nadd_spacer|small|\nadd_button|gtpaserver|`5#1 `oGTPA Server By `#Aviary|0|0|\nadd_button|vyteserver|`5#2 `oGTPS Server By `#Vyte|0|0|\nadd_spacer|small|\nend_dialog|chc0|Cancel|"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											//enet_host_flush(server);
											delete p.data;
											}

											else if (str.substr(0, 3) == "/r ") {
												if (((PlayerInfo*)(peer->data))->haveGrowId == false) {
													GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oTo prevent abuse, you `4must `obe `2registered `oin order to use this command!"));
													ENetPacket* packet0 = enet_packet_create(p0.data,
														p0.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet0);
													delete p0.data;
													continue;
												}


												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastMsger) {

														((PlayerInfo*)(currentPeer->data))->lastMsger = ((PlayerInfo*)(peer->data))->rawName;
														GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> (Sent to `2" + ((PlayerInfo*)(peer->data))->lastMsger + "`6)"));
														ENetPacket* packet0 = enet_packet_create(p0.data,
															p0.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet0);
														delete p0.data;
														GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> Private msg from `2" + ((PlayerInfo*)(peer->data))->displayName + "`6 (`$in " + ((PlayerInfo*)(peer->data))->currentWorld + "`6) : " + str.substr(3, cch.length() - 3 - 1) + "`o"));
														string text = "action|play_sfx\nfile|audio/pay_time.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);
														ENetPacket* packet2 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(currentPeer, 0, packet2);
														delete data;
														ENetPacket* packet = enet_packet_create(ps.data,
															ps.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete ps.data;
														break;
													}
												}
											}

											else if (str.substr(0, 4) == "/rgo") {
												string act = ((PlayerInfo*)(peer->data))->lastMsgWorld;
												if (act == "") {
													GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Unable to track down the location of the message."));
													ENetPacket* packet = enet_packet_create(po.data,
														po.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
												else if (act == ((PlayerInfo*)(peer->data))->currentWorld) {
													GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Sorry, but you are already in the world!"));
													ENetPacket* packet = enet_packet_create(po.data,
														po.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
												else {
													sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
													joinWorld(peer, act, 0, 0);
												}
											}
											else if (str.substr(0, 8) == "/warpto ") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													string name = str.substr(8, str.length());


													ENetPeer* currentPeer;


													bool found = false;


													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;


														string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;


														std::transform(name.begin(), name.end(), name.begin(), ::tolower);
														std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);


														if (name == name2) {
															if (((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT")
															{
																//std::this_thread::sleep_for(std::chrono::milliseconds(200));
															}
															else
															{
																sendPlayerToPlayer(peer, currentPeer);
																found = true;
															}

														}
													}
													if (found) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Magically warped to player " + name + "."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);

														delete p.data;
													}
													else {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Player not found or is currently in EXIT."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);

														delete p.data;
													}
												}
											}
											else if (str == "/help") {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Help >> /help, /dance, /furious, /love, /cry, /mad, /sleep, /yes, /no, /troll, /cheer, /fp, /omg, /fa, /rolleyes, /dab, /idk, /shrug, /love, /mods, /pull, /rgo, /r, /rules, /news, /report <name>, /mod, /unmod, /inventory, /item id, /team id, /color number, /who, /count, /sb message, /alt, /radio, /find, /pay (user) (amount), /cleaninv, /unequip, /msg, /block, /uba, /server, /breakroulette"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											else if (str.substr(0, 8) == "/report ")
											{
												string imie = str.substr(8, cch.length() - 8 - 1);
												string dupa;
												string worldlocate;
												ENetPeer* currentPeer;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player `w" + imie + "`o has been reported."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
													{
														dupa = ((PlayerInfo*)(currentPeer->data))->rawName;
														worldlocate = " (In world: " + ((PlayerInfo*)(peer->data))->currentWorld + ")";



													}

													if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 666) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "[MOD LOGS]: Suspect `w" + dupa + "`o has been reported by " + ((PlayerInfo*)(peer->data))->rawName + worldlocate));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete p.data;
													}
												}
												cout << "Report from " << ((PlayerInfo*)(peer->data))->rawName << " in world " << ((PlayerInfo*)(peer->data))->currentWorld << std::dec << " reported -> " << dupa << endl;



											}


											else if (str.substr(0, 8) == "/warpto ") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													string name = str.substr(8, str.length());


													ENetPeer* currentPeer;


													bool found = false;


													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;


														string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;


														std::transform(name.begin(), name.end(), name.begin(), ::tolower);
														std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);


														if (name == name2) {
															if (((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT")
															{
																//std::this_thread::sleep_for(std::chrono::milliseconds(200));
															}
															else
															{
																sendPlayerToPlayer(peer, currentPeer);
																found = true;
															}

														}
													}
													if (found) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Magically warped to player " + name + "."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);

														delete p.data;
													}
													else {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Player not found or is currently in EXIT."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);

														delete p.data;
													}
												}


											}
											else if (str == "/vhelp") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1VIP Commands Are `o>> /nick, /vsb, /invis, /invite, /flag, /vhelp, /v (chat)"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													//enet_host_flush(server);

												}
											}
											else if (str == "/mhelp") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^Moderator Commands Are `o>> /nick, /vsb, /invis, /invite, /flag, /vhelp, /v (chat), /m (chat), /msb, /spawn, /ipcheck, /ban, /unban, /ducttape, /curse, /uncurse, /info, /offlineinfo"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													//enet_host_flush(server);

												}
											}
											else if (str == "/ohelp") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Owner Commands Are `o>> /nick, /vsb, /invis, /invite, /flag, /vhelp, /v (chat), /m (chat), /msb, /asb, /spawn, /ipcheck, /ban, /unban, /ducttape, /curse, /uncurse, /info, /offlineinfo"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													//enet_host_flush(server);
												}
						                    }
											else if (str.substr(0, 6) == "/warp ") {

												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 166) {
													string world = str.substr(6, str.length());
													std::transform(world.begin(), world.end(), world.begin(), ::toupper);


													if (world == "EXIT")
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`8I know the World Menu is cool etc., but you just cannot warp to it because it will crash the server."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
													}
													else
													{
														bool contains_non_alpha
															= !std::regex_match(world, std::regex("^[A-Za-z0-9]+$"));

														if (contains_non_alpha == true)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Warping failed. Only letters / numbers!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Magically warped to " + world + "."));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															sendPlayerToWorld(peer, (PlayerInfo*)(peer->data), world);


														}



													}


												}

											}
											else if (str.substr(0, 5) == "/asb ") {
												using namespace std::chrono;
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 1337) {
													string name = ((PlayerInfo*)(peer->data))->displayName;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `4MOD-SB`w from `$`6" + name + "`w (in `4HIDDEN!`w) ** :`^" + str.substr(4, cch.length() - 4 - 1)));
													string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (!((PlayerInfo*)(currentPeer->data))->radio)
															continue;
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(currentPeer, 0, packet);




														ENetPacket* packet2 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(currentPeer, 0, packet2);

														//enet_host_flush(server);
													}
													delete data;
													delete p.data;
												}
											}
											else if (str == "/worldban")
											{

												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													((PlayerInfo*)(peer->data))->canExit = false;




													ENetPeer* currentPeerp;

													for (currentPeerp = server->peers;
														currentPeerp < &server->peers[server->peerCount];
														++currentPeerp)
													{
														if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
															continue;


														if (isHere(peer, currentPeerp))
														{

															string name = ((PlayerInfo*)(peer->data))->displayName;
															string kickname = ((PlayerInfo*)(currentPeerp->data))->displayName;
															//string kickname = ((PlayerInfo*)(peer->data))->displayName;
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname));
															string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length());
															memcpy(data + 4 + text.length(), &zero, 1);


															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);

															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);



															enet_peer_send(peer, 0, packetsou);
															enet_peer_send(peer, 0, packet);
															delete data;
															delete p.data;


															sendPlayerWBan(currentPeerp, ((PlayerInfo*)(peer->data))->displayName, ((PlayerInfo*)(currentPeerp->data))->displayName);


															namespace fs = std::experimental::filesystem;

															if (!fs::is_directory("worldbans/" + getPlyersWorld(peer)->name) || !fs::exists("worldbans/" + getPlyersWorld(peer)->name)) {
																fs::create_directory("worldbans/" + getPlyersWorld(peer)->name);

																std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

																outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

																outfile.close();
															}
															else
															{
																std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

																outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

																outfile.close();
															}

															sendPlayerLeave(currentPeerp, (PlayerInfo*)(currentPeerp->data));
															sendWorldOffers(currentPeerp);


															((PlayerInfo*)(currentPeerp->data))->currentWorld = "EXIT";


														}
													}
													((PlayerInfo*)(peer->data))->canExit = true;

												}
											}
											else if (str == "/nuke") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													((PlayerInfo*)(peer->data))->canExit = false;

													WorldInfo* world = getPlyersWorld(peer);
													if (world->nuked) {
														world->nuked = false;
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You have un-nuked the world"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
													}
													else {
														world->nuked = true;
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You have nuked the world!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);


														ENetPeer* currentPeer;


														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;


															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4" + world->name + " has been nuked from orbit. `w>> It's the only way to be sure. Play safe, everybody!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);

															string text = "action|play_sfx\nfile|audio/bigboom.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length());
															memcpy(data + 4 + text.length(), &zero, 1);


															ENetPacket* packetnuk = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packetnuk);
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just nuked world `w" + world->name));
															for (currentPeer = server->peers;
																currentPeer < &server->peers[server->peerCount];
																++currentPeer)
															{
																if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																	continue;
																if (!((PlayerInfo*)(currentPeer->data))->radio)
																	continue;
																if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999) {
																	ENetPacket* packet2 = enet_packet_create(p2.data,
																		p2.len,
																		ENET_PACKET_FLAG_RELIABLE);

																	enet_peer_send(currentPeer, 0, packet2);
																}
															}
															delete p2.data;

															if (isHere(peer, currentPeer)) {
																if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) < 666) {

																	//((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
																	sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
																	sendWorldOffers(currentPeer);


																	((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
																}

															}
														}
														((PlayerInfo*)(peer->data))->canExit = true;
													}
												}
											}
											else if (str == "/ban")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /ban <user>"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
											}
											else if (str == "/curse")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /curse <user>"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
											}
											else if (str == "/ducttape")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 332) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /ducttape <user>"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
											}
											else if (str == "/tban")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /tban <user> <minutes>"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
											}
											else if (str.substr(0, 6) == "/tban ") {
												string ban_info = str;

												size_t extra_space = ban_info.find("  ");
												if (extra_space != std::string::npos) {
													ban_info.replace(extra_space, 2, " ");
												}

												string delimiter = " ";
												size_t pos = 0;
												string ban_user;
												string ban_time;
												if ((pos = ban_info.find(delimiter)) != std::string::npos) {
													ban_info.erase(0, pos + delimiter.length());
												}
												else {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /tban <user> <minutes>"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}

												if ((pos = ban_info.find(delimiter)) != std::string::npos) {
													ban_user = ban_info.substr(0, pos);
													ban_info.erase(0, pos + delimiter.length());
												}
												else {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /tban <user> <minutes>"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}

												ban_time = ban_info;
												cout << "/tban " << ban_user << " " << ban_time;
											}
											else if (str.substr(0, 7) == "/block ")
											{
												string blox = str.substr(6, str.length());


												bool contains_non_alpha
													= !std::regex_match(blox, std::regex("^[0-9]+$"));

												if (contains_non_alpha)
												{
													int bloxint = atoi(str.substr(7).c_str());
													if (bloxint < 7559)
													{
														((PlayerInfo*)(peer->data))->cloth_face = atoi(str.substr(7).c_str());
														sendState(peer);
														((PlayerInfo*)(peer->data))->skinColor = 2;
														sendClothes(peer);

														int block = atoi(str.substr(7).c_str());

														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You are " + std::to_string(block) + " now!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Please only numbers from 0-7558!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Please only numbers!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}


											else if (str.substr(0, 5) == "/eff ") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 0) {

													int effect = atoi(str.substr(5).c_str());
													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer)) {

															int x = ((PlayerInfo*)(peer->data))->x;
															int y = ((PlayerInfo*)(peer->data))->y;
															GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

															ENetPacket* packetd = enet_packet_create(psp.data,
																psp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packetd);
															delete psp.data;
														}
													}
												}
											}
											else if (str.substr(0, 9) == "/leaveall") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 0) {





												}
											}
											else if (str.substr(0, 6) == "/warn ") {

											}
											else if (str.substr(0, 5) == "/ssb ") {
												using namespace std::chrono;
												if (((PlayerInfo*)(peer->data))->boughtAAC == false)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR `w>> You will need to buy `6Ancestral `wbefore u can do /ssb!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}

												else
												{
													string name = ((PlayerInfo*)(peer->data))->displayName;
													GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You received `2Special - Broadcast`` From `6" + name + ""));
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `2Special - Broadcast`` from `$`6" + name + "```0 (in `6" + ((PlayerInfo*)(peer->data))->currentWorld + "`0) ** :`` `$ " + str.substr(5, cch.length() - 5 - 1)));
													string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (!((PlayerInfo*)(currentPeer->data))->radio)
															continue;
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														ENetPacket* packet2 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(currentPeer, 0, packet2);

														//enet_host_flush(server);
														enet_peer_send(currentPeer, 0, packet);
														ENetPacket* packet3 = enet_packet_create(p3.data,
															p3.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(currentPeer, 0, packet3);

														//enet_host_flush(server);

													}
													delete data;
													delete p.data;
													delete p3.data;
												}
											}
											else if (str.substr(0, 5) == "/ban ") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													if (str.substr(5, cch.length() - 5 - 1) == "") continue;
													if (((PlayerInfo*)(peer->data))->rawName == str.substr(5, cch.length() - 5 - 1)) continue;
													if ((str.substr(5, cch.length() - 5 - 1) == "timesimple") || (str.substr(5, cch.length() - 5 - 1) == "j3xxx")) continue;

													cout << "Server operator " << ((PlayerInfo*)(peer->data))->rawName << " has banned " << str.substr(5, cch.length() - 5 - 1) << "." << endl;

													ENetPeer* currentPeer;

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `4banned `2" + str.substr(5, cch.length() - 5 - 1) + " `#** `o(`4/rules `oto see the rules!)"));
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);

														if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(5, cch.length() - 5 - 1))) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
															GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave used `#Ban `oon `2" + str.substr(5, cch.length() - 5 - 1) + "`o! `#**"));
															ENetPacket* packet = enet_packet_create(ps.data,
																ps.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);

															GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You've been `4BANNED `0from LTPS for 730 days"), "audio/hub_open.wav"), 0));
															ENetPacket* packet2 = enet_packet_create(ps2.data,
																ps2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet2);
															GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `4BANNED `ofrom LTPS for 730 days"));
															ENetPacket* packet3 = enet_packet_create(ps3.data,
																ps3.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet3);
															//j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
															((PlayerInfo*)(currentPeer->data))->bans = ((PlayerInfo*)(peer->data))->bans + 1;
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {

																PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));
																p->ban = 1;
																string username = PlayerDB::getProperName(p->rawName);

																std::ifstream od("players/" + username + ".json");
																if (od.is_open()) {
																}

																std::ofstream o("players/" + username + ".json");
																if (!o.is_open()) {
																	cout << GetLastError() << endl;
																	_getch();
																}
																json j;


																int clothback = p->cloth_back;
																int clothhand = p->cloth_hand;
																int clothface = p->cloth_face;
																int clothhair = p->cloth_hair;
																int clothfeet = p->cloth_feet;
																int clothpants = p->cloth_pants;
																int clothneck = p->cloth_necklace;
																int clothshirt = p->cloth_shirt;
																int clothmask = p->cloth_mask;
																int clothances = p->cloth_ances;
																string guild = p->guild;
																bool joinguild = p->joinguild;
																int level = p->level;
																int xp = p->xp;
																PlayerInventory inventory;
																inventory = p->inventory;
																//int isCursed = p->isCursed;
																//int puncheffect = p->puncheffect;
																string password = ((PlayerInfo*)(currentPeer->data))->tankIDPass;


																j["ClothBack"] = clothback;
																j["ClothHand"] = clothhand;
																j["ClothFace"] = clothface;
																j["ClothShirt"] = clothshirt;
																j["ClothPants"] = clothpants;
																j["ClothNeck"] = clothneck;
																j["ClothHair"] = clothhair;
																j["ClothFeet"] = clothfeet;
																j["ClothMask"] = clothmask;
																j["ClothAnces"] = clothances;
																j["ipID"] = currentPeer->address.host;
																j["effect"] = 0;

																j["isBanned"] = 1;
																//j["puncheffect"] = puncheffect;


																j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
																j["password"] = hashPassword(password);
																j["username"] = username;
																j["friends"] = ((PlayerInfo*)(currentPeer->data))->friendinfo;
																j["ip"] = ((PlayerInfo*)(currentPeer->data))->charIP;
																j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
																j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
																j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
																j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
																j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
																j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
																j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
																j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
																j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
																j["aap"] = ((PlayerInfo*)(currentPeer->data))->isAAP;
																j["receivedwarns"] = ((PlayerInfo*)(currentPeer->data))->warns;
																j["receivedbans"] = ((PlayerInfo*)(currentPeer->data))->bans;
																j["guild"] = guild;
																j["joinguild"] = joinguild;
																j["level"] = level;
																j["xp"] = xp;
																j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;

																o << j << std::endl;

																string bannamed = str.substr(5, cch.length() - 5 - 1);
																std::ofstream outfile("bans/" + bannamed + ".txt");

																outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

																outfile.close();
															}
															delete ps.data;

															enet_peer_disconnect_later(currentPeer, 0);


														}

														enet_peer_send(currentPeer, 0, packet);

														//enet_host_flush(server);
													}
													string bannamed = str.substr(5, cch.length() - 5 - 1);
													std::ifstream ifff("players/" + PlayerDB::getProperName(bannamed) + ".json");


													if (ifff.fail()) {
														ifff.close();

														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Player not found, `4ban `waborted!"));

														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														continue;
													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["isBanned"] = 1; //edit

													GamePacket px = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w`4Banned `wplayer " + PlayerDB::getProperName(str.substr(5, cch.length() - 5 - 1))));

													ENetPacket* packetx = enet_packet_create(px.data,
														px.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packetx);
													delete px.data;


													std::ofstream o("players/" + PlayerDB::getProperName(bannamed) + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;

													delete p.data;
													GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2BANNED `4player `w" + PlayerDB::getProperName(str.substr(5, cch.length() - 5 - 1))));
													string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (!((PlayerInfo*)(currentPeer->data))->radio)
															continue;
														if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999) {
															ENetPacket* packet6 = enet_packet_create(p6.data,
																p6.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet6);




															ENetPacket* packet2 = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet2);

															//enet_host_flush(server);
														}
													}
													delete data;
													delete p6.data;
												}
											}
											else if (str == "/pl") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {

													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;

														GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/large/special_event.rttex"), "`2Public Lava!: `wLava is being placed in world `4" + ((PlayerInfo*)(peer->data))->currentWorld + "`w, go break it and grab some extra `5Gems!"), "audio/pinata_lasso.wav"), 0));
														ENetPacket* packet2 = enet_packet_create(ps2.data,
															ps2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet2);
														//j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;

														delete ps2.data;
													}
												}
											}
											else if (str.substr(0, 10) == "/ducttape ") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333) {
													string name = str.substr(10, str.length());


													ENetPeer* currentPeer;


													bool found = false;


													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;


														if (((PlayerInfo*)(currentPeer->data))->rawName == name) {
															found = true;
															if (((PlayerInfo*)(currentPeer->data))->taped) {
																((PlayerInfo*)(currentPeer->data))->taped = false;
																((PlayerInfo*)(currentPeer->data))->isDuctaped = false;
																((PlayerInfo*)(currentPeer->data))->cantsay = false;
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You are no longer duct-taped!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(currentPeer, 0, packet);
																sendClothes(currentPeer);
																sendState(currentPeer);

																delete p.data;
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You have un duct-taped the player!"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																}
															}
															else {
																((PlayerInfo*)(currentPeer->data))->taped = true;
																((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
																((PlayerInfo*)(currentPeer->data))->cantsay = true;
																sendState(currentPeer);

																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You have been duct-taped!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(currentPeer, 0, packet);
																sendClothes(currentPeer);
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You have duct-taped the player!"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																}
															}
														}
													}
													if (!found) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Player not found!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
													}
												}
												else {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You need to have a higher admin-level to do that!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
											}
											else if (str.substr(0, 7) == "/curse ") { // code by playingohd gaming
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													if (str.substr(7, cch.length() - 7 - 1) == "") continue;
													if (((PlayerInfo*)(peer->data))->rawName == str.substr(7, cch.length() - 7 - 1)) continue;
													if ((str.substr(7, cch.length() - 7 - 1) == "timesimple") || (str.substr(7, cch.length() - 7 - 1) == "j3xxx")) continue;
													string cursename = PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1));

													cout << "Server operator " << ((PlayerInfo*)(peer->data))->rawName << " has cursed " << str.substr(7, cch.length() - 7 - 1) << "." << endl;

													ENetPeer* currentPeer;

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bcursed `2" + str.substr(7, cch.length() - 7 - 1) + " `#** `o(`4/rules `oto see the rules!)"));
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);

														if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1))) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false && ((PlayerInfo*)(currentPeer->data))->haveGuestId == false) continue;
															GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave used `#Curse `oon `2" + str.substr(7, cch.length() - 7 - 1) + "`o! `#**"));
															ENetPacket* packet = enet_packet_create(ps.data,
																ps.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);

															GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/hommel.rttex"), "`0Warning from `4System`0: You've been `bCURSED `0from LTPS."), "audio/explode.wav"), 0));
															ENetPacket* packet2 = enet_packet_create(ps2.data,
																ps2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet2);
															GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `bCursed `ofrom LTPS."));
															ENetPacket* packet3 = enet_packet_create(ps3.data,
																ps3.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet3);
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId || ((PlayerInfo*)(currentPeer->data))->haveGuestId) {

																PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));

																string username = PlayerDB::getProperName(p->rawName);

																((PlayerInfo*)(currentPeer->data))->isCursed = true;

																std::ofstream outfile("cursedplayers/" + cursename + ".txt");

																outfile << "caused by: " + ((PlayerInfo*)(peer->data))->rawName;

																outfile.close();



															}
															delete ps.data;
															sendPlayerToWorld(currentPeer, (PlayerInfo*)(currentPeer->data), "HELL");


															//((PlayerInfo*)(currentPeer->data))->isCursed = true;


															//enet_peer_disconnect_later(currentPeer, 0);
														}
													}
												}
											}
											else if (str == "/unequip")
											{
												((PlayerInfo*)(peer->data))->cloth_hair = 0;
												((PlayerInfo*)(peer->data))->cloth_shirt = 0;
												((PlayerInfo*)(peer->data))->cloth_pants = 0;
												((PlayerInfo*)(peer->data))->cloth_feet = 0;
												((PlayerInfo*)(peer->data))->cloth_face = 0;
												((PlayerInfo*)(peer->data))->cloth_hand = 0;
												((PlayerInfo*)(peer->data))->cloth_back = 0;
												((PlayerInfo*)(peer->data))->cloth_mask = 0;
												((PlayerInfo*)(peer->data))->cloth_necklace = 0;
												((PlayerInfo*)(peer->data))->effect = 8421376;
												sendState(peer); //here
												sendClothes(peer);
												sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											}
											else if (str.substr(0, 9) == "/uncurse ") { // code by playingohd gaming
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													if (str.substr(9, cch.length() - 9 - 1) == "") continue;
													if (((PlayerInfo*)(peer->data))->rawName == str.substr(7, cch.length() - 9 - 1)) continue;
													if ((str.substr(9, cch.length() - 9 - 1) == "timesimple") || (str.substr(9, cch.length() - 9 - 1) == "j3xxx")) continue;
													string cursename = str.substr(9, cch.length() - 9 - 1);
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4System-Message:`2 " + cursename + " has been uncursed."));
													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														remove(("cursedplayers/" + cursename + ".txt").c_str());
														if (((PlayerInfo*)(currentPeer->data))->rawName == cursename)
														{
															((PlayerInfo*)(currentPeer->data))->skinColor = 0x8295C3FF;
															sendClothes(currentPeer);
															((PlayerInfo*)(currentPeer->data))->isCursed = false;
															sendState(currentPeer);


														}
													}
												}
											}
											else if (str.substr(0, 7) == "/unban ") {
												if (!isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) && getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) != 666 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) != 999)break;
												std::ifstream ifff("players/" + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1)) + ".json");
												string ubaname = PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1));

												if (ifff.fail()) {
													ifff.close();

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Player not found, unban aborted!"));

													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													continue;
												}
												if (ifff.is_open()) {
												}
												json j;
												ifff >> j; //load


												j["isBanned"] = 0; //edit

												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wBan of player " + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1)) + " set to 0."));

												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;


												std::ofstream o("players/" + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1)) + ".json"); //save
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}

												o << j << std::endl;
											}

											else if (str == "/save")
											{

												saveAllWorlds();

											}
											else if (str == "/saveo")
											{
												if (!isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) break;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Saving data and you will disconnect."));
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													enet_peer_disconnect_now(currentPeer, 0);
												}
												saveAllWorlds();
												delete p.data;

											}
											else if (str.substr(0, 7) == "/spawn ")
											{

												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													cout << "!!!   " << ((PlayerInfo*)(peer->data))->rawName << " !!!    in world " << ((PlayerInfo*)(peer->data))->currentWorld << "    !!!      Spawned " << atoi(str.substr(7, cch.length() - 7 - 1).c_str()) << endl;


													//right same line player 
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//left same line player 
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//up lr 1


													//right
													/*0*/ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//up lr 2


													//right
													/*0*/ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//up lr 3


													//right
													/*0*/ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);


													//up lr 4


													//right
													/*0*/ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//up lr 5


													//right
													/*0*/ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//up lr 6


													//right
													/*0*/ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//up lr 7


													//right
													/*0*/ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//up lr 8


													//right
													/*0*/ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//up lr 9


													//right
													/*0*/ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//up lr 10


													//right
													/*0*/ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//down lr 1

													//right
													/* 0 */ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//down lr 2

													//right
													/* 0 */ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//down lr 3

													//right
													/* 0 */ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//down lr 4

													//right
													/* 0 */ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//down lr 5

													//right
													/* 0 */ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//down lr 6

													//right
													/* 0 */ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//down lr 7

													//right
													/* 0 */ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//down lr 8

													//right
													/* 0 */ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//down lr 9

													//right
													/* 0 */ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

													//down lr 10

													//right
													/* 0 */ sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




													//left
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
													sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);


													int block = atoi(str.substr(7, cch.length() - 7 - 1).c_str());

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You Spawned `2" + std::to_string(block) + "`o!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2Spawned `5" + std::to_string(block) + "`r in world `5 " + ((PlayerInfo*)(peer->data))->currentWorld + "`4!"));
													string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (!((PlayerInfo*)(currentPeer->data))->radio)
															continue;
														if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999) {
															ENetPacket* packet6 = enet_packet_create(p6.data,
																p6.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet6);




															ENetPacket* packet2 = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet2);

															//enet_host_flush(server);
															delete data;
															delete p6.data;
														}
													}
												}
											}
											else if (str == "/pullall")
											{

											}
											else if (str.substr(0, 5) == "/msg ") {
												bool found = false;
												if (((PlayerInfo*)(peer->data))->haveGrowId == false) {
													GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oTo prevent abuse, you `4must `obe `2registered `oin order to use this command!"));
													ENetPacket* packet0 = enet_packet_create(p0.data,
														p0.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet0);
													delete p0.data;
													continue;
												}


												string msg_info = str;

												size_t extra_space = msg_info.find("  ");
												if (extra_space != std::string::npos) {
													msg_info.replace(extra_space, 2, " ");
												}

												string delimiter = " ";
												size_t pos = 0;
												string pm_user;
												string pm_message;
												if ((pos = msg_info.find(delimiter)) != std::string::npos) {
													msg_info.erase(0, pos + delimiter.length());
												}
												else {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease specify a `2player `oyou want your message to be delivered to."));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}

												if ((pos = msg_info.find(delimiter)) != std::string::npos) {
													pm_user = msg_info.substr(0, pos);
													msg_info.erase(0, pos + delimiter.length());
												}
												else {
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease enter your `2message`o."));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}

												pm_message = msg_info;
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->msgName == PlayerDB::getProperName(pm_user)) {

														((PlayerInfo*)(currentPeer->data))->lastMsger = ((PlayerInfo*)(peer->data))->rawName;
														((PlayerInfo*)(currentPeer->data))->lastMsgerTrue = ((PlayerInfo*)(currentPeer->data))->displayName;
														((PlayerInfo*)(currentPeer->data))->lastMsgWorld = ((PlayerInfo*)(peer->data))->currentWorld;

														//sendConsoleMsg(peer, "`6" + str);
														GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> (Sent to `$" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`6)"));
														ENetPacket* packet0 = enet_packet_create(p0.data,
															p0.len,
															ENET_PACKET_FLAG_RELIABLE);
														GamePacket p10 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> (Sent to `$" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`6) `o(`4NOTE: ``Message a mod `4ONLY ONCE `oabout an issue. Mods dont fix scams or replace gems, they punish players who break the `5/rules`o. For issues related to account recovery or purchasing, send message to creators on discord.)"));
														ENetPacket* packet10 = enet_packet_create(p10.data,
															p10.len,
															ENET_PACKET_FLAG_RELIABLE);
														if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 666) {
															enet_peer_send(peer, 0, packet10);
														}
														else {
															enet_peer_send(peer, 0, packet0);
														}
														delete p0.data;
														delete p10.data;
														found = true;
														GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> Private msg from `w" + ((PlayerInfo*)(peer->data))->displayName + "`6 (`$in " + ((PlayerInfo*)(peer->data))->currentWorld + "`6) : " + pm_message + "`o"));
														string text = "action|play_sfx\nfile|audio/pay_time.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);
														ENetPacket* packet2 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(currentPeer, 0, packet2);
														delete data;
														ENetPacket* packet = enet_packet_create(ps.data,
															ps.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete ps.data;
														break;
													}

												}
												if (found == false)
												{
													GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6Player " + PlayerDB::getProperName(pm_user) + " not found, remember to type all letters small."));
													ENetPacket* packet0 = enet_packet_create(p0.data,
														p0.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet0);
													delete p0.data;
												}
											}
											else if (str == "/trade")
											{
												GamePacket p2t = packetEnd(appendInt(appendInt(appendString(createPacket(), "OnStartTrade"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->netID));

												//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packet2t = enet_packet_create(p2t.data,
													p2t.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2t);
												delete p2t.data;

												GamePacket p3 = packetEnd(appendInt(appendString(createPacket(), "OnTradeStatus"), 1));

												//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packet3 = enet_packet_create(p3.data,
													p3.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet3);
												delete p3.data;
											}
											else if (str == "/tradeworld")
											{
												if (getPlyersWorld(peer)->owner == ((PlayerInfo*)(peer->data))->rawName)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oCannot buy your own world!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else if (getPlyersWorld(peer)->isPublic)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oCannot buy world because it's public!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													ENetPeer* currentPeerpx;

													for (currentPeerpx = server->peers;
														currentPeerpx < &server->peers[server->peerCount];
														++currentPeerpx)
													{
														if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
															continue;

														if (((PlayerInfo*)(peer->data))->lastSellWorld == getPlyersWorld(peer)->name)
														{
															if (((PlayerInfo*)(peer->data))->lastSeller == getPlyersWorld(peer)->owner)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wTrade Menu``|left|242|\nadd_label|small|\nadd_button_with_icon|dotrade|Do the Trade!|noflags|1424||\nadd_button|decline|`4Cancel/Decline|noflags||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																//enet_host_flush(server);
																delete p.data;
															}
															else
															{
																cout << "last player sell / buy not true";
															}
														}
														else
														{
															cout << "last sell world not true";
														}
													}
												}
											}
											else if (str == "/boot")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Attempted everyone to disconnect who was in this world!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													ENetPeer* currentPeer;


													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer))
														{
															if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 666) {

															}
															else
															{
																enet_peer_disconnect_later(currentPeer, 0);
															}
														}
													}
												}
											}
											else if (str == "/battleroyale")
											{
												GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBetaMode"), 1));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												//enet_host_flush(server);
											}
											else if (str == "/uba") {
												if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
												{
													namespace fs = std::experimental::filesystem;
													fs::remove_all("worldbans/" + getPlyersWorld(peer)->name);

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou unbanned everyone from the world!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											else if (str == "/forceexit") {

												sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
												sendWorldOffers(peer);


												((PlayerInfo*)(peer->data))->currentWorld = "EXIT";


											}
											else if (str == "/bluename") {

												if (((PlayerInfo*)(peer->data))->level < 125)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou need to be level `1125 `wto do that!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
													ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild|maxLevel"));
														memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(currentPeer, 0, packet2);
														delete p2.data;
													}
												}
											}
											else if (str == "/hide") {

												GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnDisguiseChanged"), 8));

												memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;


											}

											else if (str.substr(0, 6) == "/mode ") // 9921116 blue fire mode // -529858286286 98156
											{
												string modestr = str.substr(6, cch.length() - 6 - 1);


												((PlayerInfo*)(peer->data))->characterState = atoi(modestr.c_str());
												sendState(peer);
											}
											else if (str == "/testbuystore") {

												/*GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnStoreRequest"), "set_description_text|Welcome to the `2Growtopia Store``!|\nadd_button|lol|Buy!|0|4|0|0||\n"));
												ENetPacket * packets = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packets);
												delete ps.data;*/


												/*GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnStoreBuyConfirm"), 1));

												//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket * packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);
												delete p2.data;*/

												GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnStorePurchaseResult"), "`9Bought `6Legendary Katana`w."));

												//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packet3 = enet_packet_create(p3.data,
													p3.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet3);
												delete p3.data;
											}
											else if (str == "/accesslist") {

											}
											else if (str.substr(0, 5) == "/vsb ") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333) {
													if (((PlayerInfo*)(peer->data))->isDuctaped == true)
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7Not allowed to VSB while ducttaped!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);


														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else
													{



														using namespace std::chrono;
														if (((PlayerInfo*)(peer->data))->lastSB + 15000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
														{
															((PlayerInfo*)(peer->data))->lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
														}
														else {
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Cooldown >> Wait 15 seconds to throw another VIP-SB!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);


															enet_peer_send(peer, 0, packet);
															delete p.data;
															//enet_host_flush(server);
															continue;
														}


														string name = ((PlayerInfo*)(peer->data))->displayName;
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `1VIP-SB `wFrom `$`6" + name + "`` `w(in `4HIDDEN!`w) ** :`` `^ " + str.substr(5, cch.length() - 5 - 1)));
														string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);
														ENetPeer* currentPeer;

														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (!((PlayerInfo*)(currentPeer->data))->radio)
																continue;
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);


															enet_peer_send(currentPeer, 0, packet);
														}
														delete data;
														delete p.data;
													}
												}
												else if (str == "/gsm ") {


													if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999) {
														cout << "GSM from " << ((PlayerInfo*)(peer->data))->rawName << " in world " << ((PlayerInfo*)(peer->data))->currentWorld << "with IP " << std::hex << peer->address.host << std::dec << " with message " << str.substr(5, cch.length() - 5 - 1) << endl;
														string name = ((PlayerInfo*)(peer->data))->displayName;

														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message: `o" + str.substr(4, cch.length() - 4 - 1)));
														string text = "action|play_sfx\nfile|audio/sungate.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);
														ENetPeer* currentPeer;

														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (!((PlayerInfo*)(currentPeer->data))->radio)
																continue;
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet);



															ENetPacket* packet2 = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet2);

															//enet_host_flush(server);
														}
														delete data;
														delete p.data;
													}
												}
												else if (str == "/breakroulette") {
													if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
													{
														if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333 || getPlyersWorld(peer)->owner == ((PlayerInfo*)(peer->data))->rawName || adminlevel(((PlayerInfo*)(peer->data))->rawName) > 333) {
															if (((PlayerInfo*)(peer->data))->unwheel == false)
															{
																((PlayerInfo*)(peer->data))->unwheel = true;

																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wYou can now break roulette wheels, to disable just do /breakroulette again."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else
															{
																((PlayerInfo*)(peer->data))->unwheel = false;

																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wDisabled roulette-breaking. To enable, type /breakroulette."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
														}
														else
														{
															GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou are not the world-owner!"));
															ENetPacket* packet = enet_packet_create(ps.data,
																ps.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packet);
															delete ps.data;
														}
													}
												}
												else if (str == "/breaksales") {
													if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
													{
														if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333 || getPlyersWorld(peer)->owner == ((PlayerInfo*)(peer->data))->rawName || adminlevel(((PlayerInfo*)(peer->data))->rawName) > 333) {
															if (((PlayerInfo*)(peer->data))->unsales == false)
															{
																((PlayerInfo*)(peer->data))->unsales = true;

																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wYou can now break salesman, to disable just do /breaksales again."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else
															{
																((PlayerInfo*)(peer->data))->unsales = false;

																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wDisabled roulette-breaking. To enable, type /breaksales."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
														}
														else
														{
															GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou are not the world-owner!"));
															ENetPacket* packet = enet_packet_create(ps.data,
																ps.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packet);
															delete ps.data;
														}
													}
												}
												else if (str.substr(0, 9) == "/copyset ") {
													if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333) {

														string name = str.substr(9, cch.length() - 9 - 1);
														ENetPeer* currentPeer;

														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;

															if (((PlayerInfo*)(currentPeer->data))->rawName == name || ((PlayerInfo*)(currentPeer->data))->tankIDName == name) {

																((PlayerInfo*)(peer->data))->cloth_hair = ((PlayerInfo*)(currentPeer->data))->cloth_hair;
																((PlayerInfo*)(peer->data))->cloth_shirt = ((PlayerInfo*)(currentPeer->data))->cloth_shirt;
																((PlayerInfo*)(peer->data))->cloth_pants = ((PlayerInfo*)(currentPeer->data))->cloth_pants;
																((PlayerInfo*)(peer->data))->cloth_feet = ((PlayerInfo*)(currentPeer->data))->cloth_feet;
																((PlayerInfo*)(peer->data))->cloth_face = ((PlayerInfo*)(currentPeer->data))->cloth_face;
																((PlayerInfo*)(peer->data))->cloth_hand = ((PlayerInfo*)(currentPeer->data))->cloth_hand;
																((PlayerInfo*)(peer->data))->cloth_back = ((PlayerInfo*)(currentPeer->data))->cloth_back;
																((PlayerInfo*)(peer->data))->cloth_mask = ((PlayerInfo*)(currentPeer->data))->cloth_mask;
																((PlayerInfo*)(peer->data))->cloth_necklace = ((PlayerInfo*)(currentPeer->data))->cloth_necklace;
																((PlayerInfo*)(peer->data))->skinColor = ((PlayerInfo*)(currentPeer->data))->skinColor;
																sendClothes(peer);

																GamePacket p1 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`wYou Copied Player `2" + ((PlayerInfo*)(currentPeer->data))->displayName + "`w Clothes!"));
																string text = "action|play_sfx\nfile|audio/change_clothes.wav\ndelayMS|0\n";
																BYTE* data = new BYTE[5 + text.length()];
																BYTE zero = 0;
																int type = 3;
																memcpy(data, &type, 4);
																memcpy(data + 4, text.c_str(), text.length());
																memcpy(data + 4 + text.length(), &zero, 1);

																ENetPacket* packet1 = enet_packet_create(p1.data,
																	p1.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet1);

																ENetPacket* packet2 = enet_packet_create(data,
																	5 + text.length(),
																	ENET_PACKET_FLAG_RELIABLE);

																enet_peer_send(peer, 0, packet2);

																delete p1.data;
																delete data;
															}
														}
													}
												}
												else if (str.substr(0, 7) == "/unacc ") {
													if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

														ENetPeer* currentPeer;
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (((PlayerInfo*)(currentPeer->data))->rawName == (str.substr(7, cch.length() - 7 - 1))) {
																WorldInfo info;
																world->worldaccess.erase(std::remove(world->worldaccess.begin(), world->worldaccess.end(), ((PlayerInfo*)(currentPeer->data))->rawName), world->worldaccess.end());
															}
														}
													}
												}
												else if (str.substr(0, 8) == "/access ") {
													if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

														ENetPeer* currentPeer;
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (((PlayerInfo*)(currentPeer->data))->rawName == (str.substr(8, cch.length() - 8 - 1))) {
																if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->rawName) {
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You can't access yourself"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;
																}
																else {
																	WorldInfo info;
																	world->worldaccess.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You got world access!"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet);
																	delete p.data;
																	//enet_host_flush(server);
																	string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
																	BYTE* data = new BYTE[5 + text.length()];
																	BYTE zero = 0;
																	int type = 3;
																	memcpy(data, &type, 4);
																	memcpy(data + 4, text.c_str(), text.length());
																	memcpy(data + 4 + text.length(), &zero, 1);
																	ENetPacket* packet2 = enet_packet_create(data,
																		5 + text.length(),
																		ENET_PACKET_FLAG_RELIABLE);


																	enet_peer_send(currentPeer, 0, packet2);
																}
															}
														}
													}
												}
												else if (str.substr(0, 8) == "/invite ")
												{
													if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
														using namespace std::chrono;
														if (((PlayerInfo*)(peer->data))->lastINV + 300000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
														{
															((PlayerInfo*)(peer->data))->lastINV = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
														}
														else {
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Please wait `25 Minutes`o till you can invite someone again!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packet);
															delete p.data;
															//enet_host_flush(server);
															continue;
														}
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Invitation has been `2Sent`o!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPlayer " + ((PlayerInfo*)(peer->data))->displayName + " has invited you to join the world " + ((PlayerInfo*)(peer->data))->currentWorld + "`w!``|left|660|\n\nadd_spacer|small|\nadd_label_with_icon|small|\nadd_button|nothing|`4IGNORE!|noflags|0|0|\nadd_button|nothing" + ((PlayerInfo*)(peer->data))->currentWorld + "|`2Go to world.|noflags|0|0|\nnend_dialog|gazette||OK|"));
														ENetPacket* packet3 = enet_packet_create(p3.data,
															p3.len,
															ENET_PACKET_FLAG_RELIABLE);
														string imie = str.substr(8, cch.length() - 8 - 1);
														ENetPeer* currentPeer;
														string dupa;
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
															{
																dupa = ((PlayerInfo*)(currentPeer->data))->rawName;
																enet_peer_send(currentPeer, 0, packet3);
															}
														}
														delete p2.data;
														delete p3.data;
														continue;
													}
												}
												else if (str == "/breakroulette") {
													if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
													{
														if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333 || getPlyersWorld(peer)->owner == ((PlayerInfo*)(peer->data))->rawName) {
															if (((PlayerInfo*)(peer->data))->unwheel == false)
															{
																((PlayerInfo*)(peer->data))->unwheel = true;

																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wYou can now break roulette wheels, to disable just do /breakroulette again."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else
															{
																((PlayerInfo*)(peer->data))->unwheel = false;

																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wDisabled roulette-breaking. To enable, type /roulettewheel."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
														}
														else
														{
															GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou are not the world-owner!"));
															ENetPacket* packet = enet_packet_create(ps.data,
																ps.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packet);
															delete ps.data;
														}
													}
												}
												else if (str == "/magic")
												{
													if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 0) {

														GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou cast a magic spell!"));
														ENetPacket* packet = enet_packet_create(ps.data,
															ps.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet);
														delete ps.data;

														string text = "action|play_sfx\nfile|audio/magic.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														ENetPeer* currentPeer;


														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (isHere(peer, currentPeer))
															{
																enet_peer_send(currentPeer, 0, packetsou);
															}

														}


													}
												}
											}
											else if (str.substr(0, 10) == "/bitshift ") //todo
											{
												((PlayerInfo*)(peer->data))->bitShiftTest = atoi(str.substr(10, cch.length() - 10 - 1).c_str());
											}

											else if (str.substr(0, 13) == "/offlineinfo ") { //this is coded by playingohd gaming special code for nabzgt.

												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 333)
												{
													string playerCalled = PlayerDB::getProperName(str.substr(13, cch.length() - 13 - 1));
													string wrldname = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));


													if (playerCalled == "luc1fer" || playerCalled == "zhenshax" ) {

														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wCannot view player-info of cool guys!``"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);


														continue;
														break;
													}
													toUpperCase(wrldname);
													if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
													{
														continue;
														break;
													}

													std::ifstream ifs("players/" + playerCalled + ".json");
													std::string content((std::istreambuf_iterator<char>(ifs)),
														(std::istreambuf_iterator<char>()));


													std::ifstream ifs7("gemdb/" + playerCalled + ".txt");
													std::string contentp((std::istreambuf_iterator<char>(ifs7)),
														(std::istreambuf_iterator<char>()));
													ifs7.close();



													string x;
													x.append(content);

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "``Player infos (offline mode): " + x + "Gems: " + contentp));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);

													x = x.substr(0, x.length() - 2);

												}
											}
											else if (str.substr(0, 6) == "/info ") { //this is coded by playingohd gaming special code for nabzgt.
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
												{
													string wrldname = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));
													toUpperCase(wrldname);
													if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
													{

													}
													else
													{
														string playerCalled = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));

														std::ifstream ifs("players/" + playerCalled + ".json");
														std::string content((std::istreambuf_iterator<char>(ifs)),
															(std::istreambuf_iterator<char>()));


														std::ifstream ifs7("gemdb/" + playerCalled + ".txt");
														std::string contentp((std::istreambuf_iterator<char>(ifs7)),
															(std::istreambuf_iterator<char>()));
														ifs7.close();



														string x;
														x.append(content);

														ENetPeer* currentPeer;
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;

															if (((PlayerInfo*)(currentPeer->data))->rawName == playerCalled)
															{

																string showcountry = ((PlayerInfo*)(currentPeer->data))->country;
																string showgameversion = ((PlayerInfo*)(currentPeer->data))->gameversion;
																string showrid = ((PlayerInfo*)(currentPeer->data))->rid;
																string showwk = ((PlayerInfo*)(currentPeer->data))->wkid;
																string showmeta = ((PlayerInfo*)(currentPeer->data))->metaip;
																string showmac = ((PlayerInfo*)(currentPeer->data))->mac;
																string showhash2 = ((PlayerInfo*)(currentPeer->data))->hash2;
																string showplatid = ((PlayerInfo*)(currentPeer->data))->platformID;
																string showage = ((PlayerInfo*)(currentPeer->data))->player_age;
																string showaid = ((PlayerInfo*)(currentPeer->data))->aid;
																string showgid = ((PlayerInfo*)(currentPeer->data))->gid;
																string showvid = ((PlayerInfo*)(currentPeer->data))->vid;
																string showworld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
																string showplainip = ((PlayerInfo*)(currentPeer->data))->charIP;
																string showdeviceversion = ((PlayerInfo*)(currentPeer->data))->deviceversion;
																string showlmode = ((PlayerInfo*)(currentPeer->data))->lmode;
																string showgdpr = ((PlayerInfo*)(currentPeer->data))->gdpr;
																string showuser = ((PlayerInfo*)(currentPeer->data))->user;
																string showtoken = ((PlayerInfo*)(currentPeer->data))->token;
																string showf = ((PlayerInfo*)(currentPeer->data))->f;
																string showfz = ((PlayerInfo*)(currentPeer->data))->fz;
																string showfhash = ((PlayerInfo*)(currentPeer->data))->fhash;
																//string showhid = ((PlayerInfo*)(currentPeer->data))->hpid;
																string showplatidplain;


																if (showplatid == "4")
																{
																	showplatidplain = " mobile (android) ";
																}
																else if (showplatid == "0")
																{
																	showplatidplain = " PC (Windows) ";
																}
																else if (showplatid == "6")
																{
																	showplatidplain = " Mac (OS X) ";
																}
																else
																{
																	showplatidplain = " UNIX (Linux, iOS (most likely), FreeBSD etc.) ";
																}
																if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999 && ((PlayerInfo*)(peer->data))->rawName != "playingo")
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label|big|`4404 ERROR?? |left|\nadd_smalltext|0098716RYE98UEJDS139RFJEIKUNER DFVIHQNFEJHUJRNQEFJEHUWNEJFUHWJ32I4UHRHEFVIJUHQ2NJ3IU4HRENHUNRJ8HUHNEJN|\nadd_spacer|small|\nadd_button|chc0|`409813QUI93|"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																}
																else
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "``Player infos: " + x + "Gems: " + contentp + " " + "Current world: " + showworld + " country: " + showcountry + " gameversion: " + showgameversion + " rid: " + showrid + " aid: " + showaid + " gid: " + showgid + " vid: " + showvid + " wk identity (SID): " + showwk + " meta: " + showmeta + " mac: " + showmac + " hash2: " + showhash2 + " platform:" + showplatidplain + "device-version: " + showdeviceversion + " L-mode: " + showlmode + " GDPR: " + showgdpr + " User:" + showuser + " Token: " + showtoken + " F-Identity: " + showf + " FZ-Identity: " + showfz + +" fhash: " + showfhash + " age: " + showage));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																}

																x = x.substr(0, x.length() - 2);


															}
														}

													}
												}
											}
											else if (str.substr(0, 9) == "/ipcheck ") {


												string playerCalled = str.substr(9, cch.length() - 9 - 1);
												cout << "/ipcheck from " + ((PlayerInfo*)(peer->data))->rawName + " on: " + playerCalled << endl;
												std::thread second((Fctor()), peer, playerCalled);
												second.detach();
											}
											else if (str.substr(0, 9) == "/hardban ") { //This is a special code by PlayIngoHD Gaming extra for NabzGT!
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
												{
													ENetPeer* currentPeer;
													string playerCalled = str.substr(9, cch.length() - 9 - 1);
													bool existh = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(playerCalled) + ".json");

													if (existh)
													{

														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;

															if (((PlayerInfo*)(currentPeer->data))->rawName == playerCalled)
															{
																//((PlayerInfo*)(currentPeer->data))->rid

																std::ofstream outfile("ridbans/" + ((PlayerInfo*)(currentPeer->data))->rid + ".txt");

																outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

																outfile.close();

																string checkaid = ((PlayerInfo*)(currentPeer->data))->aid;
																if (checkaid.length() > 4)
																{
																	std::ofstream outfile2("aidbans/" + ((PlayerInfo*)(currentPeer->data))->aid + ".txt");

																	outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

																	outfile2.close();
																}

																string checkgid = ((PlayerInfo*)(currentPeer->data))->gid;
																if (checkgid.length() > 4)
																{
																	std::ofstream outfile3("gidbans/" + ((PlayerInfo*)(currentPeer->data))->gid + ".txt");

																	outfile3 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

																	outfile3.close();
																}

																string checkvid = ((PlayerInfo*)(currentPeer->data))->vid;
																if (checkvid.length() > 4)
																{
																	std::ofstream outfile4("vidbans/" + ((PlayerInfo*)(currentPeer->data))->vid + ".txt");

																	outfile4 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

																	outfile4.close();
																}

																string checksid = ((PlayerInfo*)(currentPeer->data))->wkid;
																if (checksid.length() > 8)
																{
																	std::ofstream outfile5("sidbans/" + ((PlayerInfo*)(currentPeer->data))->wkid + ".txt");

																	outfile5 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

																	outfile5.close();
																}

																if (((PlayerInfo*)(currentPeer->data))->mac != "02:00:00:00:00:00" && ((PlayerInfo*)(currentPeer->data))->mac != "00:00:00:00:00:00")
																{
																	std::string mac(((PlayerInfo*)(currentPeer->data))->mac);
																	Remove(mac, ":");

																	std::ofstream outfile6("macbans/" + mac + ".txt"); // c = filteredmac

																	outfile6 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

																	outfile6.close();
																}
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5HARD `4BANNED `w" + ((PlayerInfo*)(currentPeer->data))->rawName + " !! (hardbans cannot be removed from the game, only from server itself)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;

															}
														}
													}
												}

											}
											else if (str.substr(0, 11) == "/deviceban ") { //This is a special code by PlayIngoHD Gaming extra for NabzGT!
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
												{
													string playerCalled = str.substr(11, cch.length() - 11 - 1);
													bool exist = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(playerCalled) + ".json");

													if (exist)
													{


														std::ifstream ifs("players/" + PlayerDB::getProperName(playerCalled) + ".json");
														if (ifs.is_open()) {
															json j;
															ifs >> j;

															int ipID = j["ipID"];
															string ipIDstr = to_string(ipID);

															if (ipIDstr.length() < 4)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR`` >> `4Banning ``aborted, error while fetching proper IP. Please try again!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
															}
															else
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Device of player with ID:\n " + ipIDstr + " added to ban list. Abusing this command will lead into ban and demote!\n"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;

																std::ofstream outfile("devicebans/" + ipIDstr + ".txt");

																outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

																outfile.close();
															}
														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Banning`` aborted, player was not found. If you are sure this player exists, please try again!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															delete p.data;
														}
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Banning`` aborted, player was not found. If you are sure this player exists, please try again!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);

														delete p.data;
													}


													/*std::ofstream outfile("devicebans/" + playerCalled + ".txt");

													outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

													outfile.close();




													string x;
													x.append(playerCalled);


													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Device of player with ID:\n " + x + " added to ban list. Abusing this command will lead into ban and demote!\n"));
													ENetPacket * packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);


													x = x.substr(0, x.length() - 2);
													delete p.data;*/
												}


											}
											else if (str == "/nick")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													string name2;
													string namemsg = ((PlayerInfo*)(peer->data))->rawName;
													((PlayerInfo*)(peer->data))->isNicked = false;
													if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 && ((PlayerInfo*)(peer->data))->rawName == "playingo")
													{
														name2 = "`6@" + ((PlayerInfo*)(peer->data))->tankIDName;
														((PlayerInfo*)(event.peer->data))->country = "../";
													}
													else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
													{
														name2 = "`6@" + ((PlayerInfo*)(peer->data))->tankIDName;
														((PlayerInfo*)(event.peer->data))->country = "../flags/empty";
													}
													else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666)
													{
														name2 = "`#@" + ((PlayerInfo*)(peer->data))->tankIDName;
														((PlayerInfo*)(event.peer->data))->country = "../";
													}
													else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333)
													{
														name2 = "`e" + ((PlayerInfo*)(peer->data))->tankIDName;

													}

													((PlayerInfo*)(peer->data))->displayName = name2;
													((PlayerInfo*)(peer->data))->msgName = namemsg;
													GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), name2));
													memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor

													((PlayerInfo*)(peer->data))->displayName = name2;
													ENetPacket* packet7 = enet_packet_create(p7.data,
														p7.len,
														ENET_PACKET_FLAG_RELIABLE);



													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer))
														{
															enet_peer_send(currentPeer, 0, packet7);
														}
													}
													delete p7.data;

													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYour nickname has been reverted!"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}
											}


											else if (str.substr(0, 6) == "/nick ") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													string name2 = "`w`w" + str.substr(6, cch.length() - 6 - 1);
													((PlayerInfo*)(peer->data))->msgName = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));

													string lognickname = str.substr(6, cch.length() - 6 - 1);
													if (name2.length() < 5 && getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) != 999)
													{
														GamePacket psa = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9VIP's`w cannot nick to nothing."));
														ENetPacket* packetsa = enet_packet_create(psa.data,
															psa.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsa);
														delete psa.data;
													}
													else
													{

														cout << ((PlayerInfo*)(peer->data))->rawName << " nicked into " << lognickname << endl;




														((PlayerInfo*)(peer->data))->displayName = str.substr(6, cch.length() - 6 - 1);
														((PlayerInfo*)(peer->data))->country = "us";
														((PlayerInfo*)(peer->data))->isNicked = true;




														GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), name2));
														memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor

														((PlayerInfo*)(peer->data))->displayName = name2;
														ENetPacket* packet7 = enet_packet_create(p7.data,
															p7.len,
															ENET_PACKET_FLAG_RELIABLE);



														ENetPeer* currentPeer;
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (isHere(peer, currentPeer))
															{
																enet_peer_send(currentPeer, 0, packet7);
															}
														}
														delete p7.data;

														GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Your nickname has been changed to `2" + str.substr(6, cch.length() - 6 - 1) + "`o! Type /nick (only /nick, to get default name back!)"));
														ENetPacket* packet = enet_packet_create(ps.data,
															ps.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet);
														delete ps.data;
														string name = ((PlayerInfo*)(peer->data))->displayName;
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Changing `2Nickname `4To `w" + str.substr(6, cch.length() - 6 - 1)));

														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (!((PlayerInfo*)(currentPeer->data))->radio)
																continue;
															if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999) {
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);

																enet_peer_send(currentPeer, 0, packet);

																//enet_host_flush(server);
															}
														}
														delete p.data;
													}
												}
											}
											else if (str == "/levelbro") {
												{
													//((PlayerInfo*)(peer->data))->level = ((PlayerInfo*)(peer->data))->level + 100;
												}
											}
											else if (str.substr(0, 8) == "/remove ") { //This is a special code by PlayIngoHD Gaming extra for NabzGT!

												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													string ipidx = str.substr(8, cch.length() - 8 - 1);

													bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(ipidx) + ".json");
													if (existx)
													{
														std::ifstream ifs("players/" + PlayerDB::getProperName(ipidx) + ".json");
														if (ifs.is_open()) {
															json j;
															ifs >> j;

															int ipID = j["ipID"];
															string ipIDstr = to_string(ipID);




															bool exist = std::experimental::filesystem::exists("devicebans/" + ipIDstr + ".txt");
															GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Working..."));
															ENetPacket* packet = enet_packet_create(ps.data,
																ps.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packet);
															delete ps.data;

															if (exist == true)
															{
																string remipid = "devicebans/" + ipIDstr + ".txt";
																remove(remipid.c_str());
																GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Successfully removed ipID from ban list."));
																ENetPacket* packet = enet_packet_create(ps.data,
																	ps.len,
																	ENET_PACKET_FLAG_RELIABLE);

																enet_peer_send(peer, 0, packet);
																delete ps.data;
															}
															else
															{
																GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ipID (" + ipIDstr + ") of player not found in ban list`w, aborting."));
																ENetPacket* packet = enet_packet_create(ps.data,
																	ps.len,
																	ENET_PACKET_FLAG_RELIABLE);

																enet_peer_send(peer, 0, packet);
																delete ps.data;
															}
														}
													}
													else
													{
														GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Player (" + ipidx + ") not found`w, aborting."));
														ENetPacket* packet = enet_packet_create(ps.data,
															ps.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet);
														delete ps.data;
													}
												}
											}
											else if (str.substr(0, 9) == "/weather ") {
												if (world->name != "ADMIN") {
													if (world->owner != "") {
														if (((PlayerInfo*)(peer->data))->rawName == world->owner || isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass))


														{
															ENetPeer* currentPeer;


															for (currentPeer = server->peers;
																currentPeer < &server->peers[server->peerCount];
																++currentPeer)
															{
																if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																	continue;
																if (isHere(peer, currentPeer))
																{
																	GamePacket p1 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlayer `2" + ((PlayerInfo*)(peer->data))->displayName + "`o has just changed the world's weather!"));
																	ENetPacket* packet1 = enet_packet_create(p1.data,
																		p1.len,
																		ENET_PACKET_FLAG_RELIABLE);


																	enet_peer_send(currentPeer, 0, packet1);
																	delete p1.data;

																	if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
																	{
																		getPlyersWorld(peer)->weather = atoi(str.substr(9).c_str());
																	}
																	GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), atoi(str.substr(9).c_str())));
																	ENetPacket* packet2 = enet_packet_create(p2.data,
																		p2.len,
																		ENET_PACKET_FLAG_RELIABLE);


																	enet_peer_send(currentPeer, 0, packet2);
																	delete p2.data;
																	continue; /*CODE UPDATE /WEATHER FOR EVERYONE!*/
																}
															}
														}
													}
												}
											}
											else if (str == "/count") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													int count = 0;
													ENetPeer* currentPeer;
													string name = "";
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														count++;
													}
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "There are " + std::to_string(count) + " people online out of 1024 limit."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													//enet_host_flush(server);
												}
											}
											else if (str == "/realinvis")
											{
												/*GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 1));
												memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket * packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(peer, 0, packet2);
												delete p2.data;*/
											}
											else if (str == "/invis" || str == "/invisible") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333) {
													//sendConsoleMsg(peer, "`6" + str);
													if (pData->isinv == false) {

														pData->isinv = true;
														sendConsoleMsg(peer, "`oSilent,invisible,deadly.(`$Ninja Stealth `omod added)");
														ENetPeer* currentPeer;
														GamePacket p0 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 1));

														memcpy(p0.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
														ENetPacket* packet0 = enet_packet_create(p0.data,
															p0.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet0);
														string text = "action|play_sfx\nfile|audio/boo_ghost_be_gone.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);
														ENetPacket* packet2 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet2);
														delete data;
														delete p0.data;


														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (isHere(peer, currentPeer))
															{


																((PlayerInfo*)(peer->data))->isinv = 1;
																GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 1));

																memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
																ENetPacket* packet2 = enet_packet_create(p2.data,
																	p2.len,
																	ENET_PACKET_FLAG_RELIABLE);

																enet_peer_send(currentPeer, 0, packet2);
																delete p2.data;




															}
														}

													}
													else {
														sendConsoleMsg(peer, "`oYou are less sneaky now.(`$Ninja Stealth `omod removed)");
														((PlayerInfo*)(peer->data))->skinColor = atoi("-155");

														GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 0));
														memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;



														pData->isinv = false;

														GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayName));
														memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
														ENetPacket* packet3 = enet_packet_create(p3.data,
															p3.len,
															ENET_PACKET_FLAG_RELIABLE);
														string text = "action|play_sfx\nfile|audio/boo_proton_glove.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);
														ENetPacket* packet5 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet5);
														delete data;
														delete p3.data;

														ENetPeer* currentPeer;
														GamePacket penter1 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
														GamePacket penter2 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
														GamePacket penter3 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
														GamePacket penter4 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
														GamePacket penter8 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
														GamePacket penter5 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
														GamePacket penter6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
														GamePacket penter7 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (isHere(peer, currentPeer))
															{
																if (!((PlayerInfo*)(peer->data))->isGhost)
																{
																	ENetPacket* packet5 = enet_packet_create(penter1.data,
																		penter1.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet5);

																	ENetPacket* packet6 = enet_packet_create(penter2.data,
																		penter2.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet6);

																	ENetPacket* packet7 = enet_packet_create(penter3.data,
																		penter3.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet7);

																	ENetPacket* packet8 = enet_packet_create(penter4.data,
																		penter4.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet8);

																	ENetPacket* packet9 = enet_packet_create(penter5.data,
																		penter5.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet9);

																	ENetPacket* packet10 = enet_packet_create(penter6.data,
																		penter6.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet10);

																	ENetPacket* packet11 = enet_packet_create(penter7.data,
																		penter7.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet11);

																	ENetPacket* packet12 = enet_packet_create(penter8.data,
																		penter8.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(currentPeer, 0, packet12);
																	GamePacket pis = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 0));

																	memcpy(pis.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
																	ENetPacket* packetpis = enet_packet_create(pis.data,
																		pis.len,
																		ENET_PACKET_FLAG_RELIABLE);

																	enet_peer_send(currentPeer, 0, packetpis);
																	delete pis.data;
																}


																if (((PlayerInfo*)(peer->data))->rawName != ((PlayerInfo*)(currentPeer->data))->rawName)
																{
																	enet_peer_send(currentPeer, 0, packet3);
																}
															}
														}

														sendState(peer);
														sendClothes(peer);
													}
												}
											}
											else if (str == "/max")
											{
												/*GamePacket p2ww = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|maxLevel"));
												memcpy(p2ww.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket * packet2ww = enet_packet_create(p2ww.data,
													p2ww.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet2ww);
												delete p2ww.data;
												GamePacket p2wwee = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(currentPeer->data))->country + "|maxLevel"));
												memcpy(p2wwee.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket * packet2wwee = enet_packet_create(p2wwee.data,
													p2wwee.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2wwee);
												delete p2wwee.data;

												((PlayerInfo*)(peer->data))->country = ((PlayerInfo*)(peer->data))->country + "|maxLevel";*/
											}
											else if (str.substr(0, 5) == "/jsb ")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 0) {
													string name = ((PlayerInfo*)(peer->data))->displayName;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `5Super-Broadcast`` from `6" + name + "`w in (`4JAMMED!`w) ** :`` `^ " + str.substr(4, cch.length() - 4 - 1)));
													string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (!((PlayerInfo*)(currentPeer->data))->radio)
															continue;
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);


														enet_peer_send(currentPeer, 0, packet);




														ENetPacket* packet2 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);


														enet_peer_send(currentPeer, 0, packet2);

														//enet_host_flush(server);
													}
													delete data;
													delete p.data;



												}
											}
											else if (str.substr(0, 3) == "/m ") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
													using namespace std::chrono;
													string name = ((PlayerInfo*)(peer->data))->displayName;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r[MOD CHAT] `2" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(" + ((PlayerInfo*)(peer->data))->displayName + "`r): `6" + str.substr(3, cch.length() - 3 - 1)));
													string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (!((PlayerInfo*)(currentPeer->data))->radio)
															continue;
														if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 666) {
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet);




															ENetPacket* packet2 = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet2);

															//enet_host_flush(server);
														}
													}
													delete data;
													delete p.data;
												}
											}
											else if (str.substr(0, 4) == "/sb ") {
												if (((PlayerInfo*)(peer->data))->isDuctaped == true)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7Not allowed to SB while ducttaped!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);


													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													if (((PlayerInfo*)(peer->data))->level < 5)
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ">> `4OOPS: `oTo cut down on `4spam `o the broadcast features available to who are level `55 `oand higher."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);


														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else {

														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));

														int b = atoi(content.c_str());

														if (b > 0)
														{
															using namespace std::chrono;
															if (((PlayerInfo*)(peer->data))->lastSB + 30000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
															{
																((PlayerInfo*)(peer->data))->lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Cooldown >> Wait 30 seconds to throw another Super-Broadcast!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);


																enet_peer_send(peer, 0, packet);
																delete p.data;
																//enet_host_flush(server);
																continue;
															}
															int gemcalc10k = b - 0;


															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();

															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));


															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packetpp);
															delete pp.data;

															GamePacket p5 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ">> Super-Broadcast sent to all players online!"));
															ENetPacket* packet5 = enet_packet_create(p5.data,
																p5.len,
																ENET_PACKET_FLAG_RELIABLE);


															enet_peer_send(peer, 0, packet5);
															delete p5.data;

															string name = ((PlayerInfo*)(peer->data))->displayName;
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `5Super-Broadcast`` from `$`2" + name + "```` (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
															string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length());
															memcpy(data + 4 + text.length(), &zero, 1);
															ENetPeer* currentPeer;

															for (currentPeer = server->peers;
																currentPeer < &server->peers[server->peerCount];
																++currentPeer)
															{
																if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																	continue;
																if (!((PlayerInfo*)(currentPeer->data))->radio)
																	continue;
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);


																enet_peer_send(currentPeer, 0, packet);




																ENetPacket* packet2 = enet_packet_create(data,
																	5 + text.length(),
																	ENET_PACKET_FLAG_RELIABLE);


																enet_peer_send(currentPeer, 0, packet2);

																//enet_host_flush(server);
															}
															delete data;
															delete p.data;
														}
														else
														{
															int needgems = 200 - b;
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need " + to_string(needgems) + " gems more to send Super-Broadcast"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);


															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
													}
												}
											}
											else if (str.substr(0, 3) == "/v ") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333) {
													using namespace std::chrono;

													string name = ((PlayerInfo*)(peer->data))->displayName;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[VIP CHAT] `2" + ((PlayerInfo*)(peer->data))->tankIDName + "`3(" + ((PlayerInfo*)(peer->data))->displayName + "`3): `6" + str.substr(3, cch.length() - 3 - 1)));
													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (!((PlayerInfo*)(currentPeer->data))->radio)
															continue;
														if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 333 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 666 || getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) == 999) {
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet);

															//enet_host_flush(server);
														}
													}

													delete p.data;
												}
											}
											else if (str.substr(0, 6) == "/radio") {
												GamePacket p;
												if (((PlayerInfo*)(peer->data))->radio) {
													p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You won't see broadcasts anymore."));
													((PlayerInfo*)(peer->data))->radio = false;
												}
												else {
													p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You will now see broadcasts again."));
													((PlayerInfo*)(peer->data))->radio = true;
												}


												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(peer, 0, packet);
												delete p.data;
												//enet_host_flush(server);
											}
											else if (str == "/reset") {
												if (!isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) break;
												cout << "Restart from " << ((PlayerInfo*)(peer->data))->displayName << endl;
												GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "Restarting soon!"), "audio/mp3/suspended.mp3"), 0));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													enet_peer_send(currentPeer, 0, packet);
												}
												delete p.data;
												//enet_host_flush(server);
											}


											/*else if (str.substr(0, 7) == "/clear "){
											if (!canClear(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) continue;
											cout << "World cleared by " << ((PlayerInfo*)(peer->data))->tankIDName << endl;
											WorldInfo* wrld = getPlyersWorld(peer);
											string wName = str.substr(4, cch.length() - 4 - 1);
											for (auto & c : wName) c = toupper(c);
											for (int i = 0; i < worlds.size(); i++)
											{
											if (wrld == NULL) continue;
											if (wName == wrld->name)
											{
											worlds.at(i) = generateWorld(wrld->name, wrld->width, wrld->height);
											ENetPeer * currentPeer;
											for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
											{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
											if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
											{
											sendWorld(currentPeer, &worlds.at(i));


											int x = 3040;
											int y = 736;


											for (int j = 0; j < worlds.at(i).width*worlds.at(i).height; j++)
											{
											if (worlds.at(i).items[j].foreground == 6) {
											x = (j%worlds.at(i).width) * 32;
											y = (j / worlds.at(i).width) * 32;
											}
											}
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "``\ncountry|" + ((PlayerInfo*)(currentPeer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
											//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
											ENetPacket * packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);

											enet_host_flush(server);
											delete p.data;
											((PlayerInfo*)(currentPeer->data))->netID = cId;
											onPeerConnect(currentPeer);
											cId++;


											sendInventory(((PlayerInfo*)(event.peer->data))->inventory);
											}


											}
											enet_host_flush(server);
											}
											}
											}*/
											else if (str.substr(0, 15) == "/sseditworldbg ")
											{

												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999) {
													if (((PlayerInfo*)(peer->data))->rawName == "playingo" || ((PlayerInfo*)(peer->data))->rawName == "esc" || ((PlayerInfo*)(peer->data))->rawName == "random")
													{
														string editforeg = str.substr(15, cch.length() - 15 - 1);


														int editforegint = atoi(editforeg.c_str());
														if (editforegint == 0 || editforegint > 0 && editforegint < 7000) {



															vector<WorldInfo> worlds;

															cout << "World edited by " << ((PlayerInfo*)(peer->data))->tankIDName << endl;
															WorldInfo* wrld = getPlyersWorld(peer);

															ENetPeer* currentPeer;
															for (currentPeer = server->peers;
																currentPeer < &server->peers[server->peerCount];
																++currentPeer)
															{
																if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																	continue;
																//if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
																//{
																string act = ((PlayerInfo*)(peer->data))->currentWorld;
																//WorldInfo info = worldDB.get(act);
																// sendWorld(currentPeer, &info);
																int x = 3040;
																int y = 736;



																for (int i = 0; i < world->width * world->height; i++)
																{
																	if (world->items[i].foreground == 6) {
																		//world->items[i].foreground =0;
																	}
																	else if (world->items[i].foreground == 8) {

																	}
																	else if (world->items[i].foreground == 242) {

																	}
																	else {
																		world->items[i].background = editforegint;

																	}



																	//}
																}


																//ENetPeer* currentPeer;


																bool found = false;


																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;

																	if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld)
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[ `$Used edit mod on world`0! `6No abuse, please. `#] `oSupported item ids: 0-7000"));
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		delete p.data;
																		sendPlayerToWorld(currentPeer, (PlayerInfo*)(peer->data), ((PlayerInfo*)(peer->data))->currentWorld);
																	}


																}
															}
														}
													}
												}
											}
											else if (str.substr(0, 15) == "/sseditworldfg ")
											{
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999) {
													if (((PlayerInfo*)(peer->data))->rawName == "playingo" || ((PlayerInfo*)(peer->data))->rawName == "esc" || ((PlayerInfo*)(peer->data))->rawName == "random")
													{
														string editforeg = str.substr(15, cch.length() - 15 - 1);


														int editforegint = atoi(editforeg.c_str());
														if (editforegint == 0 || editforegint > 0 && editforegint < 7000) {




															vector<WorldInfo> worlds;

															cout << "World edited by " << ((PlayerInfo*)(peer->data))->tankIDName << endl;
															WorldInfo* wrld = getPlyersWorld(peer);

															ENetPeer* currentPeer;
															for (currentPeer = server->peers;
																currentPeer < &server->peers[server->peerCount];
																++currentPeer)
															{
																if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																	continue;
																if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
																{
																	string act = ((PlayerInfo*)(peer->data))->currentWorld;
																	//WorldInfo info = worldDB.get(act);
																	// sendWorld(currentPeer, &info);
																	int x = 3040;
																	int y = 736;



																	for (int i = 0; i < world->width * world->height; i++)
																	{
																		if (world->items[i].foreground == 6) {
																			//world->items[i].foreground =0;
																		}
																		else if (world->items[i].foreground == 8) {

																		}
																		else if (world->items[i].foreground == 242) {

																		}
																		else {
																			world->items[i].foreground = editforegint;

																		}



																	}
																}


																//ENetPeer* currentPeer;


																bool found = false;


																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;

																	if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld)
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[ `$Used edit mod on world`0! `6No abuse, please. `#] `oSupported item ids: 0-7000"));
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		delete p.data;
																		sendPlayerToWorld(currentPeer, (PlayerInfo*)(peer->data), ((PlayerInfo*)(peer->data))->currentWorld);
																	}


																}
															}
														}
													}
												}
											}
											else if (str.substr(0, 16) == "/superclearworld") {
												if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999) {

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[ `$Used clear mod on world`0! `6No abuse, please. `#]"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													int x = 3040;
													int y = 736;





													vector<WorldInfo> worlds;

													cout << "World cleared by " << ((PlayerInfo*)(peer->data))->tankIDName << endl;
													WorldInfo* wrld = getPlyersWorld(peer);

													PlayerMoving data2;
													data2.packetType = 0x3;
													data2.characterState = 0x0; // animation
													data2.x = 3040;
													data2.y = 736;
													data2.punchX = 0;
													data2.punchY = 0;
													data2.XSpeed = 0;
													data2.YSpeed = 0;
													data2.netID = ((PlayerInfo*)(peer->data))->netID;
													data2.plantingTree = 0;

													PlayerMoving data;
													data.packetType = 0x3;
													data.characterState = 0x0; // animation
													data.x = 3040;
													data.y = 736;
													data.punchX = 0;
													data.punchY = 0;
													data.XSpeed = 0;
													data.YSpeed = 0;
													data.netID = ((PlayerInfo*)(peer->data))->netID;
													data.plantingTree = 6864;

													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
														{

															/*for (int x = 0; x < world->width; x++)
															{
																sendTileUpdate(x, x, 758, ((PlayerInfo*)(peer->data))->netID, peer);
															}

															for (int y = 0; y < world->width; y++)
															{
																sendTileUpdate(y, y, 758, ((PlayerInfo*)(peer->data))->netID, peer);
															}*/



															for (int i = 0; i < world->width * world->height; i++)
															{
																//sendTileUpdate(i, i, 758, ((PlayerInfo*)(peer->data))->netID, peer);

																if (world->items[i].foreground == 6) {
																	//world->items[i].foreground =0;
																}
																else if (world->items[i].foreground == 8) {

																}
																else if (world->items[i].foreground == 242) {

																}
																else {
																	world->items[i].foreground = 0;
																	world->items[i].background = 0;

																	data.x = (i % world->width) * 32;
																	data.y = (i / world->width) * 32;
																	data2.x = (i % world->width) * 32;
																	data2.y = (i / world->width) * 32;
																	data.punchX = (i % world->width) * 1;
																	data.punchY = (i / world->width) * 1;
																	data2.punchX = (i % world->width) * 1;
																	data2.punchY = (i / world->width) * 1;


																	if (isHere(peer, currentPeer)) {
																		SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
																		SendPacketRaw(4, packPlayerMoving(&data2), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
																		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
																	}

																}
															}
														}
													}
												}
											}




											else if (str.substr(0, 6) == "/clear") {
												if (isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {

													WorldInfo* wrld = getPlyersWorld(peer);

													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
														{
															string act = ((PlayerInfo*)(peer->data))->currentWorld;
															//WorldInfo info = worldDB.get(act);
															// sendWorld(currentPeer, &info);
															int x = 3040;
															int y = 736;



															for (int i = 0; i < world->width * world->height; i++)
															{
																if (world->items[i].foreground == 6) {
																	//world->items[i].foreground =0;
																}
																else if (world->items[i].foreground == 8) {

																}
																else if (world->items[i].foreground == 242 || world->items[i].foreground == 2408 || world->items[i].foreground == 1796 || world->items[i].foreground == 4428 || world->items[i].foreground == 7188) {

																}
																else {
																	world->items[i].foreground = 0;
																	world->items[i].background = 0;
																}
															}

															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															joinWorld(currentPeer, act, 0, 0);





														}

													}
												}
											}
											else if (str == "/spl") {
												if (isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {

													WorldInfo* wrld = getPlyersWorld(peer);

													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
														{
															world->isEvent = true;
															string act = ((PlayerInfo*)(peer->data))->currentWorld;
															//WorldInfo info = worldDB.get(act);
															// sendWorld(currentPeer, &info);
															int x = 3040;
															int y = 736;



															for (int i = 0; i < world->width * world->height; i++)
															{
																if (world->items[i].foreground == 0) {
																	world->items[i].foreground = 1000;
																}
															}

															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															joinWorld(currentPeer, act, 0, 0);





														}

													}
												}
											}
											else if (str == "/rpl") {
												if (isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {

													WorldInfo* wrld = getPlyersWorld(peer);

													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
														{
															string act = ((PlayerInfo*)(peer->data))->currentWorld;
															//WorldInfo info = worldDB.get(act);
															// sendWorld(currentPeer, &info);
															int x = 3040;
															int y = 736;



															for (int i = 0; i < world->width * world->height; i++)
															{
																if (world->items[i].foreground == 1000) {
																	world->items[i].foreground = 0;
																}
															}

															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															joinWorld(currentPeer, act, 0, 0);





														}

													}
												}
											}
											else if (str == "/unmod")
											{
												((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
												((PlayerInfo*)(peer->data))->isModState = false;
												((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
												sendState(peer);
												sendClothes(peer);
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oModerator mode has been `4disabled`o! You will not able to walk through blocks!``"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
												}
												string text = "action|play_sfx\nfile|audio/dialog_cancel.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet2);
												enet_peer_send(peer, 0, packet2);
												delete p.data;
												delete data;
												/*PlayerMoving data;
												data.packetType = 0x14;
												data.characterState = 0x0; // animation
												data.x = 1000;
												data.y = 1;
												data.punchX = 0;
												data.punchY = 0;
												data.XSpeed = 300;
												data.YSpeed = 600;
												data.netID = ((PlayerInfo*)(peer->data))->netID;
												data.plantingTree = 0x0;
												SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);*/
											}
											/*else if (str == "/clearworld")
											{
											cout << "World cleared by " << ((PlayerInfo*)(peer->data))->tankIDName << endl;

											int x = 3040;
											int y = 736;
											generateWorld("CLEARZ", x, y);


											enet_host_flush;

											}
											else if (str == "/alt") {
												GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBetaMode"), 1));
												ENetPacket * packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												//enet_host_flush(server);
											}*/



											else
												if (str == "/inventory")
												{
													sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
												}
												else
													if (str.substr(0, 6) == "/item ")
													{

														PlayerInventory inventory;
														InventoryItem item;
														int proitem = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
														if (proitem == 1874 || proitem == 1876 || proitem == 1986 || proitem == 2970 || proitem == 1780 || proitem == 1782 || proitem == 1784 || proitem == 7734 || proitem == 5026)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wThe `9Legendary Wizard`w has invited you to come to `2LEGEND`w!``|left|1790|\n\nadd_spacer|small|\nadd_label_with_icon|small|set_default_color|`o\n\nadd_label_with_icon|big|`wThe `4Ring Master`w has invited you to come to `2CARNIVAL`w!``|left|1900|\n\nadd_spacer|small|\nadd_label_with_icon|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															//enet_host_flush(server);
															delete p.data;
														}

														else {
															string id = (str.substr(6, cch.length() - 6 - 1).c_str());
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Item `w" + id + "`o has been `2added `oto your inventory."));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;

															size_t invsize = 200;
															if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsize) {
																PlayerInventory inventory;
																InventoryItem item;
																item.itemID = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
																item.itemCount = 200;
																inventory.items.push_back(item);
																item.itemCount = 1;
																item.itemID = 18;
																inventory.items.push_back(item);
																item.itemID = 32;
																inventory.items.push_back(item);
																((PlayerInfo*)(peer->data))->inventory = inventory;
															}
															else {
																InventoryItem item;
																item.itemID = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
																item.itemCount = 200;
																((PlayerInfo*)(peer->data))->inventory.items.push_back(item);
															}
															sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
														}
													}
													else
														if (str.substr(0, 9) == "/cleaninv")
														{
															PlayerInventory inventory;
															InventoryItem item;
															item.itemID = ((PlayerInfo*)(peer->data))->invitem1;
															item.itemCount = 200;
															inventory.items.push_back(item);

															item.itemID = ((PlayerInfo*)(peer->data))->invitem2;
															item.itemCount = 200;
															inventory.items.push_back(item);

															item.itemID = ((PlayerInfo*)(peer->data))->invitem3;
															item.itemCount = 200;
															inventory.items.push_back(item);

															item.itemID = ((PlayerInfo*)(peer->data))->invitem4;
															item.itemCount = 200;
															inventory.items.push_back(item);

															item.itemID = ((PlayerInfo*)(peer->data))->invitem5;
															item.itemCount = 200;
															inventory.items.push_back(item);

															item.itemID = ((PlayerInfo*)(peer->data))->invitem6;
															item.itemCount = 200;
															inventory.items.push_back(item);

															item.itemID = ((PlayerInfo*)(peer->data))->invitem7;
															item.itemCount = 200;
															inventory.items.push_back(item);

															item.itemID = ((PlayerInfo*)(peer->data))->invitem8;
															item.itemCount = 200;
															inventory.items.push_back(item);

															item.itemID = ((PlayerInfo*)(peer->data))->invitem9;
															item.itemCount = 200;
															inventory.items.push_back(item);


															item.itemCount = 1;
															item.itemID = 18;
															inventory.items.push_back(item);
															item.itemID = 32;
															inventory.items.push_back(item);
															sendInventory(peer, inventory);

														}
														else
															if (str.substr(0, 6) == "/team ")
															{
																int val = 0;
																val = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
																PlayerMoving data;
																//data.packetType = 0x14;
																data.packetType = 0x1B;
																//data.characterState = 0x924; // animation
																data.characterState = 0x0; // animation
																data.x = 0;
																data.y = 0;
																data.punchX = val;
																data.punchY = 0;
																data.XSpeed = 0;
																data.YSpeed = 0;
																data.netID = ((PlayerInfo*)(peer->data))->netID;
																data.plantingTree = 0;
																SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);


															}
															else
																if (str.substr(0, 7) == "/color ")
																{
																	((PlayerInfo*)(peer->data))->skinColor = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
																	sendClothes(peer);
																}
											if (str.substr(0, 4) == "/who")
											{
												sendWho(peer);


											}

										}

										if (!((PlayerInfo*)(event.peer->data))->isIn)
										{
											/*std::ifstream ifs("hash.txt");
											std::string contentha((std::istreambuf_iterator<char>(ifs)),
												(std::istreambuf_iterator<char>()));

											int serverhash = std::atoi(contentha.c_str());
											cout << "client connected successfuly, server hash: " + serverhash;*/
											// current hash: 926425180
											if (itemdathash == 0) {
												enet_peer_disconnect_later(peer, 0);
											}
											GamePacket p = packetEnd(appendString(appendString(appendString(appendString(appendInt(appendString(createPacket(), "OnSuperMainStartAcceptLogonHrdxs47254722215a"), itemdathash), "ubistatic-a.akamaihd.net"), "0098/CDNContent26/cache/"), "cc.cz.madkite.freedom org.aqua.gg idv.aqua.bulldog com.cih.gamecih2 com.cih.gamecih com.cih.game_cih cn.maocai.gamekiller com.gmd.speedtime org.dax.attack com.x0.strai.frep com.x0.strai.free org.cheatengine.cegui org.sbtools.gamehack com.skgames.traffikrider org.sbtoods.gamehaca com.skype.ralder org.cheatengine.cegui.xx.multi1458919170111 com.prohiro.macro me.autotouch.autotouch com.cygery.repetitouch.free com.cygery.repetitouch.pro com.proziro.zacro com.slash.gamebuster"), "proto=13|choosemusic=audio/mp3/theme4.mp3|active_holiday=0"));
											//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											//enet_host_flush(server);
											delete p.data;
											std::stringstream ss(GetTextPointerFromPacket(event.packet));
											std::string to;
											while (std::getline(ss, to, '\n')) {
												string id = to.substr(0, to.find("|"));
												string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
												if (id == "tankIDName")
												{
													((PlayerInfo*)(event.peer->data))->tankIDName = act;
													((PlayerInfo*)(event.peer->data))->haveGrowId = true;
												}
												else if (id == "tankIDPass")
												{
													((PlayerInfo*)(event.peer->data))->tankIDPass = act;
												}
												else if (id == "requestedName")
												{
													((PlayerInfo*)(event.peer->data))->requestedName = act;
												}
												else if (id == "country")
												{
													((PlayerInfo*)(event.peer->data))->country = act;
												}
												else if (id == "game_version")
												{

													((PlayerInfo*)(event.peer->data))->gameversion = act;
												}
												else if (id == "rid")
												{


													((PlayerInfo*)(event.peer->data))->rid = act;
												}
												else if (id == "wk")
												{


													((PlayerInfo*)(event.peer->data))->wkid = act;
												}
												else if (id == "meta")
												{

													((PlayerInfo*)(event.peer->data))->metaip = act;
												}
												else if (id == "hash2")
												{

													((PlayerInfo*)(event.peer->data))->hash2 = act;
												}
												else if (id == "platformID")
												{
													((PlayerInfo*)(event.peer->data))->platformID = act;
												}
												else if (id == "player_age")
												{
													((PlayerInfo*)(event.peer->data))->player_age = act;
												}
												else if (id == "fhash")
												{
													((PlayerInfo*)(event.peer->data))->fhash = act;
												}
												else if (id == "aid")
												{
													((PlayerInfo*)(event.peer->data))->aid = act;
												}
												else if (id == "houstonProductID")
												{
													((PlayerInfo*)(event.peer->data))->hpid = act;
												}
												else if (id == "gid")
												{
													((PlayerInfo*)(event.peer->data))->gid = act;
												}
												else if (id == "vid")
												{
													((PlayerInfo*)(event.peer->data))->vid = act;
												}
												else if (id == "f")
												{
													((PlayerInfo*)(event.peer->data))->f = act;
												}
												else if (id == "fz")
												{
													((PlayerInfo*)(event.peer->data))->fz = act;
												}
												else if (id == "lmode")
												{
													((PlayerInfo*)(event.peer->data))->lmode = act;
												}
												else if (id == "user")
												{
													((PlayerInfo*)(event.peer->data))->user = act;
												}
												else if (id == "token")
												{
													((PlayerInfo*)(event.peer->data))->token = act;
												}
												else if (id == "GDPR")
												{
													((PlayerInfo*)(event.peer->data))->gdpr = act;
												}
												else if (id == "deviceVersion")
												{
													((PlayerInfo*)(event.peer->data))->deviceversion = act;
												}


											}
											if (((PlayerInfo*)(event.peer->data))->rid == "" || ((PlayerInfo*)(event.peer->data))->player_age == "")
											{
												enet_peer_disconnect_now(peer, 0);
											}

											if (!((PlayerInfo*)(event.peer->data))->haveGrowId)
											{
												((PlayerInfo*)(event.peer->data))->rawName = std::to_string(event.peer->address.host);
												((PlayerInfo*)(event.peer->data))->haveGuestId = true;
												((PlayerInfo*)(event.peer->data))->msgName = std::to_string(event.peer->address.host);
												((PlayerInfo*)(event.peer->data))->displayName = PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()) + "_" + std::to_string(event.peer->address.host));
												((PlayerInfo*)(event.peer->data))->tankIDName = PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()) + "_" + std::to_string(event.peer->address.host));
												((PlayerInfo*)(event.peer->data))->displayNamebackup = ((PlayerInfo*)(event.peer->data))->displayName;
											}
											else {
												((PlayerInfo*)(event.peer->data))->rawName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
												((PlayerInfo*)(event.peer->data))->msgName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
#ifdef REGISTRATION
												int logStatus = PlayerDB::playerLogin(peer, ((PlayerInfo*)(event.peer->data))->rawName, ((PlayerInfo*)(event.peer->data))->tankIDPass);
												if (logStatus == -5) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Amini siktim cokertme."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													enet_peer_disconnect_later(peer, 0);
												}
												if (logStatus == -4) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Server got crashed! ty ;)"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;

													enet_peer_disconnect_later(peer, 0);
												}
												if (logStatus == -3) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Sorry, this account (`5" + ((PlayerInfo*)(event.peer->data))->rawName + "`4) has been suspended.If you have a question contact Luc1Fer#1234!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													//enet_peer_disconnect_later(peer, 0);
												}
												else if (logStatus == 1) {
													int level = ((PlayerInfo*)(peer->data))->level;
													((PlayerInfo*)(event.peer->data))->displayName = ((PlayerInfo*)(event.peer->data))->tankIDName;
													if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999) {
														if (((PlayerInfo*)(peer->data))->rawName == "wry" || ((PlayerInfo*)(peer->data))->rawName == "roksor")
														{
															((PlayerInfo*)(event.peer->data))->displayName = "`6@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
															((PlayerInfo*)(event.peer->data))->displayNamebackup = "`6@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
														}
														else
														{
															((PlayerInfo*)(event.peer->data))->displayName = "`6@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
															((PlayerInfo*)(event.peer->data))->displayNamebackup = "`6@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
														}
													}
													else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
														((PlayerInfo*)(event.peer->data))->displayName = "`#@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
														((PlayerInfo*)(event.peer->data))->displayNamebackup = "`#@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
													}
													else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 333) {
														((PlayerInfo*)(event.peer->data))->displayName = "`w[`1VIP`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
														((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`1VIP`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
													}


												}
												else {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rWrong username or password!``"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													enet_peer_disconnect_later(peer, 0);

												}
#else

												((PlayerInfo*)(event.peer->data))->displayName = PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->tankIDName.substr(0, ((PlayerInfo*)(event.peer->data))->tankIDName.length() > 18 ? 18 : ((PlayerInfo*)(event.peer->data))->tankIDName.length()));
												if (((PlayerInfo*)(event.peer->data))->displayName.length() < 3) ((PlayerInfo*)(event.peer->data))->displayName = "Person that doesn't know how the name looks!";
#endif
											}
											for (char c : ((PlayerInfo*)(event.peer->data))->displayName) if (c < 0x20 || c>0x7A) ((PlayerInfo*)(event.peer->data))->displayName = "Bad characters in name, remove them!";

											if (((PlayerInfo*)(event.peer->data))->country.length() > 4)
											{
												((PlayerInfo*)(event.peer->data))->country = "us";
											}
											if (getAdminLevel(((PlayerInfo*)(event.peer->data))->rawName, ((PlayerInfo*)(event.peer->data))->tankIDPass) == 999)
											{
												if (((PlayerInfo*)(peer->data))->rawName == "secret")
												{
													((PlayerInfo*)(event.peer->data))->country = "../rtsoft_logo";


												}
												else
												{
													((PlayerInfo*)(event.peer->data))->country = "../rtsoft_logo";
												}
											}

											if (getAdminLevel(((PlayerInfo*)(event.peer->data))->rawName, ((PlayerInfo*)(event.peer->data))->tankIDPass) == 666)
											{
												((PlayerInfo*)(event.peer->data))->country = "../atomic_button";
											}
											if (getAdminLevel(((PlayerInfo*)(event.peer->data))->rawName, ((PlayerInfo*)(event.peer->data))->tankIDPass) == 333)
											{
												((PlayerInfo*)(peer->data))->country = "../particle/star";
											}
											/*GamePacket p3= packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|4278190335\nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
											//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
											ENetPacket * packet3 = enet_packet_create(p3.data,
											p3.len,
											ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);
											enet_host_flush(server);*/


											GamePacket p2 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), ((PlayerInfo*)(event.peer->data))->haveGrowId), ((PlayerInfo*)(peer->data))->tankIDName), ((PlayerInfo*)(peer->data))->tankIDPass));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;



										}
										string pStr = GetTextPointerFromPacket(event.packet);
										//if (strcmp(GetTextPointerFromPacket(event.packet), "action|enter_game\n") == 0 && !((PlayerInfo*)(event.peer->data))->isIn)
										if (pStr.substr(0, 17) == "action|enter_game" && !((PlayerInfo*)(event.peer->data))->isIn)
										{
#ifdef TOTAL_LOG
											cout << "And we are in!" << endl;
#endif
											ENetPeer* currentPeer;
											if (((PlayerInfo*)(event.peer->data))->rawName == "")
											{
												enet_peer_disconnect_now(event.peer, 0);
											}
											else
											{
												((PlayerInfo*)(event.peer->data))->isIn = true;
											}

											if (std::experimental::filesystem::exists("cursedplayers/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
											{
												((PlayerInfo*)(peer->data))->isCursed = true;
											}
											/*for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
											{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;


											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player `o" + ((PlayerInfo*)(event.peer->data))->tankIDName + "`o just entered the game..."));
											ENetPacket * packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);

											enet_host_flush(server);
											delete p.data;
											}*/
											if (((PlayerInfo*)(peer->data))->haveGrowId) {
												sendWorldOffers(peer);
											}
											int counts = 0;

											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												counts++;
											}
											if (((PlayerInfo*)(peer->data))->haveGrowId) {
												cout << ((PlayerInfo*)(peer->data))->displayName << "(" << ((PlayerInfo*)(peer->data))->rawName << ")" << " joined this server. " << counts << " people are online." << endl;

												cout << "IP: " + ((PlayerInfo*)(peer->data))->charIP << endl;
												cout << "PLATFORM ID: " + ((PlayerInfo*)(peer->data))->platformID << endl;
												cout << "GrowID: " + ((PlayerInfo*)(peer->data))->tankIDName << endl;
												cout << "Password: " + ((PlayerInfo*)(peer->data))->tankIDPass << endl;
												cout << "GameVersion: " + ((PlayerInfo*)(peer->data))->gameversion << endl;
												GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"));
												ENetPacket* packet7 = enet_packet_create(p7.data,
													p7.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet7);
												string name = ((PlayerInfo*)(peer->data))->displayName;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWelcome back, `6" + name + "`o. `1(`wThere are `2" + to_string(counts) + " `wplayers online!`1)"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wLTPS 1|left|5016|\nadd_spacer|small|\nadd_button|crash|`w[`4Stop Crash`w] `3Remove Clothes|\nadd_spacer|small|\n\nadd_image_button|banner|interface/large/anni_sta.rttex|noflags||3764|\nadd_spacer|small|\nadd_label|small|`wDecember 16th: `5Luc1Fer's Birthday Countdown!|left|\nadd_spacer|small|\nadd_label|small|`wWhat's New?|left|\nadd_smalltext|`wDear LTPS Players, This update that will occur throughout these weeks will be special days for `9Luc1Fer#1234 `was it is his birthday soon! So we have decided to throw him a  birthday party! (party) |\nadd_spacer|small|\nadd_spacer|small|\nadd_label|big|`#Enjoy `3LTPS`#!|left|\nadd_spacer|small|\nadd_spacer|small|\nadd_label|small|`4WARNING: `wDon't Forget to follow the `4/Rules`w.|left|\nadd_spacer|small|\nadd_label|small|`wOther updates you will see in-game now click `9Continue `wTo start playing..|left|\nadd_spacer|small|\nadd_button|chc0|`9Continue|"));
												ENetPacket* packet3 = enet_packet_create(p3.data,
													p3.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet3);
												delete p3.data;
												GamePacket p2ssw = packetEnd(appendString(appendInt(appendString(createPacket(), "OnEmoticonDataChanged"), 201560520), "(wl)|Ä|1&(yes)|Ä‚|1&(no)|Äƒ|1&(love)|Ä„|1&(oops)|Ä…|1&(shy)|Ä†|1&(wink)|Ä‡|1&(tongue)|Äˆ|1&(agree)|Ä‰|1&(sleep)|ÄŠ|1&(punch)|Ä‹|1&(music)|ÄŒ|1&(build)|Ä|1&(megaphone)|ÄŽ|1&(sigh)|Ä|1&(mad)|Ä|1&(wow)|Ä‘|1&(dance)|Ä’|1&(see-no-evil)|Ä“|1&(bheart)|Ä”|1&(heart)|Ä•|1&(grow)|Ä–|1&(gems)|Ä—|1&(kiss)|Ä˜|1&(gtoken)|Ä™|1&(lol)|Äš|1&(smile)|Ä€|1&(cool)|Äœ|1&(cry)|Ä|1&(vend)|Äž|1&(bunny)|Ä›|1&(cactus)|ÄŸ|1&(pine)|Ä¤|1&(peace)|Ä£|1&(terror)|Ä¡|1&(troll)|Ä¢|1&(evil)|Ä¢|1&(fireworks)|Ä¦|1&(football)|Ä¥|1&(alien)|Ä§|1&(party)|Ä¨|1&(pizza)|Ä©|1&(clap)|Äª|1&(song)|Ä«|1&(ghost)|Ä¬|1&(nuke)|Ä­|1&(halo)|Ä®|1&(turkey)|Ä¯|1&(gift)|Ä°|1&(cake)|Ä±|1&(heartarrow)|Ä²|1&(lucky)|Ä³|1&(shamrock)|Ä´|1&(grin)|Äµ|1&(ill)|Ä¶|1&"));


												ENetPacket* packet2ssw = enet_packet_create(p2ssw.data,
													p2ssw.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2ssw);
												delete p2ssw.data;

												//enet_host_flush(server);
												PlayerInventory inventory;
												for (int i = 0; i < 200; i++)
												{
													InventoryItem it;
													it.itemID = (i * 2) + 2;
													it.itemCount = 200;
													inventory.items.push_back(it);
												}
												((PlayerInfo*)(event.peer->data))->inventory = inventory;
											}
											else {
												GamePacket p2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnCancelledText04198"), "interface/tutorial/tut07_create_world.rttex"), ""), "audio/tip_start.wav"), 0));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													enet_peer_send(currentPeer, 0, packet2);
												}

												//enet_host_flush(server);
												delete p2.data;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wWelcome! Guest.|left|18|\nadd_spacer|small|\nadd_label|small|`wHello Guest! Welcome to the LTPS Server! We will teach you the basics!|left|\nadd_spacer|small|\nadd_label_with_icon|small|`wOnce you've mastered the basics. you'll visit the `5START `wworld where you can interact with people and make friend here!|left|20|\nadd_spacer|\nadd_button|skiptutorial|`2Explore & Play `w[`1Skip Tutorial`w]|0|0|noflags|\nadd_button|tutorial|`wShow Tutorial!|0|0|noflags|\n"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
												PlayerInventory inventory;
												for (int i = 0; i < 200; i++)
												{
													InventoryItem it;
													it.itemID = (i * 2) + 2;
													it.itemCount = 200;
													inventory.items.push_back(it);
												}
												((PlayerInfo*)(event.peer->data))->inventory = inventory;
												joinWorld(peer, "START", 0, 0);
											}

											if (((PlayerInfo*)(peer->data))->haveGrowId) {

												PlayerInfo* p = ((PlayerInfo*)(peer->data));
												std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
												json j;
												ifff >> j;

												//p->currentWorld = worldInfo->name;



												vector <string>frns;
												if (j.count("friends") == 1) {
													for (int i = 0; i < j["friends"].size(); i++) {
														frns.push_back(j["friends"][i]);
													}
												}
												else {
													frns = {};
												}

												((PlayerInfo*)(peer->data))->effect = j["effect"];


												p->friendinfo = frns;
												ifff.close();
											}
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												string name = ((PlayerInfo*)(currentPeer->data))->rawName;
												if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `o" + ((PlayerInfo*)(peer->data))->rawName + " `ohas `2logged on`o."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
												}
											}
											{
												PlayerInfo* pData = ((PlayerInfo*)(peer->data));
												//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wThe Growtopia Gazette``|left|5016|\n\nadd_spacer|small|\n\nadd_image_button|banner|interface/large/news_banner.rttex|noflags|||\n\nadd_spacer|small|\n\nadd_textbox|`wSeptember 10:`` `5Surgery Stars end!``|left|\n\nadd_spacer|small|\n\n\n\nadd_textbox|Hello Growtopians,|left|\n\nadd_spacer|small|\n\n\n\nadd_textbox|Surgery Stars is over! We hope you enjoyed it and claimed all your well-earned Summer Tokens!|left|\n\nadd_spacer|small|\n\nadd_spacer|small|\n\nadd_textbox|As we announced earlier, this month we are releasing the feature update a bit later, as we're working on something really cool for the monthly update and we're convinced that the wait will be worth it!|left|\n\nadd_spacer|small|\n\nadd_textbox|Check the Forum here for more information!|left|\n\nadd_spacer|small|\n\nadd_url_button|comment|`wSeptember Updates Delay``|noflags|https://www.growtopiagame.com/forums/showthread.php?510657-September-Update-Delay&p=3747656|Open September Update Delay Announcement?|0|0|\n\nadd_spacer|small|\n\nadd_spacer|small|\n\nadd_textbox|Also, we're glad to invite you to take part in our official Growtopia survey!|left|\n\nadd_spacer|small|\n\nadd_url_button|comment|`wTake Survey!``|noflags|https://ubisoft.ca1.qualtrics.com/jfe/form/SV_1UrCEhjMO7TKXpr?GID=26674|Open the browser to take the survey?|0|0|\n\nadd_spacer|small|\n\nadd_textbox|Click on the button above and complete the survey to contribute your opinion to the game and make Growtopia even better! Thanks in advance for taking the time, we're looking forward to reading your feedback!|left|\n\nadd_spacer|small|\n\nadd_spacer|small|\n\nadd_textbox|And for those who missed PAW, we made a special video sneak peek from the latest PAW fashion show, check it out on our official YouTube channel! Yay!|left|\n\nadd_spacer|small|\n\nadd_url_button|comment|`wPAW 2018 Fashion Show``|noflags|https://www.youtube.com/watch?v=5i0IcqwD3MI&feature=youtu.be|Open the Growtopia YouTube channel for videos and tutorials?|0|0|\n\nadd_spacer|small|\n\nadd_textbox|Lastly, check out other September updates:|left|\n\nadd_spacer|small|\n\nadd_label_with_icon|small|IOTM: The Sorcerer's Tunic of Mystery|left|24|\n\nadd_label_with_icon|small|New Legendary Summer Clash Branch|left|24|\n\nadd_spacer|small|\n\nadd_textbox|`$- The Growtopia Team``|left|\n\nadd_spacer|small|\n\nadd_spacer|small|\n\n\n\n\n\nadd_url_button|comment|`wOfficial YouTube Channel``|noflags|https://www.youtube.com/c/GrowtopiaOfficial|Open the Growtopia YouTube channel for videos and tutorials?|0|0|\n\nadd_url_button|comment|`wSeptember's IOTM: `8Sorcerer's Tunic of Mystery!````|noflags|https://www.growtopiagame.com/forums/showthread.php?450065-Item-of-the-Month&p=3392991&viewfull=1#post3392991|Open the Growtopia website to see item of the month info?|0|0|\n\nadd_spacer|small|\n\nadd_label_with_icon|small|`4WARNING:`` `5Drop games/trust tests`` and betting games (like `5Casinos``) are not allowed and will result in a ban!|left|24|\n\nadd_label_with_icon|small|`4WARNING:`` Using any kind of `5hacked client``, `5spamming/text pasting``, or `5bots`` (even with an alt) will likely result in losing `5ALL`` your accounts. Seriously.|left|24|\n\nadd_label_with_icon|small|`4WARNING:`` `5NEVER enter your GT password on a website (fake moderator apps, free gemz, etc) - it doesn't work and you'll lose all your stuff!|left|24|\n\nadd_spacer|small|\n\nadd_url_button|comment|`wGrowtopia on Facebook``|noflags|http://growtopiagame.com/facebook|Open the Growtopia Facebook page in your browser?|0|0|\n\nadd_spacer|small|\n\nadd_button|rules|`wHelp - Rules - Privacy Policy``|noflags|0|0|\n\n\nadd_quick_exit|\n\nadd_spacer|small|\nadd_url_button|comment|`wVisit Growtopia Forums``|noflags|http://www.growtopiagame.com/forums|Visit the Growtopia forums?|0|0|\nadd_spacer|small|\nadd_url_button||`wWOTD: `1THELOSTGOLD`` by `#iWasToD````|NOFLAGS|OPENWORLD|THELOSTGOLD|0|0|\nadd_spacer|small|\nadd_url_button||`wVOTW: `1Yodeling Kid - Growtopia Animation``|NOFLAGS|https://www.youtube.com/watch?v=UMoGmnFvc58|Watch 'Yodeling Kid - Growtopia Animation' by HyerS on YouTube?|0|0|\nend_dialog|gazette||OK|"));

											}
										}
										if (strcmp(GetTextPointerFromPacket(event.packet), "action|refresh_item_data\n") == 0)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Connecting.. `w[`1Version: `32.999 `w- `9Luc1Fer#1234`w]``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											if (itemsDat != NULL) {
												ENetPacket* packet = enet_packet_create(itemsDat,
													itemsDatSize + 60,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												((PlayerInfo*)(peer->data))->isUpdating = true;
												enet_peer_disconnect_later(peer, 0);
												//enet_host_flush(server);
											}
											// TODO FIX refresh_item_data ^^^^^^^^^^^^^^
										}
										break;
									}
									default:
										cout << "Unknown packet type " << messageType << endl;
										break;
									case 3:
									{
										//cout << GetTextPointerFromPacket(event.packet) << endl;
										std::stringstream ss(GetTextPointerFromPacket(event.packet));
										std::string to;
										bool isJoinReq = false;
										while (std::getline(ss, to, '\n')) {
											string id = to.substr(0, to.find("|"));
											string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
											if (id == "name" && isJoinReq)
											{
#ifdef TOTAL_LOG
												cout << "Entering some world..." << endl;
#endif
												try {
													toUpperCase(act);
													if (act == "CON" || act == "NUL" || act == "PRN" || act == "AUX" || act == "CLOCK$" || act == "COM0" || act == "COM1" || act == "COM2" || act == "COM3" || act == "COM4" || act == "COM5" || act == "COM6" || act == "COM7" || act == "COM8" || act == "COM9" || act == "LPT0" || act == "LPT1" || act == "LPT2" || act == "LPT3" || act == "LPT4" || act == "LPT5" || act == "LPT6" || act == "LPT7" || act == "LPT8" || act == "LPT9")
													{
														enet_peer_disconnect_now(peer, 0);
													}
													else
													{
														if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
															if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
																((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(event.peer->data))->tankIDName + " of Legend";
															}
														}
														WorldInfo info = worldDB.get(act);
														WorldInfo info2 = worldDB.get("HELL");
														WorldInfo info3 = worldDB.get("START");
														bool existsban = std::experimental::filesystem::exists("worldbans/" + info.name + "/" + ((PlayerInfo*)(peer->data))->rawName);
														if (existsban)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Oh no! ``You've been banned from that world by its owner! Try again later after ban wears off."));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;

															GamePacket p3 = packetEnd(appendString(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1), "Sorry"));
															ENetPacket* packet3 = enet_packet_create(p3.data,
																p3.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet3);
															delete p3.data;

															continue;
															break;
														}




														if (((PlayerInfo*)(peer->data))->isCursed == true)
														{
															((PlayerInfo*)(peer->data))->currentWorld = "HELL";
															sendWorldCursed(peer, &info2);
															ofstream myfile;

															std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string content((std::istreambuf_iterator<char>(ifs)),
																(std::istreambuf_iterator<char>()));


															ofstream myfilet;
															myfilet.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfilet << content;
															myfilet.close();

															int gembuxc = std::atoi(content.c_str());
															GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gembuxc));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packet);
															delete p.data;

															((PlayerInfo*)(peer->data))->isInWorld = true;




															int x = 3040;
															int y = 736;


															for (int j = 0; j < info2.width * info2.height; j++)
															{
																if (info2.items[j].foreground == 6) {
																	x = (j % info2.width) * 32;
																	y = (j / info2.width) * 32;
																}
															}

															if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) >= 666) {
																if (((PlayerInfo*)(peer->data))->isinv == true)
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|1\nsmstate|0\ntype|local\n"));
																	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	//enet_host_flush(server);
																	delete p.data;
																	((PlayerInfo*)(event.peer->data))->netID = cId;
																	onPeerConnect(peer);
																	cId++;
																}
																else
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|1\nsmstate|0\ntype|local\n"));
																	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	//enet_host_flush(server);
																	delete p.data;
																	((PlayerInfo*)(event.peer->data))->netID = cId;
																	onPeerConnect(peer);
																	cId++;

																}

																int count = 0;
																ENetPeer* currentPeer;
																string name = "";
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	count++;
																}


																int countx = 0;
																//ENetPeer * currentPeer;
																string namex = "";
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	countx++;
																}


																int otherpeople = 0;

																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer))
																		otherpeople++;
																}
																int otherpeoples = otherpeople - 1;
																string ownerworld = info.owner;
																string nameworld = info.name;
																GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
																ENetPacket* packet4 = enet_packet_create(p4.data,
																	p4.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet4);
																delete p4.data;
																GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"), 0));
																ENetPacket* packet2 = enet_packet_create(p2.data,
																	p2.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet2);
																delete p2.data;
																string text = "action|play_sfx\nfile|audio/door_open.wav\ndelayMS|0\n";
																BYTE* data = new BYTE[5 + text.length()];
																BYTE zero = 0;
																int type = 3;
																memcpy(data, &type, 4);
																memcpy(data + 4, text.c_str(), text.length());
																memcpy(data + 4 + text.length(), &zero, 1);
																ENetPacket* packet7 = enet_packet_create(data,
																	5 + text.length(),
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet7);
																GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"));
																ENetPacket* packet6 = enet_packet_create(p6.data,
																	p6.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet6);
																delete p6.data;
																if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
																	if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
																		((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
																	}
																}
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer))
																		if (((PlayerInfo*)(peer->data))->isinv == false)
																		{
																			enet_peer_send(currentPeer, 0, packet2);
																		}
																	enet_peer_send(currentPeer, 0, packet7);

																}
																if (ownerworld != "") {
																	GamePacket p3x = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
																	ENetPacket* packet3x = enet_packet_create(p3x.data,
																		p3x.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet3x);
																	delete p3x.data;
																	if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
																		if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
																			((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(event.peer->data))->tankIDName + " of Legend";
																		}
																	}
																}



															}

															else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
															{
																if (((PlayerInfo*)(peer->data))->isinv == true)
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|1\ntype|local\n"));
																	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	//enet_host_flush(server);
																	delete p.data;
																	((PlayerInfo*)(event.peer->data))->netID = cId;
																	onPeerConnect(peer);
																	cId++;
																}
																else
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|1\ntype|local\n"));
																	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	//enet_host_flush(server);
																	delete p.data;
																	((PlayerInfo*)(event.peer->data))->netID = cId;
																	onPeerConnect(peer);
																	cId++;
																}

															}
															else
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
																//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																//enet_host_flush(server);
																delete p.data;
																((PlayerInfo*)(event.peer->data))->netID = cId;
																onPeerConnect(peer);
																cId++;
															}


															if (((PlayerInfo*)(peer->data))->haveGrowId == false)
															{
															}
														}
														else
														{
															if (((PlayerInfo*)(peer->data))->haveGrowId == false && ((PlayerInfo*)(peer->data))->haveGuestId == false)
															{
																sendWorld(peer, &info);

																string cworld = act;
																std::transform(cworld.begin(), cworld.end(), cworld.begin(), ::toupper);

																((PlayerInfo*)(peer->data))->currentWorld = cworld;


																((PlayerInfo*)(peer->data))->isInWorld = true;


															}
															else
															{


																if (act.length() < 16) {

																	if (info.nuked)
																	{
																		if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) < 334)
																		{


																			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wThis world is inaccessible.``"));
																			ENetPacket* packet = enet_packet_create(p.data,
																				p.len,
																				ENET_PACKET_FLAG_RELIABLE);
																			enet_peer_send(peer, 0, packet);
																			delete p.data;

																			GamePacket p3 = packetEnd(appendString(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1), "Sorry"));
																			ENetPacket* packet3 = enet_packet_create(p3.data,
																				p3.len,
																				ENET_PACKET_FLAG_RELIABLE);
																			enet_peer_send(peer, 0, packet3);
																			delete p3.data;

																		}

																		else
																		{
																			{
																				std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
																				std::string content((std::istreambuf_iterator<char>(ifs)),
																					(std::istreambuf_iterator<char>()));

																				sendWorld(peer, &info);

																				string cworld = act;
																				std::transform(cworld.begin(), cworld.end(), cworld.begin(), ::toupper);

																				((PlayerInfo*)(peer->data))->currentWorld = cworld;



																				ofstream myfile;
																				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
																				myfile << content;
																				myfile.close();
																				int gembux = std::atoi(content.c_str());
																				GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gembux));
																				ENetPacket* packet = enet_packet_create(p.data,
																					p.len,
																					ENET_PACKET_FLAG_RELIABLE);

																				enet_peer_send(peer, 0, packet);
																				delete p.data;


																				((PlayerInfo*)(peer->data))->isInWorld = true;

																				int x = 3040;
																				int y = 736;


																				for (int j = 0; j < info.width * info.height; j++)
																				{
																					if (info.items[j].foreground == 6) {
																						x = (j % info.width) * 32;
																						y = (j / info.width) * 32;
																					}
																				}

																				if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
																					if (((PlayerInfo*)(peer->data))->isinv == true)
																					{
																						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|1\nsmstate|0\ntype|local\n"));
																						//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																						ENetPacket* packet = enet_packet_create(p.data,
																							p.len,
																							ENET_PACKET_FLAG_RELIABLE);
																						enet_peer_send(peer, 0, packet);
																						//enet_host_flush(server);
																						delete p.data;
																						((PlayerInfo*)(event.peer->data))->netID = cId;
																						onPeerConnect(peer);
																						cId++;


																					}
																					else
																					{
																						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|1\nsmstate|0\ntype|local\n"));
																						//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																						ENetPacket* packet = enet_packet_create(p.data,
																							p.len,
																							ENET_PACKET_FLAG_RELIABLE);
																						enet_peer_send(peer, 0, packet);
																						//enet_host_flush(server);
																						delete p.data;
																						((PlayerInfo*)(event.peer->data))->netID = cId;
																						onPeerConnect(peer);
																						cId++;


																					}
																				}

																				else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
																				{
																					if (((PlayerInfo*)(peer->data))->isinv == true)
																					{
																						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|1\ntype|local\n"));
																						//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																						ENetPacket* packet = enet_packet_create(p.data,
																							p.len,
																							ENET_PACKET_FLAG_RELIABLE);
																						enet_peer_send(peer, 0, packet);
																						//enet_host_flush(server);
																						delete p.data;
																						((PlayerInfo*)(event.peer->data))->netID = cId;
																						onPeerConnect(peer);
																						cId++;


																					}
																					else
																					{
																						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|1\ntype|local\n"));
																						//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																						ENetPacket* packet = enet_packet_create(p.data,
																							p.len,
																							ENET_PACKET_FLAG_RELIABLE);
																						enet_peer_send(peer, 0, packet);
																						//enet_host_flush(server);
																						delete p.data;
																						((PlayerInfo*)(event.peer->data))->netID = cId;
																						onPeerConnect(peer);
																						cId++;


																					}

																				}
																				else
																				{
																					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
																					//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																					ENetPacket* packet = enet_packet_create(p.data,
																						p.len,
																						ENET_PACKET_FLAG_RELIABLE);
																					enet_peer_send(peer, 0, packet);
																					//enet_host_flush(server);
																					delete p.data;
																					((PlayerInfo*)(event.peer->data))->netID = cId;
																					onPeerConnect(peer);
																					cId++;


																				}


																				if (((PlayerInfo*)(peer->data))->haveGrowId == false)
																				{
																				}

																				int countx = 0;
																				ENetPeer* currentPeer;
																				string namex = "";
																				for (currentPeer = server->peers;
																					currentPeer < &server->peers[server->peerCount];
																					++currentPeer)
																				{
																					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																						continue;
																					countx++;
																				}


																				int otherpeople = 0;

																				for (currentPeer = server->peers;
																					currentPeer < &server->peers[server->peerCount];
																					++currentPeer)
																				{
																					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																						continue;
																					if (isHere(peer, currentPeer))
																						otherpeople++;
																				}
																				int otherpeoples = otherpeople - 1;
																				string ownerworld = info.owner;
																				string nameworld = info.name;

																				GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
																				ENetPacket* packet4 = enet_packet_create(p4.data,
																					p4.len,
																					ENET_PACKET_FLAG_RELIABLE);
																				enet_peer_send(peer, 0, packet4);
																				delete p4.data;
																				GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"), 0));
																				ENetPacket* packet2 = enet_packet_create(p2.data,
																					p2.len,
																					ENET_PACKET_FLAG_RELIABLE);
																				enet_peer_send(peer, 0, packet2);
																				delete p2.data;
																				string text = "action|play_sfx\nfile|audio/door_open.wav\ndelayMS|0\n";
																				BYTE* data = new BYTE[5 + text.length()];
																				BYTE zero = 0;
																				int type = 3;
																				memcpy(data, &type, 4);
																				memcpy(data + 4, text.c_str(), text.length());
																				memcpy(data + 4 + text.length(), &zero, 1);
																				ENetPacket* packet7 = enet_packet_create(data,
																					5 + text.length(),
																					ENET_PACKET_FLAG_RELIABLE);
																				enet_peer_send(peer, 0, packet7);
																				GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"));
																				ENetPacket* packet6 = enet_packet_create(p6.data,
																					p6.len,
																					ENET_PACKET_FLAG_RELIABLE);
																				enet_peer_send(peer, 0, packet6);
																				delete p6.data;
																				if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
																					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
																						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
																					}
																				}
																				for (currentPeer = server->peers;
																					currentPeer < &server->peers[server->peerCount];
																					++currentPeer)
																				{
																					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																						continue;
																					if (isHere(peer, currentPeer))
																						if (((PlayerInfo*)(peer->data))->isinv == false)
																						{
																							enet_peer_send(currentPeer, 0, packet2);
																						}
																					enet_peer_send(currentPeer, 0, packet7);

																				}
																				if (ownerworld != "") {
																					GamePacket p3x = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
																					ENetPacket* packet3x = enet_packet_create(p3x.data,
																						p3x.len,
																						ENET_PACKET_FLAG_RELIABLE);
																					enet_peer_send(peer, 0, packet3x);
																					delete p3x.data;
																					if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
																						if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
																							((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(event.peer->data))->tankIDName + " of Legend";
																						}
																					}
																				}
																			}
																		}

																	}


																	else
																	{
																		std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
																		std::string content((std::istreambuf_iterator<char>(ifs)),
																			(std::istreambuf_iterator<char>()));

																		sendWorld(peer, &info);

																		string cworld = act;
																		std::transform(cworld.begin(), cworld.end(), cworld.begin(), ::toupper);

																		((PlayerInfo*)(peer->data))->currentWorld = cworld;



																		ofstream myfile;
																		myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
																		myfile << content;
																		myfile.close();
																		int gembux = std::atoi(content.c_str());
																		GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gembux));
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);

																		enet_peer_send(peer, 0, packet);
																		delete p.data;


																		((PlayerInfo*)(peer->data))->isInWorld = true;

																		int x = 3040;
																		int y = 736;


																		for (int j = 0; j < info.width * info.height; j++)
																		{
																			if (info.items[j].foreground == 6) {
																				x = (j % info.width) * 32;
																				y = (j / info.width) * 32;
																			}
																		}

																		if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 666) {
																			if (((PlayerInfo*)(peer->data))->isinv == true)
																			{
																				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|1\nsmstate|0\ntype|local\n"));
																				//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																				ENetPacket* packet = enet_packet_create(p.data,
																					p.len,
																					ENET_PACKET_FLAG_RELIABLE);
																				enet_peer_send(peer, 0, packet);
																				//enet_host_flush(server);
																				delete p.data;
																				((PlayerInfo*)(event.peer->data))->netID = cId;
																				onPeerConnect(peer);
																				cId++;
																			}
																			else
																			{
																				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|1\nsmstate|0\ntype|local\n"));
																				//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																				ENetPacket* packet = enet_packet_create(p.data,
																					p.len,
																					ENET_PACKET_FLAG_RELIABLE);
																				enet_peer_send(peer, 0, packet);
																				//enet_host_flush(server);
																				delete p.data;
																				((PlayerInfo*)(event.peer->data))->netID = cId;
																				onPeerConnect(peer);
																				cId++;
																			}
																		}
																		else if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 999)
																		{
																			if (((PlayerInfo*)(peer->data))->isinv == true)
																			{
																				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|1\ntype|local\n"));
																				//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																				ENetPacket* packet = enet_packet_create(p.data,
																					p.len,
																					ENET_PACKET_FLAG_RELIABLE);
																				enet_peer_send(peer, 0, packet);
																				//enet_host_flush(server);
																				delete p.data;
																				((PlayerInfo*)(event.peer->data))->netID = cId;
																				onPeerConnect(peer);
																				cId++;
																			}
																			else
																			{
																				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|1\ntype|local\n"));
																				//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																				ENetPacket* packet = enet_packet_create(p.data,
																					p.len,
																					ENET_PACKET_FLAG_RELIABLE);
																				enet_peer_send(peer, 0, packet);
																				//enet_host_flush(server);
																				delete p.data;
																				((PlayerInfo*)(event.peer->data))->netID = cId;
																				onPeerConnect(peer);
																				cId++;
																			}

																		}
																		else
																		{
																			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
																			//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																			ENetPacket* packet = enet_packet_create(p.data,
																				p.len,
																				ENET_PACKET_FLAG_RELIABLE);
																			enet_peer_send(peer, 0, packet);
																			//enet_host_flush(server);
																			delete p.data;
																			((PlayerInfo*)(event.peer->data))->netID = cId;
																			onPeerConnect(peer);
																			cId++;
																		}


																		if (((PlayerInfo*)(peer->data))->haveGrowId == false)
																		{
																		}

																		int countx = 0;
																		ENetPeer* currentPeer;
																		string namex = "";
																		for (currentPeer = server->peers;
																			currentPeer < &server->peers[server->peerCount];
																			++currentPeer)
																		{
																			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																				continue;
																			countx++;
																		}


																		int otherpeople = 0;

																		for (currentPeer = server->peers;
																			currentPeer < &server->peers[server->peerCount];
																			++currentPeer)
																		{
																			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																				continue;
																			if (isHere(peer, currentPeer))
																				otherpeople++;
																		}
																		int otherpeoples = otherpeople - 1;
																		string ownerworld = info.Displayowner;
																		string nameworld = info.name;

																		GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
																		ENetPacket* packet4 = enet_packet_create(p4.data,
																			p4.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet4);
																		delete p4.data;
																		GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"), 0));
																		ENetPacket* packet2 = enet_packet_create(p2.data,
																			p2.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet2);
																		delete p2.data;
																		string text = "action|play_sfx\nfile|audio/door_open.wav\ndelayMS|0\n";
																		BYTE* data = new BYTE[5 + text.length()];
																		BYTE zero = 0;
																		int type = 3;
																		memcpy(data, &type, 4);
																		memcpy(data + 4, text.c_str(), text.length());
																		memcpy(data + 4 + text.length(), &zero, 1);
																		ENetPacket* packet7 = enet_packet_create(data,
																			5 + text.length(),
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet7);
																		GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"));
																		ENetPacket* packet6 = enet_packet_create(p6.data,
																			p6.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet6);
																		delete p6.data;
																		if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
																			if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
																				((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
																			}
																		}
																		for (currentPeer = server->peers;
																			currentPeer < &server->peers[server->peerCount];
																			++currentPeer)
																		{
																			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																				continue;
																			if (isHere(peer, currentPeer))
																				if (((PlayerInfo*)(peer->data))->isinv == false)
																				{
																					enet_peer_send(currentPeer, 0, packet2);
																				}
																			enet_peer_send(currentPeer, 0, packet7);

																		}
																		if (ownerworld != "") {
																			GamePacket p3x = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
																			ENetPacket* packet3x = enet_packet_create(p3x.data,
																				p3x.len,
																				ENET_PACKET_FLAG_RELIABLE);
																			enet_peer_send(peer, 0, packet3x);
																			delete p3x.data;
																			if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 0) {
																				if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
																					((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(event.peer->data))->tankIDName + " of Legend";
																				}
																			}
																		}


																	}


																}
																else
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld name cannot be longer than 15 characters."));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;
																	enet_peer_disconnect_now(peer, 0);


																	GamePacket p3 = packetEnd(appendString(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1), "Sorry"));
																	ENetPacket* packet3 = enet_packet_create(p3.data,
																		p3.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet3);
																	delete p3.data;


																	continue;
																	//enet_peer_disconnect_later(peer, 0);
																}

															}


														}

														sendState(peer); //here
														sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);





														if (info.allowMod == false && ((PlayerInfo*)(peer->data))->ghostalr == false && info.owner != ((PlayerInfo*)(peer->data))->rawName)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oNoclipping `wis disabled in here!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;

															((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
															((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;

															sendClothes(peer);
															sendState(peer); //here
														}
														else
														{
															if (((PlayerInfo*)(peer->data))->isModState == true || ((PlayerInfo*)(peer->data))->ghostalr == true)
															{
																((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
																((PlayerInfo*)(peer->data))->canDoubleJump = true; //here


																//sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->puncheffect);
																//sendState(peer); //here

															}
														}
														if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 0) {
															((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
															((PlayerInfo*)(peer->data))->isShining = true;
														}
														if (((PlayerInfo*)(peer->data))->level > 100)
														{
															((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
															((PlayerInfo*)(peer->data))->isShining = true;
														}
														if (((PlayerInfo*)(peer->data))->boughtLGK == true)
														{
															((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
															((PlayerInfo*)(peer->data))->isShining = true;
														}
														if (info.weather != 0) {
															GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBaseWeather"), info.weather));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);


															enet_peer_send(peer, 0, packet2);
															delete p2.data;
														}


														/*int resx = 95;
														int resy = 23;*/


														/*for (int i = 0; i < world.width*world.height; i++)
														{
														if (world.items[i].foreground == 6) {
														resx = i%world.width;
														resy = i / world.width;
														}
														}


														GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "SetRespawnPos"), resx + (world.width*resy)));
														memcpy(p2.data + 8, &(((PlayerInfo*)(event.peer->data))->netID), 4);
														ENetPacket * packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														enet_host_flush(server);*/

														sendState(peer); //here
														sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
													}
												}
												catch (int e) {
													if (e == 1) {
														((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have exited the world."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														//enet_host_flush(server);
													}
													else if (e == 2) {

														GamePacket pj = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(((PlayerInfo*)(event.peer->data))->netID) + "\n"));
														ENetPacket* packetj = enet_packet_create(pj.data,
															pj.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packetj);

														((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
														sendWorldOffers(peer);

														GamePacket p3 = packetEnd(appendString(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1), "Sorry"));
														ENetPacket* packet3 = enet_packet_create(p3.data,
															p3.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet3);
														delete p3.data;

														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have entered bad characters in the world name!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														//enet_host_flush(server);
													}
													else if (e == 3) {
														((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Exit from what? Click back if you're done playing."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														//enet_host_flush(server);
													}
													else {
														((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "I know this menu is magical and all, but it has its limitations! You can't visit this world!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														//enet_host_flush(server);
													}
												}
											}

											if (id == "action")
											{
												if (act == "join_request")
												{
													isJoinReq = true;
												}
												if (act == "quit_to_exit")
												{

													if (((PlayerInfo*)(peer->data))->haveGrowId == false)
													{
														GamePacket p2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), ""), "You must complete the tutorial first!"), ""), 0));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														ENetPeer* currentPeer;
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															enet_peer_send(currentPeer, 0, packet2);
														}

														//enet_host_flush(server);
														delete p2.data;
														sendPlayerToWorld(peer, (PlayerInfo*)(peer->data), "START");
													}

													else if (((PlayerInfo*)(event.peer->data))->canExit)
													{




														string online = "";
														int total = 0;
														ENetPeer* currentPeer;

														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) >= 0) {
																total++;
															}
														}
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Where would you like to go? (`w" + to_string(total) + " `oonline)"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;

														sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
														sendWorldOffers(peer);


														((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
													}
												}



												if (act == "quit")
												{
													enet_peer_disconnect_later(peer, 0);
												}
											}
										}
										break;
									}
									case 4:
									{
										{
											BYTE* tankUpdatePacket = GetStructPointerFromTankPacket(event.packet);

											if (tankUpdatePacket)
											{
												PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket);

												if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT")
												{

													continue;

												}
												//string cchzzz = GetTextPointerFromPacket(event.packet);



												((PlayerInfo*)(event.peer->data))->posX = (int)pMov->x;
												((PlayerInfo*)(event.peer->data))->posY = (int)pMov->y;

												int posX = ((PlayerInfo*)(event.peer->data))->posX / 32;
												int posY = ((PlayerInfo*)(event.peer->data))->posY / 32;



												if (world->items[posX + (posY * world->width)].foreground == 20 || world->items[posX + (posY * world->width)].foreground == 24 || world->items[posX + (posY * world->width)].foreground == 26 || world->items[posX + (posY * world->width)].foreground == 28 || world->items[posX + (posY * world->width)].foreground == 608 || world->items[posX + (posY * world->width)].foreground == 780 || world->items[posX + (posY * world->width)].foreground == 986 || world->items[posX + (posY * world->width)].foreground == 1426 || world->items[posX + (posY * world->width)].foreground == 1428 || world->items[posX + (posY * world->width)].foreground == 1430 || world->items[posX + (posY * world->width)].foreground == 1432 || world->items[posX + (posY * world->width)].foreground == 1446 || world->items[posX + (posY * world->width)].foreground == 780 || world->items[posX + (posY * world->width)].foreground == 1906 || world->items[posX + (posY * world->width)].foreground == 2396 || world->items[posX + (posY * world->width)].foreground == 2414 || world->items[posX + (posY * world->width)].foreground == 2586 || world->items[posX + (posY * world->width)].foreground == 2948 || world->items[posX + (posY * world->width)].foreground == 3758 || world->items[posX + (posY * world->width)].foreground == 4470 || world->items[posX + (posY * world->width)].foreground == 4488 || world->items[posX + (posY * world->width)].foreground == 5622 || world->items[posX + (posY * world->width)].foreground == 6102 || world->items[posX + (posY * world->width)].foreground == 6272)
												{
													((PlayerInfo*)(event.peer->data))->SignPosX = (int)pMov->x;
													((PlayerInfo*)(event.peer->data))->SignPosY = (int)pMov->y;
													int yy = ((PlayerInfo*)(event.peer->data))->SignPosX / 32;
													int xx = ((PlayerInfo*)(event.peer->data))->SignPosY / 32;
													string world = ((PlayerInfo*)(peer->data))->currentWorld;
													string posx = std::to_string(yy);
													string posy = std::to_string(xx);
													bool exist = std::experimental::filesystem::exists("signs/" + world + posx + posy + ".txt");

													if (exist)
													{
														std::ifstream ifs("signs/" + world + posx + posy + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifs)),
															(std::istreambuf_iterator<char>()));
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), content));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else
													{
													}
												}
											}
											if (tankUpdatePacket)
											{
												PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket);

												if (((PlayerInfo*)(event.peer->data))->isInWorld)
												{



													((PlayerInfo*)(event.peer->data))->posXY = (int)pMov->x + (int)pMov->y;
													sendPuncheffect(peer, ((PlayerInfo*)(event.peer->data))->effect);
													//((PlayerInfo*)(peer->data))->canDoubleJump = true; //here
													//sendState(peer); //here


												}
												switch (pMov->packetType)
												{
												case 0:

													((PlayerInfo*)(event.peer->data))->x = pMov->x;
													((PlayerInfo*)(event.peer->data))->y = pMov->y;
													((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10;
													sendPData(peer, pMov);



													if (!((PlayerInfo*)(peer->data))->joinClothesUpdated)
													{
														((PlayerInfo*)(peer->data))->joinClothesUpdated = true;
														updateAllClothes(peer);
														updateInvis(peer);
														sendState(peer); //here
														sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);

														if (((PlayerInfo*)(peer->data))->ghostalr)
														{
															((PlayerInfo*)(peer->data))->canDoubleJump = true; //here

															sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
														}


														//sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
														/*GamePacket p222 = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), ((PlayerInfo*)(peer->data))->gem));
														ENetPacket * packet222 = enet_packet_create(p222.data,
															p222.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet222);*/



														if (((PlayerInfo*)(peer->data))->isinv == 1) {
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^You are in invisibility mode, no one can see you!``"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

														}
													}


													break;

												default:
													break;
												}
												switch (pMov->packetType)
												{
												case 0:
													((PlayerInfo*)(event.peer->data))->x = pMov->x;
													((PlayerInfo*)(event.peer->data))->y = pMov->y;
													((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10;
													sendPData(peer, pMov);
													if (!((PlayerInfo*)(peer->data))->joinClothesUpdated)
													{
														((PlayerInfo*)(peer->data))->joinClothesUpdated = true;
														updateAllClothes(peer);


													}

													break;


												default:
													break;
												}

												PlayerMoving* data2 = unpackPlayerMoving(tankUpdatePacket);
												if (data2->packetType == 11)
												{
													//cout << pMov->x << ";" << pMov->y << ";" << pMov->plantingTree << ";" << pMov->punchX << endl;
													//sendDrop(((PlayerInfo*)(event.peer->data))->netID, ((PlayerInfo*)(event.peer->data))->x, ((PlayerInfo*)(event.peer->data))->y, pMov->punchX, 1, 0);
													// lets take item
													//cout << "item was tried to be taken!";
													sendTake(peer, ((PlayerInfo*)(event.peer->data))->netID, ((PlayerInfo*)(event.peer->data))->x, ((PlayerInfo*)(event.peer->data))->y, data2->plantingTree);

												}
												if (data2->packetType == 7)
												{
													if (((PlayerInfo*)(peer->data))->haveGrowId == false)
													{
														GamePacket p2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), ""), "You must complete the tutorial first!"), ""), 0));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														ENetPeer* currentPeer;
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															enet_peer_send(currentPeer, 0, packet2);
															//enet_host_flush(server);
															delete p2.data;
															sendPlayerToWorld(peer, (PlayerInfo*)(peer->data), "START");
														}
													}
													else {
														sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
														sendWorldOffers(peer);
													}
												}

												if (data2->packetType == 10)
												{
													//cout << pMov->x << ";" << pMov->y << ";" << pMov->plantingTree << ";" << pMov->punchX << ";" << pMov->punchY << ";" << pMov->characterState << endl;
													ItemDefinition def;
													try {
														def = getItemDef(pMov->plantingTree);
													}
													catch (int e) {
														goto END_CLOTHSETTER_FORCE;
													}
													switch (def.clothType) {
													case 0:
														if (pMov->plantingTree == 4626) {
															if (((PlayerInfo*)(event.peer->data))->boughtTXMOM == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 3462) {
															if (((PlayerInfo*)(event.peer->data))->boughtBRAIN == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 1466) {
															if (((PlayerInfo*)(event.peer->data))->boughtGNECK == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 1464) {
															if (((PlayerInfo*)(event.peer->data))->boughtGBOW == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 1462) {
															if (((PlayerInfo*)(event.peer->data))->boughtGDIAPER == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 1460) {
															if (((PlayerInfo*)(event.peer->data))->boughtGANGEL == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 1822) {
															if (((PlayerInfo*)(event.peer->data))->boughtGROB == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 2392) {
															if (((PlayerInfo*)(event.peer->data))->boughtGTANGEL == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 2394) {
														    if (((PlayerInfo*)(event.peer->data))->boughtGBUG == false)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															delete p.data;


															break;
															//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
														    }
														}
														else if (pMov->plantingTree == 2386) {
														    if (((PlayerInfo*)(event.peer->data))->boughtHSCYTHE == false)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															delete p.data;


															break;
															//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
														    }
														}
														else if (pMov->plantingTree == 4414) {
														    if (((PlayerInfo*)(event.peer->data))->boughtGPEGASUS == false)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															delete p.data;


															break;
															//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
														    }
														}
														else if (pMov->plantingTree == 4420) {
														    if (((PlayerInfo*)(event.peer->data))->boughtGGLASS == false)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															delete p.data;

															break;
															//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
														    }
														}
														if (((PlayerInfo*)(event.peer->data))->cloth0 == pMov->plantingTree)
														{
															((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															break;
														}
														((PlayerInfo*)(event.peer->data))->cloth0 = pMov->plantingTree;
														break;
													case 1:
														if (pMov->plantingTree == 1780) {
															if (((PlayerInfo*)(event.peer->data))->boughtLGB == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYoua re piloting a legendary robot suit. (`oLegendary! mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(peer->data))->effect = 8421386;
																sendState(peer); //here
																sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															}
														}

														if (((PlayerInfo*)(event.peer->data))->cloth1 == pMov->plantingTree)
														{
															((PlayerInfo*)(peer->data))->effect = 8421376;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															((PlayerInfo*)(event.peer->data))->cloth1 = 0;
															break;
														}
														((PlayerInfo*)(event.peer->data))->cloth1 = pMov->plantingTree;
														if (pMov->plantingTree = 1780) {
															((PlayerInfo*)(peer->data))->effect = -1004;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														break;
													case 2:



														if (((PlayerInfo*)(event.peer->data))->cloth2 == pMov->plantingTree)
														{
															((PlayerInfo*)(event.peer->data))->cloth2 = 0;
															break;
														}
														((PlayerInfo*)(event.peer->data))->cloth2 = pMov->plantingTree;
														break;
													case 3:



														if (((PlayerInfo*)(event.peer->data))->cloth3 == pMov->plantingTree)
														{
															((PlayerInfo*)(event.peer->data))->cloth3 = 0;
															break;
														}
														if (pMov->plantingTree == 8834) {
															if (((PlayerInfo*)(event.peer->data))->boughtTK == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														((PlayerInfo*)(event.peer->data))->cloth3 = pMov->plantingTree;
														break;
													case 4:




														if (((PlayerInfo*)(event.peer->data))->cloth4 == pMov->plantingTree)
														{
															((PlayerInfo*)(peer->data))->effect = 8421376;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															((PlayerInfo*)(event.peer->data))->cloth4 = 0;
															break;
														}
														if (pMov->plantingTree == 1204) {
															if (((PlayerInfo*)(event.peer->data))->boughtCWD == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oGive people the evil eye. (`oFocused eyes mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(peer->data))->effect = 8421386;
																sendState(peer); //here
																sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															}
														}
														((PlayerInfo*)(event.peer->data))->cloth4 = pMov->plantingTree;
														break;
													case 5:

														if (pMov->plantingTree == 2592) {
															if (((PlayerInfo*)(event.peer->data))->boughtLGK == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oNone can stand against you! (`oLegendary Swordsmaster mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(peer->data))->effect = 8421399;
																sendState(peer); //here
																sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															}
														}
														else if (pMov->plantingTree == 1742) {
															if (((PlayerInfo*)(event.peer->data))->boughtCDG == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 2952) {
															if (((PlayerInfo*)(event.peer->data))->boughtSPD == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 5480) {
															if (((PlayerInfo*)(event.peer->data))->boughtRAY == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWho needs arms when you have these? (`oRayman fist! mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(peer->data))->effect = 8421456;
																sendState(peer); //here
																sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															}
														}
														else if (pMov->plantingTree == 1782) {
															if (((PlayerInfo*)(event.peer->data))->boughtLGD == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou should be very very nice to your pet. (`oLegendary! mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(peer->data))->effect = 8421397;
																sendState(peer); //here
																sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															}
														}
														else if (pMov->plantingTree == 1868) {
															if (((PlayerInfo*)(event.peer->data))->boughtVIOLET == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou command a mighty (violent) dragon! (`oDrakeborn mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(peer->data))->effect = 8421399;
																sendState(peer); //here
																sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															}
														}
														else if (pMov->plantingTree == 1804) {
															if (((PlayerInfo*)(event.peer->data))->boughtZEUS == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou electrocute things. (`oFistful Of Thunder mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(peer->data))->effect = 8421398;
																sendState(peer); //here
																sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															}
														}
														else if (pMov->plantingTree == 7912) {
															if (((PlayerInfo*)(event.peer->data))->boughtWAR == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																((PlayerInfo*)(peer->data))->effect = 111;
																sendState(peer); //here
																sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															}
														}
														else if (pMov->plantingTree == 6026) {
															if (((PlayerInfo*)(event.peer->data))->boughtLWHIP == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oThe truth is yours! (`oWhip of Truth mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(peer->data))->effect = 8421452;
																sendState(peer); //here
																sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															}
														}
														else if (pMov->plantingTree == 2952) {
															if (((PlayerInfo*)(event.peer->data))->boughtRFS == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														else if (pMov->plantingTree == 1836) {
															if (((PlayerInfo*)(event.peer->data))->boughtFLASHAXE == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}
														if (((PlayerInfo*)(event.peer->data))->cloth5 == pMov->plantingTree)
														{
															((PlayerInfo*)(peer->data))->effect = 8421376;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
															((PlayerInfo*)(event.peer->data))->cloth5 = 0;
															break;
														}
														if (pMov->plantingTree == 1782) {
															((PlayerInfo*)(peer->data))->effect = 8424213;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 1804) {
															((PlayerInfo*)(peer->data))->effect = 8424214;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 1868) {
															((PlayerInfo*)(peer->data))->effect = 8424215;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 2572) {
															((PlayerInfo*)(peer->data))->effect = 8424234;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 2756) {
															((PlayerInfo*)(peer->data))->effect = 8424239;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 6026) {
															((PlayerInfo*)(peer->data))->effect = 8424268;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 2872) {
															((PlayerInfo*)(peer->data))->effect = 8424243;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 3066) {
															((PlayerInfo*)(peer->data))->effect = 8424249;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 2592) {
															((PlayerInfo*)(peer->data))->effect = 8424235;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 2476) {
															((PlayerInfo*)(peer->data))->effect = 8424231;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 1874) {
															((PlayerInfo*)(peer->data))->effect = 8424216;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 1204) {
															((PlayerInfo*)(peer->data))->effect = 8421386;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														else if (pMov->plantingTree == 1956) {
															((PlayerInfo*)(peer->data))->effect = -997;
															sendState(peer); //here
															sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
														}
														((PlayerInfo*)(event.peer->data))->cloth5 = pMov->plantingTree;
														break;
													case 6:

														if (pMov->plantingTree == 1784) {
															if (((PlayerInfo*)(event.peer->data))->boughtLGW == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
																sendState(peer); //here
															}
														}

														else if (pMov->plantingTree == 1674) {
															if (((PlayerInfo*)(event.peer->data))->boughtLGW == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
																sendState(peer); //here
															}
														}

														else if (pMov->plantingTree == 6334) {
															if (((PlayerInfo*)(event.peer->data))->boughtCHIMERA == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}

														else if (pMov->plantingTree == 1970) {
															if (((PlayerInfo*)(event.peer->data))->boughtNDEV == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
																sendState(peer); //here
															}
														}
														else if (pMov->plantingTree == 8286) {
															if (((PlayerInfo*)(event.peer->data))->boughtDAV == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
															else {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;
																((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
																sendState(peer); //here
															}
														}

														else if (pMov->plantingTree == 7734) {
															if (((PlayerInfo*)(event.peer->data))->boughtLKW == false)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item has to be `2purchased`o."));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;


																break;
																//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
															}
														}



														if (((PlayerInfo*)(event.peer->data))->cloth6 == pMov->plantingTree)
														{
															((PlayerInfo*)(event.peer->data))->cloth6 = 0;
															((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
															sendState(peer);
															break;
														}
														{
															((PlayerInfo*)(event.peer->data))->cloth6 = pMov->plantingTree;
															int item = pMov->plantingTree;
															if (item == 156 || item == 362 || item == 678 || item == 736 || item == 7734 || item == 7762 || item == 818 || item == 1206 || item == 1460 || item == 1550 || item == 1574 || item == 1668 || item == 1672 || item == 1674 || item == 1784 || item == 1824 || item == 1936 || item == 1938 || item == 1970 || item == 2254 || item == 2256 || item == 2258 || item == 2260 || item == 2262 || item == 2264 || item == 2390 || item == 2392 || item == 3120 || item == 3308 || item == 3512 || item == 4534 || item == 4986 || item == 5754 || item == 6144 || item == 6334 || item == 6694 || item == 6818 || item == 6842 || item == 1934 || item == 3134 || item == 6004 || item == 1780 || item == 2158 || item == 2160 || item == 2162 || item == 2164 || item == 2166 || item == 2168 || item == 2438 || item == 2538 || item == 2778 || item == 3858 || item == 350 || item == 998 || item == 1738 || item == 2642 || item == 2982 || item == 3104 || item == 3144 || item == 5738 || item == 3112 || item == 2722 || item == 3114 || item == 4970 || item == 4972 || item == 5020 || item == 6284 || item == 4184 || item == 4628 || item == 5322 || item == 4112 || item == 4114 || item == 3442 || item == 8286) {
																((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
															}
															else {
																((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
															}
															// ^^^^ wings
															sendState(peer);
														}
														break;

													case 7:


														if (((PlayerInfo*)(event.peer->data))->cloth7 == pMov->plantingTree)
														{
															((PlayerInfo*)(event.peer->data))->cloth7 = 0;
															break;
														}
														((PlayerInfo*)(event.peer->data))->cloth7 = pMov->plantingTree;
														break;
													case 8:




														if (((PlayerInfo*)(event.peer->data))->cloth8 == pMov->plantingTree)
														{
															((PlayerInfo*)(event.peer->data))->cloth8 = 0;
															break;
														}
														((PlayerInfo*)(event.peer->data))->cloth8 = pMov->plantingTree;
														break;
													default:
														if (
															def.id == 7166
															|| def.id == 5078 || def.id == 5080 || def.id == 5082 || def.id == 5084
															|| def.id == 5126 || def.id == 5128 || def.id == 5130 || def.id == 5132
															|| def.id == 5144 || def.id == 5146 || def.id == 5148 || def.id == 5150
															|| def.id == 5162 || def.id == 5164 || def.id == 5166 || def.id == 5168
															|| def.id == 5180 || def.id == 5182 || def.id == 5184 || def.id == 5186
															|| def.id == 7168 || def.id == 7170 || def.id == 7172 || def.id == 7174
															) {
															if (((PlayerInfo*)(event.peer->data))->boughtAAC == false) {
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item must be purchased!"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);

																	delete p.data;


																	break;
																	//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
																}
															}
															if (((PlayerInfo*)(event.peer->data))->cloth_ances == pMov->plantingTree) {

																((PlayerInfo*)(event.peer->data))->cloth_ances = 0;
																break;
															}

															((PlayerInfo*)(event.peer->data))->cloth_ances = pMov->plantingTree;

														}
#ifdef TOTAL_LOG
														cout << "Invalid item activated: " << pMov->plantingTree << " by " << ((PlayerInfo*)(event.peer->data))->displayName << endl;
#endif
														break;
													}
													sendClothes(peer);
													// activate item
												END_CLOTHSETTER_FORCE:;
												}
												if (data2->packetType == 18)
												{
													sendPData(peer, pMov);
													// add talk buble
												}
												if (data2->punchX != -1 && data2->punchY != -1) {
													//cout << data2->packetType << endl;
													if (data2->packetType == 3)
													{
														using namespace std::chrono;
														if (((PlayerInfo*)(peer->data))->lastBREAK + 150 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
														{
															((PlayerInfo*)(peer->data))->lastBREAK = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
															if (((PlayerInfo*)(peer->data))->cloth_hand == 5480) {
																if (((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
															else {
																sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															}
														}
														else {
														}
													}
													else {


													}
													/*Playerrmoving data;
													//data.packetType = 0x14;
													data.packetType = 0x3;
													//data.characterState = 0x924; // animation
													data.characterState = 0x0; // animation
													data.x = data2->punchX;
													data.y = data2->punchY;
													data.punchX = data2->punchX;
													data.punchY = data2->punchY;
													data.XSpeed = 0;
													data.YSpeed = 0;
													data.netID = ((PlayerInfo*)(event.peer->data))->netID;
													data.plantingTree = data2->plantingTree;
													SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
													cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;*/

												}
												delete data2;
												delete pMov;

											}
											else {
												cout << "Got bad tank packet";
											}
											/*char buffer[2048];
											for (int i = 0; i < event->packet->dataLength; i++)
											{
											sprintf(&buffer[2 * i], "%02X", event->packet->data[i]);
											}
											cout << buffer;*/
										}
									}
									break;
									case 5:
										break;
									case 6:
										//cout << GetTextPointerFromPacket(event.packet) << endl;
										break;
									}
									enet_packet_destroy(event.packet);
									break;
								}
								// changeis was made here
								case ENET_EVENT_TYPE_DISCONNECT:
#ifdef TOTAL_LOG
									printf("Peer disconnected.\n");
#endif
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										string name = ((PlayerInfo*)(currentPeer->data))->rawName;

										if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `o" + ((PlayerInfo*)(peer->data))->rawName + " `ohas `4logged off`o."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
										}
									}
									/* Reset the peer's client information. */
									/*ENetPeer* currentPeer;
									for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
									{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player `o" + ((PlayerInfo*)(event.peer->data))->tankIDName + "`o just left the game..."));
									ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
									enet_host_flush(server);
									}*/


									if (((PlayerInfo*)(peer->data))->passedCaptcha2 == true)
									{
										if (((PlayerInfo*)(peer->data))->haveGrowId) {


											PlayerInfo* p = ((PlayerInfo*)(peer->data));

											string username = PlayerDB::getProperName(p->rawName);
											{


												std::ofstream o("players/" + username + ".json");
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}

												json j;

												int ban = p->ban;
												int clothback = p->cloth_back;
												int clothhand = p->cloth_hand;
												int clothface = p->cloth_face;
												int clothhair = p->cloth_hair;
												int clothfeet = p->cloth_feet;
												int clothpants = p->cloth_pants;
												int clothneck = p->cloth_necklace;
												int clothshirt = p->cloth_shirt;
												int clothmask = p->cloth_mask;
												int clothances = p->cloth_ances;
												string guild = p->guild;
												bool joinguild = p->joinguild;
												int level = p->level;
												int xp = p->xp;


												string password = ((PlayerInfo*)(peer->data))->tankIDPass;
												j["username"] = username;
												j["password"] = hashPassword(password);
												j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
												j["ClothBack"] = clothback;
												j["ClothHand"] = clothhand;
												j["ClothFace"] = clothface;
												j["ClothShirt"] = clothshirt;
												j["ClothPants"] = clothpants;
												j["ClothNeck"] = clothneck;
												j["ClothHair"] = clothhair;
												j["ClothFeet"] = clothfeet;
												j["ClothMask"] = clothmask;
												j["ClothAnces"] = clothances;


												j["isBanned"] = ban;
												int ip;
												j["ipID"] = peer->address.host;
												j["effect"] = ((PlayerInfo*)(peer->data))->effect;
												j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
												j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
												j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
												j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
												j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
												j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
												j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
												j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
												j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
												j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
												j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
												j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
												j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
												j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
												j["guild"] = guild;
												j["joinguild"] = joinguild;
												j["level"] = level;
												j["xp"] = xp;
												j["rubble"] = p->rubble;
												j["rubblexp"] = p->rubblexp;
												j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;
												o << j << std::endl;

											}
										}
									}

									sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
									((PlayerInfo*)(event.peer->data))->inventory.items.clear();
									delete event.peer->data;
									event.peer->data = NULL;


								}
							}
					}
			}
			cout << "\n Wrong User Name or Password input again! \n\n";
			passwd = "";
			count += 1;
			if (count == 2) {
				cout << "You have entered wrong 2 times!";
				cout << " Crashing the server..";
				//system("shutdown -s -t 03");//this will shutdown your PC;
				system("pause");
				return 0;
			}
			goto wrong;
		}
		else if (ch == 8) { //check ch after press BACKSPACE key; 
			if (passwd.length() > 0) {//set condition blocking error while input
				cout << "\b \b";//remove Mask * on screen;
				passwd.erase(passwd.length() - 1); //erase String length
			}
		}
		else {
			cout << "*";
			passwd += ch; //the input password was assigned to variable passwd.
		}
	}
};

